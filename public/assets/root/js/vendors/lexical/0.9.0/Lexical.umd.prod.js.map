{"mappings":"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,EAAe,EAAO,QAAS,eAAgB,UAAY,CAAE,MAAO,KAA8C,SAAU,EAAG,CAAE,MAAO,IAA4C,IACpL,EAAe,EAAO,QAAS,gBAAiB,UAAY,CAAE,MAAO,KAA8C,SAAU,EAAG,CAAE,MAAO,IAA4C,IACrL,EAAe,EAAO,QAAS,eAAgB,UAAY,CAAE,MAAO,KAA8C,SAAU,EAAG,CAAE,MAAO,IAA4C,IACpL,EAAe,EAAO,QAAS,0BAA2B,UAAY,CAAE,MAAO,KAA8C,SAAU,EAAG,CAAE,MAAO,IAA4C,IAM3L,GAAI,IACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAQA,WAA6C,EAAM,CACnD,MAAO,CACH,KAAM,GAGd,KAAM,IAAiD,EAAoC,4BACrF,GAAsC,EAAoC,iBAC1E,GAAiD,EAAoC,4BACrF,GAAkD,EAAoC,6BACtF,GAAiD,EAAoC,4BACrF,GAA0D,EAAoC,qCAC9F,GAAsC,EAAoC,iBAC1E,GAA4C,EAAoC,uBAChF,GAA4C,EAAoC,uBAChF,GAA4C,EAAoC,uBAChF,GAA4C,EAAoC,uBAChF,GAAqC,EAAoC,gBACzE,GAAqC,EAAoC,gBACzE,GAAyC,EAAoC,mBAC7E,GAAgD,EAAoC,2BACpF,GAAoC,EAAoC,eACxE,GAA+C,EAAoC,0BACnF,GAAsC,EAAoC,iBAC1E,GAA6C,EAAoC,wBACjF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","sources":["dist/Lexical.umd.prod.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"$addUpdateTag\", function () { return $03df355ea183d08a$export$24cab2f466b76c04; }, function (v) { return $03df355ea183d08a$export$24cab2f466b76c04 = v; });\n$parcel$export(module.exports, \"$applyNodeReplacement\", function () { return $03df355ea183d08a$export$2f5beb31df92ea57; }, function (v) { return $03df355ea183d08a$export$2f5beb31df92ea57 = v; });\n$parcel$export(module.exports, \"$copyNode\", function () { return $03df355ea183d08a$export$def73b17b22438e7; }, function (v) { return $03df355ea183d08a$export$def73b17b22438e7 = v; });\n$parcel$export(module.exports, \"$createLineBreakNode\", function () { return $03df355ea183d08a$export$4ccaf7d0d16ab4c; }, function (v) { return $03df355ea183d08a$export$4ccaf7d0d16ab4c = v; });\n$parcel$export(module.exports, \"$createNodeSelection\", function () { return $03df355ea183d08a$export$f8cd0c3f35d1a61c; }, function (v) { return $03df355ea183d08a$export$f8cd0c3f35d1a61c = v; });\n$parcel$export(module.exports, \"$createParagraphNode\", function () { return $03df355ea183d08a$export$7f0c05ffb7ced90d; }, function (v) { return $03df355ea183d08a$export$7f0c05ffb7ced90d = v; });\n$parcel$export(module.exports, \"$createRangeSelection\", function () { return $03df355ea183d08a$export$1ccc217b9831b072; }, function (v) { return $03df355ea183d08a$export$1ccc217b9831b072 = v; });\n$parcel$export(module.exports, \"$createTextNode\", function () { return $03df355ea183d08a$export$2785f39dcdec0078; }, function (v) { return $03df355ea183d08a$export$2785f39dcdec0078 = v; });\n$parcel$export(module.exports, \"$getAdjacentNode\", function () { return $03df355ea183d08a$export$c4b907be1879d8c1; }, function (v) { return $03df355ea183d08a$export$c4b907be1879d8c1 = v; });\n$parcel$export(module.exports, \"$getNearestNodeFromDOMNode\", function () { return $03df355ea183d08a$export$fef265f0d2fcffdd; }, function (v) { return $03df355ea183d08a$export$fef265f0d2fcffdd = v; });\n$parcel$export(module.exports, \"$getNearestRootOrShadowRoot\", function () { return $03df355ea183d08a$export$6f13c476561e4734; }, function (v) { return $03df355ea183d08a$export$6f13c476561e4734 = v; });\n$parcel$export(module.exports, \"$getNodeByKey\", function () { return $03df355ea183d08a$export$e725f93d4d48c6d8; }, function (v) { return $03df355ea183d08a$export$e725f93d4d48c6d8 = v; });\n$parcel$export(module.exports, \"$getPreviousSelection\", function () { return $03df355ea183d08a$export$846e9407a8b5d98c; }, function (v) { return $03df355ea183d08a$export$846e9407a8b5d98c = v; });\n$parcel$export(module.exports, \"$getRoot\", function () { return $03df355ea183d08a$export$8d83ea843c4eea9a; }, function (v) { return $03df355ea183d08a$export$8d83ea843c4eea9a = v; });\n$parcel$export(module.exports, \"$getSelection\", function () { return $03df355ea183d08a$export$63a3201b3a5c7d90; }, function (v) { return $03df355ea183d08a$export$63a3201b3a5c7d90 = v; });\n$parcel$export(module.exports, \"$getTextContent\", function () { return $03df355ea183d08a$export$2d96f9a07231d1b9; }, function (v) { return $03df355ea183d08a$export$2d96f9a07231d1b9 = v; });\n$parcel$export(module.exports, \"$hasAncestor\", function () { return $03df355ea183d08a$export$e3d4b782f65c81f1; }, function (v) { return $03df355ea183d08a$export$e3d4b782f65c81f1 = v; });\n$parcel$export(module.exports, \"$insertNodes\", function () { return $03df355ea183d08a$export$d773017360b45449; }, function (v) { return $03df355ea183d08a$export$d773017360b45449 = v; });\n$parcel$export(module.exports, \"$isDecoratorNode\", function () { return $03df355ea183d08a$export$60aa03725ce41b1c; }, function (v) { return $03df355ea183d08a$export$60aa03725ce41b1c = v; });\n$parcel$export(module.exports, \"$isElementNode\", function () { return $03df355ea183d08a$export$923a058ef54437a4; }, function (v) { return $03df355ea183d08a$export$923a058ef54437a4 = v; });\n$parcel$export(module.exports, \"$isInlineElementOrDecoratorNode\", function () { return $03df355ea183d08a$export$a78813a4e8e8b9dd; }, function (v) { return $03df355ea183d08a$export$a78813a4e8e8b9dd = v; });\n$parcel$export(module.exports, \"$isLeafNode\", function () { return $03df355ea183d08a$export$8d016e0592201ace; }, function (v) { return $03df355ea183d08a$export$8d016e0592201ace = v; });\n$parcel$export(module.exports, \"$isLineBreakNode\", function () { return $03df355ea183d08a$export$b16330e40aa25c4e; }, function (v) { return $03df355ea183d08a$export$b16330e40aa25c4e = v; });\n$parcel$export(module.exports, \"$isNodeSelection\", function () { return $03df355ea183d08a$export$7257e4181651a7c3; }, function (v) { return $03df355ea183d08a$export$7257e4181651a7c3 = v; });\n$parcel$export(module.exports, \"$isParagraphNode\", function () { return $03df355ea183d08a$export$1fdda795300c79c6; }, function (v) { return $03df355ea183d08a$export$1fdda795300c79c6 = v; });\n$parcel$export(module.exports, \"$isRangeSelection\", function () { return $03df355ea183d08a$export$181b63acea8a0224; }, function (v) { return $03df355ea183d08a$export$181b63acea8a0224 = v; });\n$parcel$export(module.exports, \"$isRootNode\", function () { return $03df355ea183d08a$export$5b29ca560c2fedab; }, function (v) { return $03df355ea183d08a$export$5b29ca560c2fedab = v; });\n$parcel$export(module.exports, \"$isRootOrShadowRoot\", function () { return $03df355ea183d08a$export$6f851a24c61146af; }, function (v) { return $03df355ea183d08a$export$6f851a24c61146af = v; });\n$parcel$export(module.exports, \"$isTextNode\", function () { return $03df355ea183d08a$export$471953706258be2b; }, function (v) { return $03df355ea183d08a$export$471953706258be2b = v; });\n$parcel$export(module.exports, \"$nodesOfType\", function () { return $03df355ea183d08a$export$ac6fed8d7d40e66c; }, function (v) { return $03df355ea183d08a$export$ac6fed8d7d40e66c = v; });\n$parcel$export(module.exports, \"$normalizeSelection__EXPERIMENTAL\", function () { return $03df355ea183d08a$export$db10bc6ba67ffcb5; }, function (v) { return $03df355ea183d08a$export$db10bc6ba67ffcb5 = v; });\n$parcel$export(module.exports, \"$parseSerializedNode\", function () { return $03df355ea183d08a$export$e1d3a194df5be556; }, function (v) { return $03df355ea183d08a$export$e1d3a194df5be556 = v; });\n$parcel$export(module.exports, \"$setCompositionKey\", function () { return $03df355ea183d08a$export$ea25f5ef71f2d042; }, function (v) { return $03df355ea183d08a$export$ea25f5ef71f2d042 = v; });\n$parcel$export(module.exports, \"$setSelection\", function () { return $03df355ea183d08a$export$2aad78c37810bca9; }, function (v) { return $03df355ea183d08a$export$2aad78c37810bca9 = v; });\n$parcel$export(module.exports, \"$splitNode\", function () { return $03df355ea183d08a$export$cc2d53c74c1fb2b2; }, function (v) { return $03df355ea183d08a$export$cc2d53c74c1fb2b2 = v; });\n$parcel$export(module.exports, \"BLUR_COMMAND\", function () { return $03df355ea183d08a$export$4b6d457d076906ac; }, function (v) { return $03df355ea183d08a$export$4b6d457d076906ac = v; });\n$parcel$export(module.exports, \"CAN_REDO_COMMAND\", function () { return $03df355ea183d08a$export$e36aacf84f559bb3; }, function (v) { return $03df355ea183d08a$export$e36aacf84f559bb3 = v; });\n$parcel$export(module.exports, \"CAN_UNDO_COMMAND\", function () { return $03df355ea183d08a$export$9fd9dd31dd6ebdf5; }, function (v) { return $03df355ea183d08a$export$9fd9dd31dd6ebdf5 = v; });\n$parcel$export(module.exports, \"CLEAR_EDITOR_COMMAND\", function () { return $03df355ea183d08a$export$4926ce1a5702fdc7; }, function (v) { return $03df355ea183d08a$export$4926ce1a5702fdc7 = v; });\n$parcel$export(module.exports, \"CLEAR_HISTORY_COMMAND\", function () { return $03df355ea183d08a$export$d3f69a65bbe7edc; }, function (v) { return $03df355ea183d08a$export$d3f69a65bbe7edc = v; });\n$parcel$export(module.exports, \"CLICK_COMMAND\", function () { return $03df355ea183d08a$export$c1a2de6c823e5f82; }, function (v) { return $03df355ea183d08a$export$c1a2de6c823e5f82 = v; });\n$parcel$export(module.exports, \"COMMAND_PRIORITY_CRITICAL\", function () { return $03df355ea183d08a$export$6afdf194f304e546; }, function (v) { return $03df355ea183d08a$export$6afdf194f304e546 = v; });\n$parcel$export(module.exports, \"COMMAND_PRIORITY_EDITOR\", function () { return $03df355ea183d08a$export$11c61e12af5e1f41; }, function (v) { return $03df355ea183d08a$export$11c61e12af5e1f41 = v; });\n$parcel$export(module.exports, \"COMMAND_PRIORITY_HIGH\", function () { return $03df355ea183d08a$export$e8fb7042985cd2e9; }, function (v) { return $03df355ea183d08a$export$e8fb7042985cd2e9 = v; });\n$parcel$export(module.exports, \"COMMAND_PRIORITY_LOW\", function () { return $03df355ea183d08a$export$1d1358fe8b5bfab4; }, function (v) { return $03df355ea183d08a$export$1d1358fe8b5bfab4 = v; });\n$parcel$export(module.exports, \"COMMAND_PRIORITY_NORMAL\", function () { return $03df355ea183d08a$export$7bb13e375de35064; }, function (v) { return $03df355ea183d08a$export$7bb13e375de35064 = v; });\n$parcel$export(module.exports, \"CONTROLLED_TEXT_INSERTION_COMMAND\", function () { return $03df355ea183d08a$export$6f67c758bb657857; }, function (v) { return $03df355ea183d08a$export$6f67c758bb657857 = v; });\n$parcel$export(module.exports, \"COPY_COMMAND\", function () { return $03df355ea183d08a$export$3435fcfb1f59ef96; }, function (v) { return $03df355ea183d08a$export$3435fcfb1f59ef96 = v; });\n$parcel$export(module.exports, \"CUT_COMMAND\", function () { return $03df355ea183d08a$export$4dc8a35a083beec4; }, function (v) { return $03df355ea183d08a$export$4dc8a35a083beec4 = v; });\n$parcel$export(module.exports, \"DELETE_CHARACTER_COMMAND\", function () { return $03df355ea183d08a$export$35595bf6d7e36fd5; }, function (v) { return $03df355ea183d08a$export$35595bf6d7e36fd5 = v; });\n$parcel$export(module.exports, \"DELETE_LINE_COMMAND\", function () { return $03df355ea183d08a$export$d77fad8fb8747fd; }, function (v) { return $03df355ea183d08a$export$d77fad8fb8747fd = v; });\n$parcel$export(module.exports, \"DELETE_WORD_COMMAND\", function () { return $03df355ea183d08a$export$8e315b175631384c; }, function (v) { return $03df355ea183d08a$export$8e315b175631384c = v; });\n$parcel$export(module.exports, \"DEPRECATED_$createGridSelection\", function () { return $03df355ea183d08a$export$3c62f6ea1bcc0126; }, function (v) { return $03df355ea183d08a$export$3c62f6ea1bcc0126 = v; });\n$parcel$export(module.exports, \"DEPRECATED_$isGridCellNode\", function () { return $03df355ea183d08a$export$512956df40f3b40e; }, function (v) { return $03df355ea183d08a$export$512956df40f3b40e = v; });\n$parcel$export(module.exports, \"DEPRECATED_$isGridNode\", function () { return $03df355ea183d08a$export$5f4fd2bb79122677; }, function (v) { return $03df355ea183d08a$export$5f4fd2bb79122677 = v; });\n$parcel$export(module.exports, \"DEPRECATED_$isGridRowNode\", function () { return $03df355ea183d08a$export$6409391dce4c0f48; }, function (v) { return $03df355ea183d08a$export$6409391dce4c0f48 = v; });\n$parcel$export(module.exports, \"DEPRECATED_$isGridSelection\", function () { return $03df355ea183d08a$export$d3f36a5fb5c9efe5; }, function (v) { return $03df355ea183d08a$export$d3f36a5fb5c9efe5 = v; });\n$parcel$export(module.exports, \"DEPRECATED_GridCellNode\", function () { return $03df355ea183d08a$export$e284ef4eccc325c5; }, function (v) { return $03df355ea183d08a$export$e284ef4eccc325c5 = v; });\n$parcel$export(module.exports, \"DEPRECATED_GridNode\", function () { return $03df355ea183d08a$export$5627752ddf7eed41; }, function (v) { return $03df355ea183d08a$export$5627752ddf7eed41 = v; });\n$parcel$export(module.exports, \"DEPRECATED_GridRowNode\", function () { return $03df355ea183d08a$export$8c09d9a078ea3c2f; }, function (v) { return $03df355ea183d08a$export$8c09d9a078ea3c2f = v; });\n$parcel$export(module.exports, \"DRAGEND_COMMAND\", function () { return $03df355ea183d08a$export$ffbd838cf75d7d8e; }, function (v) { return $03df355ea183d08a$export$ffbd838cf75d7d8e = v; });\n$parcel$export(module.exports, \"DRAGOVER_COMMAND\", function () { return $03df355ea183d08a$export$b62c1cce98fa7223; }, function (v) { return $03df355ea183d08a$export$b62c1cce98fa7223 = v; });\n$parcel$export(module.exports, \"DRAGSTART_COMMAND\", function () { return $03df355ea183d08a$export$2e0fd45fde1da719; }, function (v) { return $03df355ea183d08a$export$2e0fd45fde1da719 = v; });\n$parcel$export(module.exports, \"DROP_COMMAND\", function () { return $03df355ea183d08a$export$eac1e4b16b80d3ea; }, function (v) { return $03df355ea183d08a$export$eac1e4b16b80d3ea = v; });\n$parcel$export(module.exports, \"DecoratorNode\", function () { return $03df355ea183d08a$export$8244b9efe04488e; }, function (v) { return $03df355ea183d08a$export$8244b9efe04488e = v; });\n$parcel$export(module.exports, \"ElementNode\", function () { return $03df355ea183d08a$export$dc064fe9e59310fd; }, function (v) { return $03df355ea183d08a$export$dc064fe9e59310fd = v; });\n$parcel$export(module.exports, \"FOCUS_COMMAND\", function () { return $03df355ea183d08a$export$cafe35f35e77bf56; }, function (v) { return $03df355ea183d08a$export$cafe35f35e77bf56 = v; });\n$parcel$export(module.exports, \"FORMAT_ELEMENT_COMMAND\", function () { return $03df355ea183d08a$export$d394dc6514823b18; }, function (v) { return $03df355ea183d08a$export$d394dc6514823b18 = v; });\n$parcel$export(module.exports, \"FORMAT_TEXT_COMMAND\", function () { return $03df355ea183d08a$export$85443a1a9543f043; }, function (v) { return $03df355ea183d08a$export$85443a1a9543f043 = v; });\n$parcel$export(module.exports, \"INDENT_CONTENT_COMMAND\", function () { return $03df355ea183d08a$export$2f74f6a2d927e6bd; }, function (v) { return $03df355ea183d08a$export$2f74f6a2d927e6bd = v; });\n$parcel$export(module.exports, \"INSERT_LINE_BREAK_COMMAND\", function () { return $03df355ea183d08a$export$64e35ce26e025724; }, function (v) { return $03df355ea183d08a$export$64e35ce26e025724 = v; });\n$parcel$export(module.exports, \"INSERT_PARAGRAPH_COMMAND\", function () { return $03df355ea183d08a$export$24f4fea65b096b4; }, function (v) { return $03df355ea183d08a$export$24f4fea65b096b4 = v; });\n$parcel$export(module.exports, \"KEY_ARROW_DOWN_COMMAND\", function () { return $03df355ea183d08a$export$baa60daa2ca402b3; }, function (v) { return $03df355ea183d08a$export$baa60daa2ca402b3 = v; });\n$parcel$export(module.exports, \"KEY_ARROW_LEFT_COMMAND\", function () { return $03df355ea183d08a$export$7525f8f8ab44508; }, function (v) { return $03df355ea183d08a$export$7525f8f8ab44508 = v; });\n$parcel$export(module.exports, \"KEY_ARROW_RIGHT_COMMAND\", function () { return $03df355ea183d08a$export$217ec2281ac1c53b; }, function (v) { return $03df355ea183d08a$export$217ec2281ac1c53b = v; });\n$parcel$export(module.exports, \"KEY_ARROW_UP_COMMAND\", function () { return $03df355ea183d08a$export$7833c2a33ae81d3d; }, function (v) { return $03df355ea183d08a$export$7833c2a33ae81d3d = v; });\n$parcel$export(module.exports, \"KEY_BACKSPACE_COMMAND\", function () { return $03df355ea183d08a$export$24bbba9bfa830f78; }, function (v) { return $03df355ea183d08a$export$24bbba9bfa830f78 = v; });\n$parcel$export(module.exports, \"KEY_DELETE_COMMAND\", function () { return $03df355ea183d08a$export$13a0e72b5c0146bb; }, function (v) { return $03df355ea183d08a$export$13a0e72b5c0146bb = v; });\n$parcel$export(module.exports, \"KEY_DOWN_COMMAND\", function () { return $03df355ea183d08a$export$61973214e0e18936; }, function (v) { return $03df355ea183d08a$export$61973214e0e18936 = v; });\n$parcel$export(module.exports, \"KEY_ENTER_COMMAND\", function () { return $03df355ea183d08a$export$2cdb7cdd6fccb293; }, function (v) { return $03df355ea183d08a$export$2cdb7cdd6fccb293 = v; });\n$parcel$export(module.exports, \"KEY_ESCAPE_COMMAND\", function () { return $03df355ea183d08a$export$53589e422a755d59; }, function (v) { return $03df355ea183d08a$export$53589e422a755d59 = v; });\n$parcel$export(module.exports, \"KEY_MODIFIER_COMMAND\", function () { return $03df355ea183d08a$export$452548a3c1874d61; }, function (v) { return $03df355ea183d08a$export$452548a3c1874d61 = v; });\n$parcel$export(module.exports, \"KEY_SPACE_COMMAND\", function () { return $03df355ea183d08a$export$d0bc2bb647ce4c17; }, function (v) { return $03df355ea183d08a$export$d0bc2bb647ce4c17 = v; });\n$parcel$export(module.exports, \"KEY_TAB_COMMAND\", function () { return $03df355ea183d08a$export$b321bdc226ccdcde; }, function (v) { return $03df355ea183d08a$export$b321bdc226ccdcde = v; });\n$parcel$export(module.exports, \"LineBreakNode\", function () { return $03df355ea183d08a$export$965f56e8043e93ae; }, function (v) { return $03df355ea183d08a$export$965f56e8043e93ae = v; });\n$parcel$export(module.exports, \"MOVE_TO_END\", function () { return $03df355ea183d08a$export$fb3b2d438650aff6; }, function (v) { return $03df355ea183d08a$export$fb3b2d438650aff6 = v; });\n$parcel$export(module.exports, \"MOVE_TO_START\", function () { return $03df355ea183d08a$export$dc117ee4d661295a; }, function (v) { return $03df355ea183d08a$export$dc117ee4d661295a = v; });\n$parcel$export(module.exports, \"OUTDENT_CONTENT_COMMAND\", function () { return $03df355ea183d08a$export$ecf9caa19e96e40d; }, function (v) { return $03df355ea183d08a$export$ecf9caa19e96e40d = v; });\n$parcel$export(module.exports, \"PASTE_COMMAND\", function () { return $03df355ea183d08a$export$7fb70c61b3bcc883; }, function (v) { return $03df355ea183d08a$export$7fb70c61b3bcc883 = v; });\n$parcel$export(module.exports, \"ParagraphNode\", function () { return $03df355ea183d08a$export$e94424771493b912; }, function (v) { return $03df355ea183d08a$export$e94424771493b912 = v; });\n$parcel$export(module.exports, \"REDO_COMMAND\", function () { return $03df355ea183d08a$export$8c4a0748d31d9941; }, function (v) { return $03df355ea183d08a$export$8c4a0748d31d9941 = v; });\n$parcel$export(module.exports, \"REMOVE_TEXT_COMMAND\", function () { return $03df355ea183d08a$export$9cc285f2a3ff220c; }, function (v) { return $03df355ea183d08a$export$9cc285f2a3ff220c = v; });\n$parcel$export(module.exports, \"RootNode\", function () { return $03df355ea183d08a$export$1c180cb67301903c; }, function (v) { return $03df355ea183d08a$export$1c180cb67301903c = v; });\n$parcel$export(module.exports, \"SELECTION_CHANGE_COMMAND\", function () { return $03df355ea183d08a$export$e396fef71d2b56e5; }, function (v) { return $03df355ea183d08a$export$e396fef71d2b56e5 = v; });\n$parcel$export(module.exports, \"TextNode\", function () { return $03df355ea183d08a$export$f0a25ea3087686aa; }, function (v) { return $03df355ea183d08a$export$f0a25ea3087686aa = v; });\n$parcel$export(module.exports, \"UNDO_COMMAND\", function () { return $03df355ea183d08a$export$34722a4946cb641e; }, function (v) { return $03df355ea183d08a$export$34722a4946cb641e = v; });\n$parcel$export(module.exports, \"createCommand\", function () { return $03df355ea183d08a$export$8d4021544bdece00; }, function (v) { return $03df355ea183d08a$export$8d4021544bdece00 = v; });\n$parcel$export(module.exports, \"createEditor\", function () { return $03df355ea183d08a$export$eb02d1ee0d3cac30; }, function (v) { return $03df355ea183d08a$export$eb02d1ee0d3cac30 = v; });\n$parcel$export(module.exports, \"isSelectionWithinEditor\", function () { return $03df355ea183d08a$export$f1b377b21cd6350b; }, function (v) { return $03df355ea183d08a$export$f1b377b21cd6350b = v; });\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var $03df355ea183d08a$export$24cab2f466b76c04;\nvar $03df355ea183d08a$export$2f5beb31df92ea57;\nvar $03df355ea183d08a$export$def73b17b22438e7;\nvar $03df355ea183d08a$export$4ccaf7d0d16ab4c;\nvar $03df355ea183d08a$export$f8cd0c3f35d1a61c;\nvar $03df355ea183d08a$export$7f0c05ffb7ced90d;\nvar $03df355ea183d08a$export$1ccc217b9831b072;\nvar $03df355ea183d08a$export$2785f39dcdec0078;\nvar $03df355ea183d08a$export$c4b907be1879d8c1;\nvar $03df355ea183d08a$export$fef265f0d2fcffdd;\nvar $03df355ea183d08a$export$6f13c476561e4734;\nvar $03df355ea183d08a$export$e725f93d4d48c6d8;\nvar $03df355ea183d08a$export$846e9407a8b5d98c;\nvar $03df355ea183d08a$export$8d83ea843c4eea9a;\nvar $03df355ea183d08a$export$63a3201b3a5c7d90;\nvar $03df355ea183d08a$export$2d96f9a07231d1b9;\nvar $03df355ea183d08a$export$e3d4b782f65c81f1;\nvar $03df355ea183d08a$export$d773017360b45449;\nvar $03df355ea183d08a$export$60aa03725ce41b1c;\nvar $03df355ea183d08a$export$923a058ef54437a4;\nvar $03df355ea183d08a$export$a78813a4e8e8b9dd;\nvar $03df355ea183d08a$export$8d016e0592201ace;\nvar $03df355ea183d08a$export$b16330e40aa25c4e;\nvar $03df355ea183d08a$export$7257e4181651a7c3;\nvar $03df355ea183d08a$export$1fdda795300c79c6;\nvar $03df355ea183d08a$export$181b63acea8a0224;\nvar $03df355ea183d08a$export$5b29ca560c2fedab;\nvar $03df355ea183d08a$export$6f851a24c61146af;\nvar $03df355ea183d08a$export$471953706258be2b;\nvar $03df355ea183d08a$export$ac6fed8d7d40e66c;\nvar $03df355ea183d08a$export$db10bc6ba67ffcb5;\nvar $03df355ea183d08a$export$e1d3a194df5be556;\nvar $03df355ea183d08a$export$ea25f5ef71f2d042;\nvar $03df355ea183d08a$export$2aad78c37810bca9;\nvar $03df355ea183d08a$export$cc2d53c74c1fb2b2;\nvar $03df355ea183d08a$export$4b6d457d076906ac;\nvar $03df355ea183d08a$export$e36aacf84f559bb3;\nvar $03df355ea183d08a$export$9fd9dd31dd6ebdf5;\nvar $03df355ea183d08a$export$4926ce1a5702fdc7;\nvar $03df355ea183d08a$export$d3f69a65bbe7edc;\nvar $03df355ea183d08a$export$c1a2de6c823e5f82;\nvar $03df355ea183d08a$export$6afdf194f304e546;\nvar $03df355ea183d08a$export$11c61e12af5e1f41;\nvar $03df355ea183d08a$export$e8fb7042985cd2e9;\nvar $03df355ea183d08a$export$1d1358fe8b5bfab4;\nvar $03df355ea183d08a$export$7bb13e375de35064;\nvar $03df355ea183d08a$export$6f67c758bb657857;\nvar $03df355ea183d08a$export$3435fcfb1f59ef96;\nvar $03df355ea183d08a$export$4dc8a35a083beec4;\nvar $03df355ea183d08a$export$35595bf6d7e36fd5;\nvar $03df355ea183d08a$export$d77fad8fb8747fd;\nvar $03df355ea183d08a$export$8e315b175631384c;\nvar $03df355ea183d08a$export$3c62f6ea1bcc0126;\nvar $03df355ea183d08a$export$512956df40f3b40e;\nvar $03df355ea183d08a$export$5f4fd2bb79122677;\nvar $03df355ea183d08a$export$6409391dce4c0f48;\nvar $03df355ea183d08a$export$d3f36a5fb5c9efe5;\nvar $03df355ea183d08a$export$e284ef4eccc325c5;\nvar $03df355ea183d08a$export$5627752ddf7eed41;\nvar $03df355ea183d08a$export$8c09d9a078ea3c2f;\nvar $03df355ea183d08a$export$ffbd838cf75d7d8e;\nvar $03df355ea183d08a$export$b62c1cce98fa7223;\nvar $03df355ea183d08a$export$2e0fd45fde1da719;\nvar $03df355ea183d08a$export$eac1e4b16b80d3ea;\nvar $03df355ea183d08a$export$8244b9efe04488e;\nvar $03df355ea183d08a$export$dc064fe9e59310fd;\nvar $03df355ea183d08a$export$cafe35f35e77bf56;\nvar $03df355ea183d08a$export$d394dc6514823b18;\nvar $03df355ea183d08a$export$85443a1a9543f043;\nvar $03df355ea183d08a$export$2f74f6a2d927e6bd;\nvar $03df355ea183d08a$export$64e35ce26e025724;\nvar $03df355ea183d08a$export$24f4fea65b096b4;\nvar $03df355ea183d08a$export$baa60daa2ca402b3;\nvar $03df355ea183d08a$export$7525f8f8ab44508;\nvar $03df355ea183d08a$export$217ec2281ac1c53b;\nvar $03df355ea183d08a$export$7833c2a33ae81d3d;\nvar $03df355ea183d08a$export$24bbba9bfa830f78;\nvar $03df355ea183d08a$export$13a0e72b5c0146bb;\nvar $03df355ea183d08a$export$61973214e0e18936;\nvar $03df355ea183d08a$export$2cdb7cdd6fccb293;\nvar $03df355ea183d08a$export$53589e422a755d59;\nvar $03df355ea183d08a$export$452548a3c1874d61;\nvar $03df355ea183d08a$export$d0bc2bb647ce4c17;\nvar $03df355ea183d08a$export$b321bdc226ccdcde;\nvar $03df355ea183d08a$export$965f56e8043e93ae;\nvar $03df355ea183d08a$export$fb3b2d438650aff6;\nvar $03df355ea183d08a$export$dc117ee4d661295a;\nvar $03df355ea183d08a$export$ecf9caa19e96e40d;\nvar $03df355ea183d08a$export$7fb70c61b3bcc883;\nvar $03df355ea183d08a$export$e94424771493b912;\nvar $03df355ea183d08a$export$8c4a0748d31d9941;\nvar $03df355ea183d08a$export$9cc285f2a3ff220c;\nvar $03df355ea183d08a$export$1c180cb67301903c;\nvar $03df355ea183d08a$export$e396fef71d2b56e5;\nvar $03df355ea183d08a$export$f0a25ea3087686aa;\nvar $03df355ea183d08a$export$34722a4946cb641e;\nvar $03df355ea183d08a$export$8d4021544bdece00;\nvar $03df355ea183d08a$export$eb02d1ee0d3cac30;\nvar $03df355ea183d08a$export$f1b377b21cd6350b;\n\"use strict\";\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$createCommand(type) {\n    return {\n        type: type\n    };\n}\nconst $03df355ea183d08a$var$SELECTION_CHANGE_COMMAND = $03df355ea183d08a$var$createCommand(\"SELECTION_CHANGE_COMMAND\");\nconst $03df355ea183d08a$var$CLICK_COMMAND = $03df355ea183d08a$var$createCommand(\"CLICK_COMMAND\");\nconst $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND = $03df355ea183d08a$var$createCommand(\"DELETE_CHARACTER_COMMAND\");\nconst $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND = $03df355ea183d08a$var$createCommand(\"INSERT_LINE_BREAK_COMMAND\");\nconst $03df355ea183d08a$var$INSERT_PARAGRAPH_COMMAND = $03df355ea183d08a$var$createCommand(\"INSERT_PARAGRAPH_COMMAND\");\nconst $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND = $03df355ea183d08a$var$createCommand(\"CONTROLLED_TEXT_INSERTION_COMMAND\");\nconst $03df355ea183d08a$var$PASTE_COMMAND = $03df355ea183d08a$var$createCommand(\"PASTE_COMMAND\");\nconst $03df355ea183d08a$var$REMOVE_TEXT_COMMAND = $03df355ea183d08a$var$createCommand(\"REMOVE_TEXT_COMMAND\");\nconst $03df355ea183d08a$var$DELETE_WORD_COMMAND = $03df355ea183d08a$var$createCommand(\"DELETE_WORD_COMMAND\");\nconst $03df355ea183d08a$var$DELETE_LINE_COMMAND = $03df355ea183d08a$var$createCommand(\"DELETE_LINE_COMMAND\");\nconst $03df355ea183d08a$var$FORMAT_TEXT_COMMAND = $03df355ea183d08a$var$createCommand(\"FORMAT_TEXT_COMMAND\");\nconst $03df355ea183d08a$var$UNDO_COMMAND = $03df355ea183d08a$var$createCommand(\"UNDO_COMMAND\");\nconst $03df355ea183d08a$var$REDO_COMMAND = $03df355ea183d08a$var$createCommand(\"REDO_COMMAND\");\nconst $03df355ea183d08a$var$KEY_DOWN_COMMAND = $03df355ea183d08a$var$createCommand(\"KEYDOWN_COMMAND\");\nconst $03df355ea183d08a$var$KEY_ARROW_RIGHT_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ARROW_RIGHT_COMMAND\");\nconst $03df355ea183d08a$var$MOVE_TO_END = $03df355ea183d08a$var$createCommand(\"MOVE_TO_END\");\nconst $03df355ea183d08a$var$KEY_ARROW_LEFT_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ARROW_LEFT_COMMAND\");\nconst $03df355ea183d08a$var$MOVE_TO_START = $03df355ea183d08a$var$createCommand(\"MOVE_TO_START\");\nconst $03df355ea183d08a$var$KEY_ARROW_UP_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ARROW_UP_COMMAND\");\nconst $03df355ea183d08a$var$KEY_ARROW_DOWN_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ARROW_DOWN_COMMAND\");\nconst $03df355ea183d08a$var$KEY_ENTER_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ENTER_COMMAND\");\nconst $03df355ea183d08a$var$KEY_SPACE_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_SPACE_COMMAND\");\nconst $03df355ea183d08a$var$KEY_BACKSPACE_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_BACKSPACE_COMMAND\");\nconst $03df355ea183d08a$var$KEY_ESCAPE_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_ESCAPE_COMMAND\");\nconst $03df355ea183d08a$var$KEY_DELETE_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_DELETE_COMMAND\");\nconst $03df355ea183d08a$var$KEY_TAB_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_TAB_COMMAND\");\nconst $03df355ea183d08a$var$INDENT_CONTENT_COMMAND = $03df355ea183d08a$var$createCommand(\"INDENT_CONTENT_COMMAND\");\nconst $03df355ea183d08a$var$OUTDENT_CONTENT_COMMAND = $03df355ea183d08a$var$createCommand(\"OUTDENT_CONTENT_COMMAND\");\nconst $03df355ea183d08a$var$DROP_COMMAND = $03df355ea183d08a$var$createCommand(\"DROP_COMMAND\");\nconst $03df355ea183d08a$var$FORMAT_ELEMENT_COMMAND = $03df355ea183d08a$var$createCommand(\"FORMAT_ELEMENT_COMMAND\");\nconst $03df355ea183d08a$var$DRAGSTART_COMMAND = $03df355ea183d08a$var$createCommand(\"DRAGSTART_COMMAND\");\nconst $03df355ea183d08a$var$DRAGOVER_COMMAND = $03df355ea183d08a$var$createCommand(\"DRAGOVER_COMMAND\");\nconst $03df355ea183d08a$var$DRAGEND_COMMAND = $03df355ea183d08a$var$createCommand(\"DRAGEND_COMMAND\");\nconst $03df355ea183d08a$var$COPY_COMMAND = $03df355ea183d08a$var$createCommand(\"COPY_COMMAND\");\nconst $03df355ea183d08a$var$CUT_COMMAND = $03df355ea183d08a$var$createCommand(\"CUT_COMMAND\");\nconst $03df355ea183d08a$var$CLEAR_EDITOR_COMMAND = $03df355ea183d08a$var$createCommand(\"CLEAR_EDITOR_COMMAND\");\nconst $03df355ea183d08a$var$CLEAR_HISTORY_COMMAND = $03df355ea183d08a$var$createCommand(\"CLEAR_HISTORY_COMMAND\");\nconst $03df355ea183d08a$var$CAN_REDO_COMMAND = $03df355ea183d08a$var$createCommand(\"CAN_REDO_COMMAND\");\nconst $03df355ea183d08a$var$CAN_UNDO_COMMAND = $03df355ea183d08a$var$createCommand(\"CAN_UNDO_COMMAND\");\nconst $03df355ea183d08a$var$FOCUS_COMMAND = $03df355ea183d08a$var$createCommand(\"FOCUS_COMMAND\");\nconst $03df355ea183d08a$var$BLUR_COMMAND = $03df355ea183d08a$var$createCommand(\"BLUR_COMMAND\");\nconst $03df355ea183d08a$var$KEY_MODIFIER_COMMAND = $03df355ea183d08a$var$createCommand(\"KEY_MODIFIER_COMMAND\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$CAN_USE_DOM = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$documentMode = $03df355ea183d08a$var$CAN_USE_DOM && \"documentMode\" in document ? document.documentMode : null;\nconst $03df355ea183d08a$var$IS_APPLE = $03df355ea183d08a$var$CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst $03df355ea183d08a$var$IS_FIREFOX = $03df355ea183d08a$var$CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst $03df355ea183d08a$var$CAN_USE_BEFORE_INPUT = $03df355ea183d08a$var$CAN_USE_DOM && \"InputEvent\" in window && !$03df355ea183d08a$var$documentMode ? \"getTargetRanges\" in new window.InputEvent(\"input\") : false;\nconst $03df355ea183d08a$var$IS_SAFARI = $03df355ea183d08a$var$CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst $03df355ea183d08a$var$IS_IOS = $03df355ea183d08a$var$CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst $03df355ea183d08a$var$IS_CHROME = $03df355ea183d08a$var$CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\nconst $03df355ea183d08a$var$IS_APPLE_WEBKIT = $03df355ea183d08a$var$CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !$03df355ea183d08a$var$IS_CHROME;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$DOM_ELEMENT_TYPE = 1;\nconst $03df355ea183d08a$var$DOM_TEXT_TYPE = 3; // Reconciling\nconst $03df355ea183d08a$var$NO_DIRTY_NODES = 0;\nconst $03df355ea183d08a$var$HAS_DIRTY_NODES = 1;\nconst $03df355ea183d08a$var$FULL_RECONCILE = 2; // Text node modes\nconst $03df355ea183d08a$var$IS_NORMAL = 0;\nconst $03df355ea183d08a$var$IS_TOKEN = 1;\nconst $03df355ea183d08a$var$IS_SEGMENTED = 2; // IS_INERT = 3\n// Text node formatting\nconst $03df355ea183d08a$var$IS_BOLD = 1;\nconst $03df355ea183d08a$var$IS_ITALIC = 2;\nconst $03df355ea183d08a$var$IS_STRIKETHROUGH = 4;\nconst $03df355ea183d08a$var$IS_UNDERLINE = 8;\nconst $03df355ea183d08a$var$IS_CODE = 16;\nconst $03df355ea183d08a$var$IS_SUBSCRIPT = 32;\nconst $03df355ea183d08a$var$IS_SUPERSCRIPT = 64;\nconst $03df355ea183d08a$var$IS_HIGHLIGHT = 128;\nconst $03df355ea183d08a$var$IS_ALL_FORMATTING = $03df355ea183d08a$var$IS_BOLD | $03df355ea183d08a$var$IS_ITALIC | $03df355ea183d08a$var$IS_STRIKETHROUGH | $03df355ea183d08a$var$IS_UNDERLINE | $03df355ea183d08a$var$IS_CODE | $03df355ea183d08a$var$IS_SUBSCRIPT | $03df355ea183d08a$var$IS_SUPERSCRIPT | $03df355ea183d08a$var$IS_HIGHLIGHT; // Text node details\nconst $03df355ea183d08a$var$IS_DIRECTIONLESS = 1;\nconst $03df355ea183d08a$var$IS_UNMERGEABLE = 2; // Element node formatting\nconst $03df355ea183d08a$var$IS_ALIGN_LEFT = 1;\nconst $03df355ea183d08a$var$IS_ALIGN_CENTER = 2;\nconst $03df355ea183d08a$var$IS_ALIGN_RIGHT = 3;\nconst $03df355ea183d08a$var$IS_ALIGN_JUSTIFY = 4;\nconst $03df355ea183d08a$var$IS_ALIGN_START = 5;\nconst $03df355ea183d08a$var$IS_ALIGN_END = 6; // Reconciliation\nconst $03df355ea183d08a$var$NON_BREAKING_SPACE = \"\\xa0\";\nconst $03df355ea183d08a$var$ZERO_WIDTH_SPACE = \"​\"; // For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst $03df355ea183d08a$var$COMPOSITION_SUFFIX = $03df355ea183d08a$var$IS_SAFARI || $03df355ea183d08a$var$IS_IOS || $03df355ea183d08a$var$IS_APPLE_WEBKIT ? $03df355ea183d08a$var$NON_BREAKING_SPACE : $03df355ea183d08a$var$ZERO_WIDTH_SPACE;\nconst $03df355ea183d08a$var$DOUBLE_LINE_BREAK = \"\\n\\n\"; // For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst $03df355ea183d08a$var$COMPOSITION_START_CHAR = $03df355ea183d08a$var$IS_FIREFOX ? $03df355ea183d08a$var$NON_BREAKING_SPACE : $03df355ea183d08a$var$COMPOSITION_SUFFIX;\nconst $03df355ea183d08a$var$RTL = \"֑-߿יִ-﷽ﹰ-ﻼ\";\nconst $03df355ea183d08a$var$LTR = \"A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿\"; // eslint-disable-next-line no-misleading-character-class\nconst $03df355ea183d08a$var$RTL_REGEX = new RegExp(\"^[^\" + $03df355ea183d08a$var$LTR + \"]*[\" + $03df355ea183d08a$var$RTL + \"]\"); // eslint-disable-next-line no-misleading-character-class\nconst $03df355ea183d08a$var$LTR_REGEX = new RegExp(\"^[^\" + $03df355ea183d08a$var$RTL + \"]*[\" + $03df355ea183d08a$var$LTR + \"]\");\nconst $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT = {\n    bold: $03df355ea183d08a$var$IS_BOLD,\n    code: $03df355ea183d08a$var$IS_CODE,\n    highlight: $03df355ea183d08a$var$IS_HIGHLIGHT,\n    italic: $03df355ea183d08a$var$IS_ITALIC,\n    strikethrough: $03df355ea183d08a$var$IS_STRIKETHROUGH,\n    subscript: $03df355ea183d08a$var$IS_SUBSCRIPT,\n    superscript: $03df355ea183d08a$var$IS_SUPERSCRIPT,\n    underline: $03df355ea183d08a$var$IS_UNDERLINE\n};\nconst $03df355ea183d08a$var$DETAIL_TYPE_TO_DETAIL = {\n    directionless: $03df355ea183d08a$var$IS_DIRECTIONLESS,\n    unmergeable: $03df355ea183d08a$var$IS_UNMERGEABLE\n};\nconst $03df355ea183d08a$var$ELEMENT_TYPE_TO_FORMAT = {\n    center: $03df355ea183d08a$var$IS_ALIGN_CENTER,\n    end: $03df355ea183d08a$var$IS_ALIGN_END,\n    justify: $03df355ea183d08a$var$IS_ALIGN_JUSTIFY,\n    left: $03df355ea183d08a$var$IS_ALIGN_LEFT,\n    right: $03df355ea183d08a$var$IS_ALIGN_RIGHT,\n    start: $03df355ea183d08a$var$IS_ALIGN_START\n};\nconst $03df355ea183d08a$var$ELEMENT_FORMAT_TO_TYPE = {\n    [$03df355ea183d08a$var$IS_ALIGN_CENTER]: \"center\",\n    [$03df355ea183d08a$var$IS_ALIGN_END]: \"end\",\n    [$03df355ea183d08a$var$IS_ALIGN_JUSTIFY]: \"justify\",\n    [$03df355ea183d08a$var$IS_ALIGN_LEFT]: \"left\",\n    [$03df355ea183d08a$var$IS_ALIGN_RIGHT]: \"right\",\n    [$03df355ea183d08a$var$IS_ALIGN_START]: \"start\"\n};\nconst $03df355ea183d08a$var$TEXT_MODE_TO_TYPE = {\n    normal: $03df355ea183d08a$var$IS_NORMAL,\n    segmented: $03df355ea183d08a$var$IS_SEGMENTED,\n    token: $03df355ea183d08a$var$IS_TOKEN\n};\nconst $03df355ea183d08a$var$TEXT_TYPE_TO_MODE = {\n    [$03df355ea183d08a$var$IS_NORMAL]: \"normal\",\n    [$03df355ea183d08a$var$IS_SEGMENTED]: \"segmented\",\n    [$03df355ea183d08a$var$IS_TOKEN]: \"token\"\n};\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$TEXT_MUTATION_VARIANCE = 100;\nlet $03df355ea183d08a$var$isProcessingMutations = false;\nlet $03df355ea183d08a$var$lastTextEntryTimeStamp = 0;\nfunction $03df355ea183d08a$var$getIsProcesssingMutations() {\n    return $03df355ea183d08a$var$isProcessingMutations;\n}\nfunction $03df355ea183d08a$var$updateTimeStamp(event) {\n    $03df355ea183d08a$var$lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction $03df355ea183d08a$var$initTextEntryListener(editor) {\n    if ($03df355ea183d08a$var$lastTextEntryTimeStamp === 0) $03df355ea183d08a$var$getWindow(editor).addEventListener(\"textInput\", $03df355ea183d08a$var$updateTimeStamp, true);\n}\nfunction $03df355ea183d08a$var$isManagedLineBreak(dom, target, editor) {\n    return target.__lexicalLineBreak === dom || // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined;\n}\nfunction $03df355ea183d08a$var$getLastSelection(editor) {\n    return editor.getEditorState().read(()=>{\n        const selection = $03df355ea183d08a$var$$getSelection();\n        return selection !== null ? selection.clone() : null;\n    });\n}\nfunction $03df355ea183d08a$var$handleTextMutation(target, node, editor) {\n    const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n    let anchorOffset = null;\n    let focusOffset = null;\n    if (domSelection !== null && domSelection.anchorNode === target) {\n        anchorOffset = domSelection.anchorOffset;\n        focusOffset = domSelection.focusOffset;\n    }\n    const text = target.nodeValue;\n    if (text !== null) $03df355ea183d08a$var$$updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n}\nfunction $03df355ea183d08a$var$shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n    if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n        const anchorNode = selection.anchor.getNode();\n        if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) return false;\n    }\n    return targetDOM.nodeType === $03df355ea183d08a$var$DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $03df355ea183d08a$var$$flushMutations$1(editor, mutations, observer) {\n    $03df355ea183d08a$var$isProcessingMutations = true;\n    const shouldFlushTextMutations = performance.now() - $03df355ea183d08a$var$lastTextEntryTimeStamp > $03df355ea183d08a$var$TEXT_MUTATION_VARIANCE;\n    try {\n        $03df355ea183d08a$var$updateEditor(editor, ()=>{\n            const selection = $03df355ea183d08a$var$$getSelection() || $03df355ea183d08a$var$getLastSelection(editor);\n            const badDOMTargets = new Map();\n            const rootElement = editor.getRootElement(); // We use the current editor state, as that reflects what is\n            // actually \"on screen\".\n            const currentEditorState = editor._editorState;\n            const blockCursorElement = editor._blockCursorElement;\n            let shouldRevertSelection = false;\n            let possibleTextForFirefoxPaste = \"\";\n            for(let i = 0; i < mutations.length; i++){\n                const mutation = mutations[i];\n                const type = mutation.type;\n                const targetDOM = mutation.target;\n                let targetNode = $03df355ea183d08a$var$$getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n                if (targetNode === null && targetDOM !== rootElement || $03df355ea183d08a$var$$isDecoratorNode(targetNode)) continue;\n                if (type === \"characterData\") // Text mutations are deferred and passed to mutation listeners to be\n                // processed outside of the Lexical engine.\n                {\n                    if (shouldFlushTextMutations && $03df355ea183d08a$var$$isTextNode(targetNode) && $03df355ea183d08a$var$shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) $03df355ea183d08a$var$handleTextMutation(targetDOM, targetNode, editor);\n                } else if (type === \"childList\") {\n                    shouldRevertSelection = true; // We attempt to \"undo\" any changes that have occurred outside\n                    // of Lexical. We want Lexical's editor state to be source of truth.\n                    // To the user, these will look like no-ops.\n                    const addedDOMs = mutation.addedNodes;\n                    for(let s = 0; s < addedDOMs.length; s++){\n                        const addedDOM = addedDOMs[s];\n                        const node = $03df355ea183d08a$var$getNodeFromDOMNode(addedDOM);\n                        const parentDOM = addedDOM.parentNode;\n                        if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== \"BR\" || !$03df355ea183d08a$var$isManagedLineBreak(addedDOM, parentDOM, editor))) {\n                            if ($03df355ea183d08a$var$IS_FIREFOX) {\n                                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                                if (possibleText) possibleTextForFirefoxPaste += possibleText;\n                            }\n                            parentDOM.removeChild(addedDOM);\n                        }\n                    }\n                    const removedDOMs = mutation.removedNodes;\n                    const removedDOMsLength = removedDOMs.length;\n                    if (removedDOMsLength > 0) {\n                        let unremovedBRs = 0;\n                        for(let s = 0; s < removedDOMsLength; s++){\n                            const removedDOM = removedDOMs[s];\n                            if (removedDOM.nodeName === \"BR\" && $03df355ea183d08a$var$isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                                targetDOM.appendChild(removedDOM);\n                                unremovedBRs++;\n                            }\n                        }\n                        if (removedDOMsLength !== unremovedBRs) {\n                            if (targetDOM === rootElement) targetNode = $03df355ea183d08a$var$internalGetRoot(currentEditorState);\n                            badDOMTargets.set(targetDOM, targetNode);\n                        }\n                    }\n                }\n            } // Now we process each of the unique target nodes, attempting\n            // to restore their contents back to the source of truth, which\n            // is Lexical's \"current\" editor state. This is basically like\n            // an internal revert on the DOM.\n            if (badDOMTargets.size > 0) for (const [targetDOM, targetNode] of badDOMTargets){\n                if ($03df355ea183d08a$var$$isElementNode(targetNode)) {\n                    const childKeys = targetNode.getChildrenKeys();\n                    let currentDOM = targetDOM.firstChild;\n                    for(let s = 0; s < childKeys.length; s++){\n                        const key = childKeys[s];\n                        const correctDOM = editor.getElementByKey(key);\n                        if (correctDOM === null) continue;\n                        if (currentDOM == null) {\n                            targetDOM.appendChild(correctDOM);\n                            currentDOM = correctDOM;\n                        } else if (currentDOM !== correctDOM) targetDOM.replaceChild(correctDOM, currentDOM);\n                        currentDOM = currentDOM.nextSibling;\n                    }\n                } else if ($03df355ea183d08a$var$$isTextNode(targetNode)) targetNode.markDirty();\n            }\n             // Capture all the mutations made during this function. This\n            // also prevents us having to process them on the next cycle\n            // of onMutation, as these mutations were made by us.\n            const records = observer.takeRecords(); // Check for any random auto-added <br> elements, and remove them.\n            // These get added by the browser when we undo the above mutations\n            // and this can lead to a broken UI.\n            if (records.length > 0) {\n                for(let i = 0; i < records.length; i++){\n                    const record = records[i];\n                    const addedNodes = record.addedNodes;\n                    const target = record.target;\n                    for(let s = 0; s < addedNodes.length; s++){\n                        const addedDOM = addedNodes[s];\n                        const parentDOM = addedDOM.parentNode;\n                        if (parentDOM != null && addedDOM.nodeName === \"BR\" && !$03df355ea183d08a$var$isManagedLineBreak(addedDOM, target, editor)) parentDOM.removeChild(addedDOM);\n                    }\n                } // Clear any of those removal mutations\n                observer.takeRecords();\n            }\n            if (selection !== null) {\n                if (shouldRevertSelection) {\n                    selection.dirty = true;\n                    $03df355ea183d08a$var$$setSelection(selection);\n                }\n                if ($03df355ea183d08a$var$IS_FIREFOX && $03df355ea183d08a$var$isFirefoxClipboardEvents(editor)) selection.insertRawText(possibleTextForFirefoxPaste);\n            }\n        });\n    } finally{\n        $03df355ea183d08a$var$isProcessingMutations = false;\n    }\n}\nfunction $03df355ea183d08a$var$flushRootMutations(editor) {\n    const observer = editor._observer;\n    if (observer !== null) {\n        const mutations = observer.takeRecords();\n        $03df355ea183d08a$var$$flushMutations$1(editor, mutations, observer);\n    }\n}\nfunction $03df355ea183d08a$var$initMutationObserver(editor) {\n    $03df355ea183d08a$var$initTextEntryListener(editor);\n    editor._observer = new MutationObserver((mutations, observer)=>{\n        $03df355ea183d08a$var$$flushMutations$1(editor, mutations, observer);\n    });\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ let $03df355ea183d08a$var$keyCounter = 1;\nfunction $03df355ea183d08a$var$generateRandomKey() {\n    return \"\" + $03df355ea183d08a$var$keyCounter++;\n}\nfunction $03df355ea183d08a$var$getRegisteredNodeOrThrow(editor, nodeType) {\n    const registeredNode = editor._nodes.get(nodeType);\n    if (registeredNode === undefined) throw Error(`registeredNode: Type ${nodeType} not found`);\n    return registeredNode;\n}\nconst $03df355ea183d08a$var$scheduleMicroTask = typeof queueMicrotask === \"function\" ? queueMicrotask : (fn)=>{\n    // No window prefix intended (#1400)\n    Promise.resolve().then(fn);\n};\nfunction $03df355ea183d08a$var$$isSelectionCapturedInDecorator(node) {\n    return $03df355ea183d08a$var$$isDecoratorNode($03df355ea183d08a$var$$getNearestNodeFromDOMNode(node));\n}\nfunction $03df355ea183d08a$var$isSelectionCapturedInDecoratorInput(anchorDOM) {\n    const activeElement = document.activeElement;\n    if (activeElement === null) return false;\n    const nodeName = activeElement.nodeName;\n    return $03df355ea183d08a$var$$isDecoratorNode($03df355ea183d08a$var$$getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === \"INPUT\" || nodeName === \"TEXTAREA\" || activeElement.contentEditable === \"true\" && // @ts-ignore iternal field\n    activeElement.__lexicalEditor == null);\n}\nfunction $03df355ea183d08a$var$isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n    const rootElement = editor.getRootElement();\n    try {\n        return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) && // Ignore if selection is within nested editor\n        anchorDOM !== null && !$03df355ea183d08a$var$isSelectionCapturedInDecoratorInput(anchorDOM) && $03df355ea183d08a$var$getNearestEditorFromDOMNode(anchorDOM) === editor;\n    } catch (error) {\n        return false;\n    }\n}\nfunction $03df355ea183d08a$var$getNearestEditorFromDOMNode(node) {\n    let currentNode = node;\n    while(currentNode != null){\n        // @ts-expect-error: internal field\n        const editor = currentNode.__lexicalEditor;\n        if (editor != null) return editor;\n        currentNode = $03df355ea183d08a$var$getParentElement(currentNode);\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$getTextDirection(text) {\n    if ($03df355ea183d08a$var$RTL_REGEX.test(text)) return \"rtl\";\n    if ($03df355ea183d08a$var$LTR_REGEX.test(text)) return \"ltr\";\n    return null;\n}\nfunction $03df355ea183d08a$var$$isTokenOrSegmented(node) {\n    return node.isToken() || node.isSegmented();\n}\nfunction $03df355ea183d08a$var$isDOMNodeLexicalTextNode(node) {\n    return node.nodeType === $03df355ea183d08a$var$DOM_TEXT_TYPE;\n}\nfunction $03df355ea183d08a$var$getDOMTextNode(element) {\n    let node = element;\n    while(node != null){\n        if ($03df355ea183d08a$var$isDOMNodeLexicalTextNode(node)) return node;\n        node = node.firstChild;\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$toggleTextFormatType(format, type, alignWithFormat) {\n    const activeFormat = $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[type];\n    const isStateFlagPresent = format & activeFormat;\n    if (isStateFlagPresent && (alignWithFormat === null || (alignWithFormat & activeFormat) === 0)) // Remove the state flag.\n    return format ^ activeFormat;\n    if (alignWithFormat === null || alignWithFormat & activeFormat) // Add the state flag.\n    return format | activeFormat;\n    return format;\n}\nfunction $03df355ea183d08a$var$$isLeafNode(node) {\n    return $03df355ea183d08a$var$$isTextNode(node) || $03df355ea183d08a$var$$isLineBreakNode(node) || $03df355ea183d08a$var$$isDecoratorNode(node);\n}\nfunction $03df355ea183d08a$var$$setNodeKey(node, existingKey) {\n    if (existingKey != null) {\n        node.__key = existingKey;\n        return;\n    }\n    $03df355ea183d08a$var$errorOnReadOnly();\n    $03df355ea183d08a$var$errorOnInfiniteTransforms();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    const key = $03df355ea183d08a$var$generateRandomKey();\n    editorState._nodeMap.set(key, node); // TODO Split this function into leaf/element\n    if ($03df355ea183d08a$var$$isElementNode(node)) editor._dirtyElements.set(key, true);\n    else editor._dirtyLeaves.add(key);\n    editor._cloneNotNeeded.add(key);\n    editor._dirtyType = $03df355ea183d08a$var$HAS_DIRTY_NODES;\n    node.__key = key;\n}\nfunction $03df355ea183d08a$var$internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n    let nextParentKey = parentKey;\n    while(nextParentKey !== null){\n        if (dirtyElements.has(nextParentKey)) return;\n        const node = nodeMap.get(nextParentKey);\n        if (node === undefined) break;\n        dirtyElements.set(nextParentKey, false);\n        nextParentKey = node.__parent;\n    }\n}\nfunction $03df355ea183d08a$var$removeFromParent(node) {\n    const oldParent = node.getParent();\n    if (oldParent !== null) {\n        const writableNode = node.getWritable();\n        const writableParent = oldParent.getWritable();\n        const prevSibling = node.getPreviousSibling();\n        const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n        if (prevSibling === null) {\n            if (nextSibling !== null) {\n                const writableNextSibling = nextSibling.getWritable();\n                writableParent.__first = nextSibling.__key;\n                writableNextSibling.__prev = null;\n            } else writableParent.__first = null;\n        } else {\n            const writablePrevSibling = prevSibling.getWritable();\n            if (nextSibling !== null) {\n                const writableNextSibling = nextSibling.getWritable();\n                writableNextSibling.__prev = writablePrevSibling.__key;\n                writablePrevSibling.__next = writableNextSibling.__key;\n            } else writablePrevSibling.__next = null;\n            writableNode.__prev = null;\n        }\n        if (nextSibling === null) {\n            if (prevSibling !== null) {\n                const writablePrevSibling = prevSibling.getWritable();\n                writableParent.__last = prevSibling.__key;\n                writablePrevSibling.__next = null;\n            } else writableParent.__last = null;\n        } else {\n            const writableNextSibling = nextSibling.getWritable();\n            if (prevSibling !== null) {\n                const writablePrevSibling = prevSibling.getWritable();\n                writablePrevSibling.__next = writableNextSibling.__key;\n                writableNextSibling.__prev = writablePrevSibling.__key;\n            } else writableNextSibling.__prev = null;\n            writableNode.__next = null;\n        }\n        writableParent.__size--;\n        writableNode.__parent = null;\n    }\n} // Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction $03df355ea183d08a$var$internalMarkNodeAsDirty(node) {\n    $03df355ea183d08a$var$errorOnInfiniteTransforms();\n    const latest = node.getLatest();\n    const parent = latest.__parent;\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const dirtyElements = editor._dirtyElements;\n    if (parent !== null) $03df355ea183d08a$var$internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n    const key = latest.__key;\n    editor._dirtyType = $03df355ea183d08a$var$HAS_DIRTY_NODES;\n    if ($03df355ea183d08a$var$$isElementNode(node)) dirtyElements.set(key, true);\n    else // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n}\nfunction $03df355ea183d08a$var$internalMarkSiblingsAsDirty(node) {\n    const previousNode = node.getPreviousSibling();\n    const nextNode = node.getNextSibling();\n    if (previousNode !== null) $03df355ea183d08a$var$internalMarkNodeAsDirty(previousNode);\n    if (nextNode !== null) $03df355ea183d08a$var$internalMarkNodeAsDirty(nextNode);\n}\nfunction $03df355ea183d08a$var$$setCompositionKey(compositionKey) {\n    $03df355ea183d08a$var$errorOnReadOnly();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const previousCompositionKey = editor._compositionKey;\n    if (compositionKey !== previousCompositionKey) {\n        editor._compositionKey = compositionKey;\n        if (previousCompositionKey !== null) {\n            const node = $03df355ea183d08a$var$$getNodeByKey(previousCompositionKey);\n            if (node !== null) node.getWritable();\n        }\n        if (compositionKey !== null) {\n            const node = $03df355ea183d08a$var$$getNodeByKey(compositionKey);\n            if (node !== null) node.getWritable();\n        }\n    }\n}\nfunction $03df355ea183d08a$var$$getCompositionKey() {\n    if ($03df355ea183d08a$var$isCurrentlyReadOnlyMode()) return null;\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    return editor._compositionKey;\n}\nfunction $03df355ea183d08a$var$$getNodeByKey(key, _editorState) {\n    const editorState = _editorState || $03df355ea183d08a$var$getActiveEditorState();\n    const node = editorState._nodeMap.get(key);\n    if (node === undefined) return null;\n    return node;\n}\nfunction $03df355ea183d08a$var$getNodeFromDOMNode(dom, editorState) {\n    const editor = $03df355ea183d08a$var$getActiveEditor(); // @ts-ignore We intentionally add this to the Node.\n    const key = dom[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) return $03df355ea183d08a$var$$getNodeByKey(key, editorState);\n    return null;\n}\nfunction $03df355ea183d08a$var$$getNearestNodeFromDOMNode(startingDOM, editorState) {\n    let dom = startingDOM;\n    while(dom != null){\n        const node = $03df355ea183d08a$var$getNodeFromDOMNode(dom, editorState);\n        if (node !== null) return node;\n        dom = $03df355ea183d08a$var$getParentElement(dom);\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$cloneDecorators(editor) {\n    const currentDecorators = editor._decorators;\n    const pendingDecorators = Object.assign({}, currentDecorators);\n    editor._pendingDecorators = pendingDecorators;\n    return pendingDecorators;\n}\nfunction $03df355ea183d08a$var$getEditorStateTextContent(editorState) {\n    return editorState.read(()=>$03df355ea183d08a$var$$getRoot().getTextContent());\n}\nfunction $03df355ea183d08a$var$markAllNodesAsDirty(editor, type) {\n    // Mark all existing text nodes as dirty\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        const editorState = $03df355ea183d08a$var$getActiveEditorState();\n        if (editorState.isEmpty()) return;\n        if (type === \"root\") {\n            $03df355ea183d08a$var$$getRoot().markDirty();\n            return;\n        }\n        const nodeMap = editorState._nodeMap;\n        for (const [, node] of nodeMap)node.markDirty();\n    }, editor._pendingEditorState === null ? {\n        tag: \"history-merge\"\n    } : undefined);\n}\nfunction $03df355ea183d08a$var$$getRoot() {\n    return $03df355ea183d08a$var$internalGetRoot($03df355ea183d08a$var$getActiveEditorState());\n}\nfunction $03df355ea183d08a$var$internalGetRoot(editorState) {\n    return editorState._nodeMap.get(\"root\");\n}\nfunction $03df355ea183d08a$var$$setSelection(selection) {\n    $03df355ea183d08a$var$errorOnReadOnly();\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    if (selection !== null) {\n        if (Object.isFrozen(selection)) throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        selection.dirty = true;\n        selection._cachedNodes = null;\n    }\n    editorState._selection = selection;\n}\nfunction $03df355ea183d08a$var$$flushMutations() {\n    $03df355ea183d08a$var$errorOnReadOnly();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    $03df355ea183d08a$var$flushRootMutations(editor);\n}\nfunction $03df355ea183d08a$var$getNodeFromDOM(dom) {\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const nodeKey = $03df355ea183d08a$var$getNodeKeyFromDOM(dom, editor);\n    if (nodeKey === null) {\n        const rootElement = editor.getRootElement();\n        if (dom === rootElement) return $03df355ea183d08a$var$$getNodeByKey(\"root\");\n        return null;\n    }\n    return $03df355ea183d08a$var$$getNodeByKey(nodeKey);\n}\nfunction $03df355ea183d08a$var$getTextNodeOffset(node, moveSelectionToEnd) {\n    return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction $03df355ea183d08a$var$getNodeKeyFromDOM(dom, editor) {\n    let node = dom;\n    while(node != null){\n        // @ts-ignore We intentionally add this to the Node.\n        const key = node[`__lexicalKey_${editor._key}`];\n        if (key !== undefined) return key;\n        node = $03df355ea183d08a$var$getParentElement(node);\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$doesContainGrapheme(str) {\n    return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction $03df355ea183d08a$var$getEditorsToPropagate(editor) {\n    const editorsToPropagate = [];\n    let currentEditor = editor;\n    while(currentEditor !== null){\n        editorsToPropagate.push(currentEditor);\n        currentEditor = currentEditor._parentEditor;\n    }\n    return editorsToPropagate;\n}\nfunction $03df355ea183d08a$var$createUID() {\n    return Math.random().toString(36).replace(/[^a-z]+/g, \"\").substr(0, 5);\n}\nfunction $03df355ea183d08a$var$getAnchorTextFromDOM(anchorNode) {\n    if (anchorNode.nodeType === $03df355ea183d08a$var$DOM_TEXT_TYPE) return anchorNode.nodeValue;\n    return null;\n}\nfunction $03df355ea183d08a$var$$updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n    // Update the text content with the latest composition text\n    const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n    if (domSelection === null) return;\n    const anchorNode = domSelection.anchorNode;\n    let { anchorOffset: anchorOffset , focusOffset: focusOffset  } = domSelection;\n    if (anchorNode !== null) {\n        let textContent = $03df355ea183d08a$var$getAnchorTextFromDOM(anchorNode);\n        const node = $03df355ea183d08a$var$$getNearestNodeFromDOMNode(anchorNode);\n        if (textContent !== null && $03df355ea183d08a$var$$isTextNode(node)) {\n            if (node.canContainTabs()) {\n                const hasTabCharacter = textContent.includes(\"\t\"); // At present, this condition is primarily used for code highlights when\n                // grouped together in lines (divs). If a code highlight includes a tab,\n                // the newly typed character may be missing from the DOM's textContent.\n                // Let's take an example. If a LinedCodeNode looked roughly like this:\n                // <code><div><codeHighlight /><codeHighlight /></div></code>,\n                // the following could occur when using tabs:\n                // a. /tconst --type--> 'd' at offset 1 --get--> /tconst\n                //    - Missing 'd'\n                // b. /tconst --type--> 'd' at offset 3 --get--> /tcondst\n                //    --type--> 'd' at offset 3 --get--> /tcondst\n                //    - Missing second 'd'\n                // In these cases, we can fix the problem by manually inserting the\n                // newly typed character where we know it should have been.\n                if (data && data.length > 0 && hasTabCharacter) {\n                    const selectionOffset = data.length;\n                    const insertionOffset = anchorOffset + selectionOffset - 1;\n                    const beforeInsertion = textContent.slice(0, insertionOffset);\n                    const afterInsertion = textContent.slice(insertionOffset, textContent.length);\n                    textContent = `${beforeInsertion}${data}${afterInsertion}`;\n                    anchorOffset += selectionOffset;\n                    focusOffset += selectionOffset;\n                }\n            } // Data is intentionally truthy, as we check for boolean, null and empty string.\n            if (textContent === $03df355ea183d08a$var$COMPOSITION_SUFFIX && data) {\n                const offset = data.length;\n                textContent = data;\n                anchorOffset = offset;\n                focusOffset = offset;\n            }\n            if (textContent !== null) $03df355ea183d08a$var$$updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$$updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n    let node = textNode;\n    if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n        const isComposing = node.isComposing();\n        let normalizedTextContent = textContent;\n        if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === $03df355ea183d08a$var$COMPOSITION_SUFFIX) normalizedTextContent = textContent.slice(0, -1);\n        const prevTextContent = node.getTextContent();\n        if (compositionEnd || normalizedTextContent !== prevTextContent) {\n            if (normalizedTextContent === \"\") {\n                $03df355ea183d08a$var$$setCompositionKey(null);\n                if (!$03df355ea183d08a$var$IS_SAFARI && !$03df355ea183d08a$var$IS_IOS && !$03df355ea183d08a$var$IS_APPLE_WEBKIT) {\n                    // For composition (mainly Android), we have to remove the node on a later update\n                    const editor = $03df355ea183d08a$var$getActiveEditor();\n                    setTimeout(()=>{\n                        editor.update(()=>{\n                            if (node.isAttached()) node.remove();\n                        });\n                    }, 20);\n                } else node.remove();\n                return;\n            }\n            const parent = node.getParent();\n            const prevSelection = $03df355ea183d08a$var$$getPreviousSelection();\n            const compositionKey = $03df355ea183d08a$var$$getCompositionKey();\n            const nodeKey = node.getKey();\n            if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing || // Check if character was added at the start, and we need\n            // to clear this input from occurring as that action wasn't\n            // permitted.\n            parent !== null && $03df355ea183d08a$var$$isRangeSelection(prevSelection) && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0) {\n                node.markDirty();\n                return;\n            }\n            const selection = $03df355ea183d08a$var$$getSelection();\n            if (!$03df355ea183d08a$var$$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n                node.setTextContent(normalizedTextContent);\n                return;\n            }\n            selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n            if (node.isSegmented()) {\n                const originalTextContent = node.getTextContent();\n                const replacement = $03df355ea183d08a$var$$createTextNode(originalTextContent);\n                node.replace(replacement);\n                node = replacement;\n            }\n            node.setTextContent(normalizedTextContent);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$$previousSiblingDoesNotAcceptText(node) {\n    const previousSibling = node.getPreviousSibling();\n    return ($03df355ea183d08a$var$$isTextNode(previousSibling) || $03df355ea183d08a$var$$isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n} // This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $03df355ea183d08a$var$$shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n    if (node.isSegmented()) return true;\n    if (!selection.isCollapsed()) return false;\n    const offset = selection.anchor.offset;\n    const parent = node.getParentOrThrow();\n    const isToken = node.isToken();\n    if (offset === 0) return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $03df355ea183d08a$var$$previousSiblingDoesNotAcceptText(node);\n    else if (offset === node.getTextContentSize()) return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n    else return false;\n}\nfunction $03df355ea183d08a$var$isTab(keyCode, altKey, ctrlKey, metaKey) {\n    return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction $03df355ea183d08a$var$isBold(keyCode, altKey, metaKey, ctrlKey) {\n    return keyCode === 66 && !altKey && $03df355ea183d08a$var$controlOrMeta(metaKey, ctrlKey);\n}\nfunction $03df355ea183d08a$var$isItalic(keyCode, altKey, metaKey, ctrlKey) {\n    return keyCode === 73 && !altKey && $03df355ea183d08a$var$controlOrMeta(metaKey, ctrlKey);\n}\nfunction $03df355ea183d08a$var$isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n    return keyCode === 85 && !altKey && $03df355ea183d08a$var$controlOrMeta(metaKey, ctrlKey);\n}\nfunction $03df355ea183d08a$var$isParagraph(keyCode, shiftKey) {\n    return $03df355ea183d08a$var$isReturn(keyCode) && !shiftKey;\n}\nfunction $03df355ea183d08a$var$isLineBreak(keyCode, shiftKey) {\n    return $03df355ea183d08a$var$isReturn(keyCode) && shiftKey;\n} // Inserts a new line after the selection\nfunction $03df355ea183d08a$var$isOpenLineBreak(keyCode, ctrlKey) {\n    // 79 = KeyO\n    return $03df355ea183d08a$var$IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction $03df355ea183d08a$var$isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n    return $03df355ea183d08a$var$isBackspace(keyCode) && ($03df355ea183d08a$var$IS_APPLE ? altKey : ctrlKey);\n}\nfunction $03df355ea183d08a$var$isDeleteWordForward(keyCode, altKey, ctrlKey) {\n    return $03df355ea183d08a$var$isDelete(keyCode) && ($03df355ea183d08a$var$IS_APPLE ? altKey : ctrlKey);\n}\nfunction $03df355ea183d08a$var$isDeleteLineBackward(keyCode, metaKey) {\n    return $03df355ea183d08a$var$IS_APPLE && metaKey && $03df355ea183d08a$var$isBackspace(keyCode);\n}\nfunction $03df355ea183d08a$var$isDeleteLineForward(keyCode, metaKey) {\n    return $03df355ea183d08a$var$IS_APPLE && metaKey && $03df355ea183d08a$var$isDelete(keyCode);\n}\nfunction $03df355ea183d08a$var$isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n    if ($03df355ea183d08a$var$IS_APPLE) {\n        if (altKey || metaKey) return false;\n        return $03df355ea183d08a$var$isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n    }\n    if (ctrlKey || altKey || metaKey) return false;\n    return $03df355ea183d08a$var$isBackspace(keyCode);\n}\nfunction $03df355ea183d08a$var$isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n    if ($03df355ea183d08a$var$IS_APPLE) {\n        if (shiftKey || altKey || metaKey) return false;\n        return $03df355ea183d08a$var$isDelete(keyCode) || keyCode === 68 && ctrlKey;\n    }\n    if (ctrlKey || altKey || metaKey) return false;\n    return $03df355ea183d08a$var$isDelete(keyCode);\n}\nfunction $03df355ea183d08a$var$isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n    return keyCode === 90 && !shiftKey && $03df355ea183d08a$var$controlOrMeta(metaKey, ctrlKey);\n}\nfunction $03df355ea183d08a$var$isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n    if ($03df355ea183d08a$var$IS_APPLE) return keyCode === 90 && metaKey && shiftKey;\n    return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction $03df355ea183d08a$var$isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n    if (shiftKey) return false;\n    if (keyCode === 67) return $03df355ea183d08a$var$IS_APPLE ? metaKey : ctrlKey;\n    return false;\n}\nfunction $03df355ea183d08a$var$isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n    if (shiftKey) return false;\n    if (keyCode === 88) return $03df355ea183d08a$var$IS_APPLE ? metaKey : ctrlKey;\n    return false;\n}\nfunction $03df355ea183d08a$var$isArrowLeft(keyCode) {\n    return keyCode === 37;\n}\nfunction $03df355ea183d08a$var$isArrowRight(keyCode) {\n    return keyCode === 39;\n}\nfunction $03df355ea183d08a$var$isArrowUp(keyCode) {\n    return keyCode === 38;\n}\nfunction $03df355ea183d08a$var$isArrowDown(keyCode) {\n    return keyCode === 40;\n}\nfunction $03df355ea183d08a$var$isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction $03df355ea183d08a$var$isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction $03df355ea183d08a$var$isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction $03df355ea183d08a$var$isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction $03df355ea183d08a$var$isMoveUp(keyCode, ctrlKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction $03df355ea183d08a$var$isMoveDown(keyCode, ctrlKey, metaKey) {\n    return $03df355ea183d08a$var$isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction $03df355ea183d08a$var$isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n    return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction $03df355ea183d08a$var$isSpace(keyCode) {\n    return keyCode === 32;\n}\nfunction $03df355ea183d08a$var$controlOrMeta(metaKey, ctrlKey) {\n    if ($03df355ea183d08a$var$IS_APPLE) return metaKey;\n    return ctrlKey;\n}\nfunction $03df355ea183d08a$var$isReturn(keyCode) {\n    return keyCode === 13;\n}\nfunction $03df355ea183d08a$var$isBackspace(keyCode) {\n    return keyCode === 8;\n}\nfunction $03df355ea183d08a$var$isEscape(keyCode) {\n    return keyCode === 27;\n}\nfunction $03df355ea183d08a$var$isDelete(keyCode) {\n    return keyCode === 46;\n}\nfunction $03df355ea183d08a$var$getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n    const classNames = classNamesTheme[classNameThemeType]; // As we're using classList, we need\n    // to handle className tokens that have spaces.\n    // The easiest way to do this to convert the\n    // className tokens to an array that can be\n    // applied to classList.add()/remove().\n    if (typeof classNames === \"string\") {\n        const classNamesArr = classNames.split(\" \");\n        classNamesTheme[classNameThemeType] = classNamesArr;\n        return classNamesArr;\n    }\n    return classNames;\n}\nfunction $03df355ea183d08a$var$setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n    if (mutationListeners.size === 0) return;\n    const nodeType = node.__type;\n    const nodeKey = node.__key;\n    const registeredNode = registeredNodes.get(nodeType);\n    if (registeredNode === undefined) throw Error(`Type ${nodeType} not in registeredNodes`);\n    const klass = registeredNode.klass;\n    let mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType === undefined) {\n        mutatedNodesByType = new Map();\n        mutatedNodes.set(klass, mutatedNodesByType);\n    }\n    const prevMutation = mutatedNodesByType.get(nodeKey); // If the node has already been \"destroyed\", yet we are\n    // re-making it, then this means a move likely happened.\n    // We should change the mutation to be that of \"updated\"\n    // instead.\n    const isMove = prevMutation === \"destroyed\" && mutation === \"created\";\n    if (prevMutation === undefined || isMove) mutatedNodesByType.set(nodeKey, isMove ? \"updated\" : mutation);\n}\nfunction $03df355ea183d08a$var$$nodesOfType(klass) {\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    const readOnly = editorState._readOnly;\n    const klassType = klass.getType();\n    const nodes = editorState._nodeMap;\n    const nodesOfType = [];\n    for (const [, node] of nodes)if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) nodesOfType.push(node);\n    return nodesOfType;\n}\nfunction $03df355ea183d08a$var$resolveElement(element, isBackward, focusOffset) {\n    const parent = element.getParent();\n    let offset = focusOffset;\n    let block = element;\n    if (parent !== null) {\n        if (isBackward && focusOffset === 0) {\n            offset = block.getIndexWithinParent();\n            block = parent;\n        } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n            offset = block.getIndexWithinParent() + 1;\n            block = parent;\n        }\n    }\n    return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $03df355ea183d08a$var$$getAdjacentNode(focus, isBackward) {\n    const focusOffset = focus.offset;\n    if (focus.type === \"element\") {\n        const block = focus.getNode();\n        return $03df355ea183d08a$var$resolveElement(block, isBackward, focusOffset);\n    } else {\n        const focusNode = focus.getNode();\n        if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n            const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n            if (possibleNode === null) return $03df355ea183d08a$var$resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n            return possibleNode;\n        }\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$isFirefoxClipboardEvents(editor) {\n    const event = $03df355ea183d08a$var$getWindow(editor).event;\n    const inputType = event && event.inputType;\n    return inputType === \"insertFromPaste\" || inputType === \"insertFromPasteAsQuotation\";\n}\nfunction $03df355ea183d08a$var$dispatchCommand(editor, command, payload) {\n    return $03df355ea183d08a$var$triggerCommandListeners(editor, command, payload);\n}\nfunction $03df355ea183d08a$var$$textContentRequiresDoubleLinebreakAtEnd(node) {\n    return !$03df355ea183d08a$var$$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction $03df355ea183d08a$var$getElementByKeyOrThrow(editor, key) {\n    const element = editor._keyToDOMMap.get(key);\n    if (element === undefined) throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    return element;\n}\nfunction $03df355ea183d08a$var$getParentElement(node) {\n    const parentElement = node.assignedSlot || node.parentElement;\n    return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction $03df355ea183d08a$var$scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n    const doc = rootElement.ownerDocument;\n    const defaultView = doc.defaultView;\n    if (defaultView === null) return;\n    let { top: currentTop , bottom: currentBottom  } = selectionRect;\n    let targetTop = 0;\n    let targetBottom = 0;\n    let element = rootElement;\n    while(element !== null){\n        const isBodyElement = element === doc.body;\n        if (isBodyElement) {\n            targetTop = 0;\n            targetBottom = $03df355ea183d08a$var$getWindow(editor).innerHeight;\n        } else {\n            const targetRect = element.getBoundingClientRect();\n            targetTop = targetRect.top;\n            targetBottom = targetRect.bottom;\n        }\n        let diff = 0;\n        if (currentTop < targetTop) diff = -(targetTop - currentTop);\n        else if (currentBottom > targetBottom) diff = currentBottom - targetBottom;\n        if (diff !== 0) {\n            if (isBodyElement) // Only handles scrolling of Y axis\n            defaultView.scrollBy(0, diff);\n            else {\n                const scrollTop = element.scrollTop;\n                element.scrollTop += diff;\n                const yOffset = element.scrollTop - scrollTop;\n                currentTop -= yOffset;\n                currentBottom -= yOffset;\n            }\n        }\n        if (isBodyElement) break;\n        element = $03df355ea183d08a$var$getParentElement(element);\n    }\n}\nfunction $03df355ea183d08a$var$$addUpdateTag(tag) {\n    $03df355ea183d08a$var$errorOnReadOnly();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    editor._updateTags.add(tag);\n}\nfunction $03df355ea183d08a$var$$maybeMoveChildrenSelectionToParent(parentNode, offset = 0) {\n    if (offset !== 0) throw Error(`TODO`);\n    const selection = $03df355ea183d08a$var$$getSelection();\n    if (!$03df355ea183d08a$var$$isRangeSelection(selection) || !$03df355ea183d08a$var$$isElementNode(parentNode)) return selection;\n    const { anchor: anchor , focus: focus  } = selection;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if ($03df355ea183d08a$var$$hasAncestor(anchorNode, parentNode)) anchor.set(parentNode.__key, 0, \"element\");\n    if ($03df355ea183d08a$var$$hasAncestor(focusNode, parentNode)) focus.set(parentNode.__key, 0, \"element\");\n    return selection;\n}\nfunction $03df355ea183d08a$var$$hasAncestor(child, targetNode) {\n    let parent = child.getParent();\n    while(parent !== null){\n        if (parent.is(targetNode)) return true;\n        parent = parent.getParent();\n    }\n    return false;\n}\nfunction $03df355ea183d08a$var$getDefaultView(domElem) {\n    const ownerDoc = domElem.ownerDocument;\n    return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction $03df355ea183d08a$var$getWindow(editor) {\n    const windowObj = editor._window;\n    if (windowObj === null) throw Error(`window object not found`);\n    return windowObj;\n}\nfunction $03df355ea183d08a$var$$isInlineElementOrDecoratorNode(node) {\n    return $03df355ea183d08a$var$$isElementNode(node) && node.isInline() || $03df355ea183d08a$var$$isDecoratorNode(node) && node.isInline();\n}\nfunction $03df355ea183d08a$var$$getNearestRootOrShadowRoot(node) {\n    let parent = node.getParentOrThrow();\n    while(parent !== null){\n        if ($03df355ea183d08a$var$$isRootOrShadowRoot(parent)) return parent;\n        parent = parent.getParentOrThrow();\n    }\n    return parent;\n}\nfunction $03df355ea183d08a$var$$isRootOrShadowRoot(node) {\n    return $03df355ea183d08a$var$$isRootNode(node) || $03df355ea183d08a$var$$isElementNode(node) && node.isShadowRoot();\n}\nfunction $03df355ea183d08a$var$$copyNode(node) {\n    // @ts-ignore\n    const copy = node.constructor.clone(node);\n    $03df355ea183d08a$var$$setNodeKey(copy, null);\n    return copy;\n}\nfunction $03df355ea183d08a$var$$applyNodeReplacement(node) {\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const nodeType = node.constructor.getType();\n    const registeredNode = editor._nodes.get(nodeType);\n    if (registeredNode === undefined) throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    const replaceFunc = registeredNode.replace;\n    if (replaceFunc !== null) {\n        const replacementNode = replaceFunc(node);\n        if (!(replacementNode instanceof node.constructor)) throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n        return replacementNode;\n    }\n    return node;\n}\nfunction $03df355ea183d08a$var$errorOnInsertTextNodeOnRoot(node, insertNode) {\n    const parentNode = node.getParent();\n    if ($03df355ea183d08a$var$$isRootNode(parentNode) && !$03df355ea183d08a$var$$isElementNode(insertNode) && !$03df355ea183d08a$var$$isDecoratorNode(insertNode)) throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n}\nfunction $03df355ea183d08a$var$createBlockCursorElement(editorConfig) {\n    const theme = editorConfig.theme;\n    const element = document.createElement(\"div\");\n    element.contentEditable = \"false\";\n    element.setAttribute(\"data-lexical-cursor\", \"true\");\n    let blockCursorTheme = theme.blockCursor;\n    if (blockCursorTheme !== undefined) {\n        if (typeof blockCursorTheme === \"string\") {\n            const classNamesArr = blockCursorTheme.split(\" \"); // @ts-expect-error: intentional\n            blockCursorTheme = theme.blockCursor = classNamesArr;\n        }\n        if (blockCursorTheme !== undefined) element.classList.add(...blockCursorTheme);\n    }\n    return element;\n}\nfunction $03df355ea183d08a$var$needsBlockCursor(node) {\n    return ($03df355ea183d08a$var$$isDecoratorNode(node) || $03df355ea183d08a$var$$isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction $03df355ea183d08a$var$removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n    rootElement.style.removeProperty(\"caret-color\");\n    editor._blockCursorElement = null;\n    const parentElement = blockCursorElement.parentElement;\n    if (parentElement !== null) parentElement.removeChild(blockCursorElement);\n}\nfunction $03df355ea183d08a$var$updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n    let blockCursorElement = editor._blockCursorElement;\n    if ($03df355ea183d08a$var$$isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === \"element\" && rootElement.contains(document.activeElement)) {\n        const anchor = nextSelection.anchor;\n        const elementNode = anchor.getNode();\n        const offset = anchor.offset;\n        const elementNodeSize = elementNode.getChildrenSize();\n        let isBlockCursor = false;\n        let insertBeforeElement = null;\n        if (offset === elementNodeSize) {\n            const child = elementNode.getChildAtIndex(offset - 1);\n            if ($03df355ea183d08a$var$needsBlockCursor(child)) isBlockCursor = true;\n        } else {\n            const child = elementNode.getChildAtIndex(offset);\n            if ($03df355ea183d08a$var$needsBlockCursor(child)) {\n                const sibling = child.getPreviousSibling();\n                if (sibling === null || $03df355ea183d08a$var$needsBlockCursor(sibling)) {\n                    isBlockCursor = true;\n                    insertBeforeElement = editor.getElementByKey(child.__key);\n                }\n            }\n        }\n        if (isBlockCursor) {\n            const elementDOM = editor.getElementByKey(elementNode.__key);\n            if (blockCursorElement === null) editor._blockCursorElement = blockCursorElement = $03df355ea183d08a$var$createBlockCursorElement(editor._config);\n            rootElement.style.caretColor = \"transparent\";\n            if (insertBeforeElement === null) elementDOM.appendChild(blockCursorElement);\n            else elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n            return;\n        }\n    } // Remove cursor\n    if (blockCursorElement !== null) $03df355ea183d08a$var$removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n}\nfunction $03df355ea183d08a$var$getDOMSelection(targetWindow) {\n    return !$03df355ea183d08a$var$CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $03df355ea183d08a$var$$splitNode(node, offset) {\n    let startNode = node.getChildAtIndex(offset);\n    if (startNode == null) startNode = node;\n    if (!!$03df355ea183d08a$var$$isRootOrShadowRoot(node)) throw Error(`Can not call $splitNode() on root element`);\n    const recurse = (currentNode)=>{\n        const parent = currentNode.getParentOrThrow();\n        const isParentRoot = $03df355ea183d08a$var$$isRootOrShadowRoot(parent); // The node we start split from (leaf) is moved, but its recursive\n        // parents are copied to create separate tree\n        const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $03df355ea183d08a$var$$copyNode(currentNode);\n        if (isParentRoot) {\n            currentNode.insertAfter(nodeToMove);\n            return [\n                currentNode,\n                nodeToMove,\n                nodeToMove\n            ];\n        } else {\n            const [leftTree, rightTree, newParent] = recurse(parent);\n            const nextSiblings = currentNode.getNextSiblings();\n            newParent.append(nodeToMove, ...nextSiblings);\n            return [\n                leftTree,\n                rightTree,\n                nodeToMove\n            ];\n        }\n    };\n    const [leftTree, rightTree] = recurse(startNode);\n    return [\n        leftTree,\n        rightTree\n    ];\n}\nfunction $03df355ea183d08a$var$$findMatchingParent(startingNode, findFn) {\n    let curr = startingNode;\n    while(curr !== $03df355ea183d08a$var$$getRoot() && curr != null){\n        if (findFn(curr)) return curr;\n        curr = curr.getParent();\n    }\n    return null;\n}\nfunction $03df355ea183d08a$var$$getChildrenRecursively(node) {\n    const nodes = [];\n    const stack = [\n        node\n    ];\n    while(stack.length > 0){\n        const currentNode = stack.pop();\n        if (!(currentNode !== undefined)) throw Error(`Stack.length > 0; can't be undefined`);\n        if ($03df355ea183d08a$var$$isElementNode(currentNode)) stack.unshift(...currentNode.getChildren());\n        if (currentNode !== node) nodes.push(currentNode);\n    }\n    return nodes;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$$garbageCollectDetachedDecorators(editor, pendingEditorState) {\n    const currentDecorators = editor._decorators;\n    const pendingDecorators = editor._pendingDecorators;\n    let decorators = pendingDecorators || currentDecorators;\n    const nodeMap = pendingEditorState._nodeMap;\n    let key;\n    for(key in decorators)if (!nodeMap.has(key)) {\n        if (decorators === currentDecorators) decorators = $03df355ea183d08a$var$cloneDecorators(editor);\n        delete decorators[key];\n    }\n}\nfunction $03df355ea183d08a$var$$garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, dirtyNodes) {\n    let child = node.getFirstChild();\n    while(child !== null){\n        const childKey = child.__key;\n        if (child !== undefined && child.__parent === parentKey) {\n            if ($03df355ea183d08a$var$$isElementNode(child)) $03df355ea183d08a$var$$garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, dirtyNodes);\n             // If we have created a node and it was dereferenced, then also\n            // remove it from out dirty nodes Set.\n            if (!prevNodeMap.has(childKey)) dirtyNodes.delete(childKey);\n            nodeMap.delete(childKey);\n        }\n        child = child.isAttached() ? child.getNextSibling() : null;\n    }\n}\nfunction $03df355ea183d08a$var$$garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n    const prevNodeMap = prevEditorState._nodeMap;\n    const nodeMap = editorState._nodeMap;\n    for (const nodeKey of dirtyLeaves){\n        const node = nodeMap.get(nodeKey);\n        if (node !== undefined && !node.isAttached()) {\n            if (!prevNodeMap.has(nodeKey)) dirtyLeaves.delete(nodeKey);\n            nodeMap.delete(nodeKey);\n        }\n    }\n    for (const [nodeKey] of dirtyElements){\n        const node = nodeMap.get(nodeKey);\n        if (node !== undefined) // Garbage collect node and its children if they exist\n        {\n            if (!node.isAttached()) {\n                if ($03df355ea183d08a$var$$isElementNode(node)) $03df355ea183d08a$var$$garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, dirtyElements);\n                 // If we have created a node and it was dereferenced, then also\n                // remove it from out dirty nodes Set.\n                if (!prevNodeMap.has(nodeKey)) dirtyElements.delete(nodeKey);\n                nodeMap.delete(nodeKey);\n            }\n        }\n    }\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$$canSimpleTextNodesBeMerged(node1, node2) {\n    const node1Mode = node1.__mode;\n    const node1Format = node1.__format;\n    const node1Style = node1.__style;\n    const node2Mode = node2.__mode;\n    const node2Format = node2.__format;\n    const node2Style = node2.__style;\n    return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $03df355ea183d08a$var$$mergeTextNodes(node1, node2) {\n    const writableNode1 = node1.mergeWithSibling(node2);\n    const normalizedNodes = $03df355ea183d08a$var$getActiveEditor()._normalizedNodes;\n    normalizedNodes.add(node1.__key);\n    normalizedNodes.add(node2.__key);\n    return writableNode1;\n}\nfunction $03df355ea183d08a$var$$normalizeTextNode(textNode) {\n    let node = textNode;\n    if (node.__text === \"\" && node.isSimpleText() && !node.isUnmergeable()) {\n        node.remove();\n        return;\n    } // Backward\n    let previousNode;\n    while((previousNode = node.getPreviousSibling()) !== null && $03df355ea183d08a$var$$isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()){\n        if (previousNode.__text === \"\") previousNode.remove();\n        else if ($03df355ea183d08a$var$$canSimpleTextNodesBeMerged(previousNode, node)) {\n            node = $03df355ea183d08a$var$$mergeTextNodes(previousNode, node);\n            break;\n        } else break;\n    } // Forward\n    let nextNode;\n    while((nextNode = node.getNextSibling()) !== null && $03df355ea183d08a$var$$isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()){\n        if (nextNode.__text === \"\") nextNode.remove();\n        else if ($03df355ea183d08a$var$$canSimpleTextNodesBeMerged(node, nextNode)) {\n            node = $03df355ea183d08a$var$$mergeTextNodes(node, nextNode);\n            break;\n        } else break;\n    }\n}\nfunction $03df355ea183d08a$var$$normalizeSelection(selection) {\n    $03df355ea183d08a$var$$normalizePoint(selection.anchor);\n    $03df355ea183d08a$var$$normalizePoint(selection.focus);\n    return selection;\n}\nfunction $03df355ea183d08a$var$$normalizePoint(point) {\n    while(point.type === \"element\"){\n        const node = point.getNode();\n        const offset = point.offset;\n        let nextNode;\n        let nextOffsetAtEnd;\n        if (offset === node.getChildrenSize()) {\n            nextNode = node.getChildAtIndex(offset - 1);\n            nextOffsetAtEnd = true;\n        } else {\n            nextNode = node.getChildAtIndex(offset);\n            nextOffsetAtEnd = false;\n        }\n        if ($03df355ea183d08a$var$$isTextNode(nextNode)) {\n            point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, \"text\");\n            break;\n        } else if (!$03df355ea183d08a$var$$isElementNode(nextNode)) break;\n        point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, \"element\");\n    }\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ let $03df355ea183d08a$var$subTreeTextContent = \"\";\nlet $03df355ea183d08a$var$subTreeDirectionedTextContent = \"\";\nlet $03df355ea183d08a$var$editorTextContent = \"\";\nlet $03df355ea183d08a$var$activeEditorConfig;\nlet $03df355ea183d08a$var$activeEditor$1;\nlet $03df355ea183d08a$var$activeEditorNodes;\nlet $03df355ea183d08a$var$treatAllNodesAsDirty = false;\nlet $03df355ea183d08a$var$activeEditorStateReadOnly = false;\nlet $03df355ea183d08a$var$activeMutationListeners;\nlet $03df355ea183d08a$var$activeTextDirection = null;\nlet $03df355ea183d08a$var$activeDirtyElements;\nlet $03df355ea183d08a$var$activeDirtyLeaves;\nlet $03df355ea183d08a$var$activePrevNodeMap;\nlet $03df355ea183d08a$var$activeNextNodeMap;\nlet $03df355ea183d08a$var$activePrevKeyToDOMMap;\nlet $03df355ea183d08a$var$mutatedNodes;\nfunction $03df355ea183d08a$var$destroyNode(key, parentDOM) {\n    const node = $03df355ea183d08a$var$activePrevNodeMap.get(key);\n    if (parentDOM !== null) {\n        const dom = $03df355ea183d08a$var$getPrevElementByKeyOrThrow(key);\n        if (dom.parentNode === parentDOM) parentDOM.removeChild(dom);\n    } // This logic is really important, otherwise we will leak DOM nodes\n    // when their corresponding LexicalNodes are removed from the editor state.\n    if (!$03df355ea183d08a$var$activeNextNodeMap.has(key)) $03df355ea183d08a$var$activeEditor$1._keyToDOMMap.delete(key);\n    if ($03df355ea183d08a$var$$isElementNode(node)) {\n        const children = $03df355ea183d08a$var$createChildrenArray(node, $03df355ea183d08a$var$activePrevNodeMap);\n        $03df355ea183d08a$var$destroyChildren(children, 0, children.length - 1, null);\n    }\n    if (node !== undefined) $03df355ea183d08a$var$setMutatedNode($03df355ea183d08a$var$mutatedNodes, $03df355ea183d08a$var$activeEditorNodes, $03df355ea183d08a$var$activeMutationListeners, node, \"destroyed\");\n}\nfunction $03df355ea183d08a$var$destroyChildren(children, _startIndex, endIndex, dom) {\n    let startIndex = _startIndex;\n    for(; startIndex <= endIndex; ++startIndex){\n        const child = children[startIndex];\n        if (child !== undefined) $03df355ea183d08a$var$destroyNode(child, dom);\n    }\n}\nfunction $03df355ea183d08a$var$setTextAlign(domStyle, value) {\n    domStyle.setProperty(\"text-align\", value);\n}\nconst $03df355ea183d08a$var$DEFAULT_INDENT_VALUE = \"20px\";\nfunction $03df355ea183d08a$var$setElementIndent(dom, indent) {\n    const indentClassName = $03df355ea183d08a$var$activeEditorConfig.theme.indent;\n    if (typeof indentClassName === \"string\") {\n        const elementHasClassName = dom.classList.contains(indentClassName);\n        if (indent > 0 && !elementHasClassName) dom.classList.add(indentClassName);\n        else if (indent < 1 && elementHasClassName) dom.classList.remove(indentClassName);\n    }\n    const indentationBaseValue = getComputedStyle(dom).getPropertyValue(\"--lexical-indent-base-value\") || $03df355ea183d08a$var$DEFAULT_INDENT_VALUE;\n    dom.style.setProperty(\"padding-inline-start\", indent === 0 ? \"\" : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction $03df355ea183d08a$var$setElementFormat(dom, format) {\n    const domStyle = dom.style;\n    if (format === 0) $03df355ea183d08a$var$setTextAlign(domStyle, \"\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_LEFT) $03df355ea183d08a$var$setTextAlign(domStyle, \"left\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_CENTER) $03df355ea183d08a$var$setTextAlign(domStyle, \"center\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_RIGHT) $03df355ea183d08a$var$setTextAlign(domStyle, \"right\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_JUSTIFY) $03df355ea183d08a$var$setTextAlign(domStyle, \"justify\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_START) $03df355ea183d08a$var$setTextAlign(domStyle, \"start\");\n    else if (format === $03df355ea183d08a$var$IS_ALIGN_END) $03df355ea183d08a$var$setTextAlign(domStyle, \"end\");\n}\nfunction $03df355ea183d08a$var$createNode(key, parentDOM, insertDOM) {\n    const node = $03df355ea183d08a$var$activeNextNodeMap.get(key);\n    if (node === undefined) throw Error(`createNode: node does not exist in nodeMap`);\n    const dom = node.createDOM($03df355ea183d08a$var$activeEditorConfig, $03df355ea183d08a$var$activeEditor$1);\n    $03df355ea183d08a$var$storeDOMWithKey(key, dom, $03df355ea183d08a$var$activeEditor$1); // This helps preserve the text, and stops spell check tools from\n    // merging or break the spans (which happens if they are missing\n    // this attribute).\n    if ($03df355ea183d08a$var$$isTextNode(node)) dom.setAttribute(\"data-lexical-text\", \"true\");\n    else if ($03df355ea183d08a$var$$isDecoratorNode(node)) dom.setAttribute(\"data-lexical-decorator\", \"true\");\n    if ($03df355ea183d08a$var$$isElementNode(node)) {\n        const indent = node.__indent;\n        const childrenSize = node.__size;\n        if (indent !== 0) $03df355ea183d08a$var$setElementIndent(dom, indent);\n        if (childrenSize !== 0) {\n            const endIndex = childrenSize - 1;\n            const children = $03df355ea183d08a$var$createChildrenArray(node, $03df355ea183d08a$var$activeNextNodeMap);\n            $03df355ea183d08a$var$createChildrenWithDirection(children, endIndex, node, dom);\n        }\n        const format = node.__format;\n        if (format !== 0) $03df355ea183d08a$var$setElementFormat(dom, format);\n        if (!node.isInline()) $03df355ea183d08a$var$reconcileElementTerminatingLineBreak(null, node, dom);\n        if ($03df355ea183d08a$var$$textContentRequiresDoubleLinebreakAtEnd(node)) {\n            $03df355ea183d08a$var$subTreeTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n            $03df355ea183d08a$var$editorTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n        }\n    } else {\n        const text = node.getTextContent();\n        if ($03df355ea183d08a$var$$isDecoratorNode(node)) {\n            const decorator = node.decorate($03df355ea183d08a$var$activeEditor$1, $03df355ea183d08a$var$activeEditorConfig);\n            if (decorator !== null) $03df355ea183d08a$var$reconcileDecorator(key, decorator);\n             // Decorators are always non editable\n            dom.contentEditable = \"false\";\n        } else if ($03df355ea183d08a$var$$isTextNode(node)) {\n            if (!node.isDirectionless()) $03df355ea183d08a$var$subTreeDirectionedTextContent += text;\n        }\n        $03df355ea183d08a$var$subTreeTextContent += text;\n        $03df355ea183d08a$var$editorTextContent += text;\n    }\n    if (parentDOM !== null) {\n        if (insertDOM != null) parentDOM.insertBefore(dom, insertDOM);\n        else {\n            // @ts-expect-error: internal field\n            const possibleLineBreak = parentDOM.__lexicalLineBreak;\n            if (possibleLineBreak != null) parentDOM.insertBefore(dom, possibleLineBreak);\n            else parentDOM.appendChild(dom);\n        }\n    }\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n    $03df355ea183d08a$var$setMutatedNode($03df355ea183d08a$var$mutatedNodes, $03df355ea183d08a$var$activeEditorNodes, $03df355ea183d08a$var$activeMutationListeners, node, \"created\");\n    return dom;\n}\nfunction $03df355ea183d08a$var$createChildrenWithDirection(children, endIndex, element, dom) {\n    const previousSubTreeDirectionedTextContent = $03df355ea183d08a$var$subTreeDirectionedTextContent;\n    $03df355ea183d08a$var$subTreeDirectionedTextContent = \"\";\n    $03df355ea183d08a$var$createChildren(children, element, 0, endIndex, dom, null);\n    $03df355ea183d08a$var$reconcileBlockDirection(element, dom);\n    $03df355ea183d08a$var$subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $03df355ea183d08a$var$createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n    const previousSubTreeTextContent = $03df355ea183d08a$var$subTreeTextContent;\n    $03df355ea183d08a$var$subTreeTextContent = \"\";\n    let startIndex = _startIndex;\n    for(; startIndex <= endIndex; ++startIndex)$03df355ea183d08a$var$createNode(children[startIndex], dom, insertDOM);\n    if ($03df355ea183d08a$var$$textContentRequiresDoubleLinebreakAtEnd(element)) $03df355ea183d08a$var$subTreeTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n     // @ts-expect-error: internal field\n    dom.__lexicalTextContent = $03df355ea183d08a$var$subTreeTextContent;\n    $03df355ea183d08a$var$subTreeTextContent = previousSubTreeTextContent + $03df355ea183d08a$var$subTreeTextContent;\n}\nfunction $03df355ea183d08a$var$isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n    const node = nodeMap.get(childKey);\n    return $03df355ea183d08a$var$$isLineBreakNode(node) || $03df355ea183d08a$var$$isDecoratorNode(node) && node.isInline();\n} // If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction $03df355ea183d08a$var$reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n    const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || $03df355ea183d08a$var$isLastChildLineBreakOrDecorator(prevElement.__last, $03df355ea183d08a$var$activePrevNodeMap));\n    const nextLineBreak = nextElement.__size === 0 || $03df355ea183d08a$var$isLastChildLineBreakOrDecorator(nextElement.__last, $03df355ea183d08a$var$activeNextNodeMap);\n    if (prevLineBreak) {\n        if (!nextLineBreak) {\n            // @ts-expect-error: internal field\n            const element = dom.__lexicalLineBreak;\n            if (element != null) dom.removeChild(element);\n             // @ts-expect-error: internal field\n            dom.__lexicalLineBreak = null;\n        }\n    } else if (nextLineBreak) {\n        const element = document.createElement(\"br\"); // @ts-expect-error: internal field\n        dom.__lexicalLineBreak = element;\n        dom.appendChild(element);\n    }\n}\nfunction $03df355ea183d08a$var$reconcileBlockDirection(element, dom) {\n    const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent; // @ts-expect-error: internal field\n    const previousDirection = dom.__lexicalDir;\n    if (previousSubTreeDirectionTextContent !== $03df355ea183d08a$var$subTreeDirectionedTextContent || previousDirection !== $03df355ea183d08a$var$activeTextDirection) {\n        const hasEmptyDirectionedTextContent = $03df355ea183d08a$var$subTreeDirectionedTextContent === \"\";\n        const direction = hasEmptyDirectionedTextContent ? $03df355ea183d08a$var$activeTextDirection : $03df355ea183d08a$var$getTextDirection($03df355ea183d08a$var$subTreeDirectionedTextContent);\n        if (direction !== previousDirection) {\n            const classList = dom.classList;\n            const theme = $03df355ea183d08a$var$activeEditorConfig.theme;\n            let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n            let nextDirectionTheme = direction !== null ? theme[direction] : undefined; // Remove the old theme classes if they exist\n            if (previousDirectionTheme !== undefined) {\n                if (typeof previousDirectionTheme === \"string\") {\n                    const classNamesArr = previousDirectionTheme.split(\" \");\n                    previousDirectionTheme = theme[previousDirection] = classNamesArr;\n                } // @ts-ignore: intentional\n                classList.remove(...previousDirectionTheme);\n            }\n            if (direction === null || hasEmptyDirectionedTextContent && direction === \"ltr\") // Remove direction\n            dom.removeAttribute(\"dir\");\n            else {\n                // Apply the new theme classes if they exist\n                if (nextDirectionTheme !== undefined) {\n                    if (typeof nextDirectionTheme === \"string\") {\n                        const classNamesArr = nextDirectionTheme.split(\" \"); // @ts-expect-error: intentional\n                        nextDirectionTheme = theme[direction] = classNamesArr;\n                    }\n                    if (nextDirectionTheme !== undefined) classList.add(...nextDirectionTheme);\n                } // Update direction\n                dom.dir = direction;\n            }\n            if (!$03df355ea183d08a$var$activeEditorStateReadOnly) {\n                const writableNode = element.getWritable();\n                writableNode.__dir = direction;\n            }\n        }\n        $03df355ea183d08a$var$activeTextDirection = direction; // @ts-expect-error: internal field\n        dom.__lexicalDirTextContent = $03df355ea183d08a$var$subTreeDirectionedTextContent; // @ts-expect-error: internal field\n        dom.__lexicalDir = direction;\n    }\n}\nfunction $03df355ea183d08a$var$reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n    const previousSubTreeDirectionTextContent = $03df355ea183d08a$var$subTreeDirectionedTextContent;\n    $03df355ea183d08a$var$subTreeDirectionedTextContent = \"\";\n    $03df355ea183d08a$var$reconcileChildren(prevElement, nextElement, dom);\n    $03df355ea183d08a$var$reconcileBlockDirection(nextElement, dom);\n    $03df355ea183d08a$var$subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction $03df355ea183d08a$var$createChildrenArray(element, nodeMap) {\n    const children = [];\n    let nodeKey = element.__first;\n    while(nodeKey !== null){\n        const node = nodeMap.get(nodeKey);\n        if (node === undefined) throw Error(`createChildrenArray: node does not exist in nodeMap`);\n        children.push(nodeKey);\n        nodeKey = node.__next;\n    }\n    return children;\n}\nfunction $03df355ea183d08a$var$reconcileChildren(prevElement, nextElement, dom) {\n    const previousSubTreeTextContent = $03df355ea183d08a$var$subTreeTextContent;\n    const prevChildrenSize = prevElement.__size;\n    const nextChildrenSize = nextElement.__size;\n    $03df355ea183d08a$var$subTreeTextContent = \"\";\n    if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n        const prevFirstChildKey = prevElement.__first;\n        const nextFrstChildKey = nextElement.__first;\n        if (prevFirstChildKey === nextFrstChildKey) $03df355ea183d08a$var$reconcileNode(prevFirstChildKey, dom);\n        else {\n            const lastDOM = $03df355ea183d08a$var$getPrevElementByKeyOrThrow(prevFirstChildKey);\n            const replacementDOM = $03df355ea183d08a$var$createNode(nextFrstChildKey, null, null);\n            dom.replaceChild(replacementDOM, lastDOM);\n            $03df355ea183d08a$var$destroyNode(prevFirstChildKey, null);\n        }\n    } else {\n        const prevChildren = $03df355ea183d08a$var$createChildrenArray(prevElement, $03df355ea183d08a$var$activePrevNodeMap);\n        const nextChildren = $03df355ea183d08a$var$createChildrenArray(nextElement, $03df355ea183d08a$var$activeNextNodeMap);\n        if (prevChildrenSize === 0) {\n            if (nextChildrenSize !== 0) $03df355ea183d08a$var$createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n        } else if (nextChildrenSize === 0) {\n            if (prevChildrenSize !== 0) {\n                // @ts-expect-error: internal field\n                const lexicalLineBreak = dom.__lexicalLineBreak;\n                const canUseFastPath = lexicalLineBreak == null;\n                $03df355ea183d08a$var$destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n                if (canUseFastPath) // Fast path for removing DOM nodes\n                dom.textContent = \"\";\n            }\n        } else $03df355ea183d08a$var$reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n    if ($03df355ea183d08a$var$$textContentRequiresDoubleLinebreakAtEnd(nextElement)) $03df355ea183d08a$var$subTreeTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n     // @ts-expect-error: internal field\n    dom.__lexicalTextContent = $03df355ea183d08a$var$subTreeTextContent;\n    $03df355ea183d08a$var$subTreeTextContent = previousSubTreeTextContent + $03df355ea183d08a$var$subTreeTextContent;\n}\nfunction $03df355ea183d08a$var$reconcileNode(key, parentDOM) {\n    const prevNode = $03df355ea183d08a$var$activePrevNodeMap.get(key);\n    let nextNode = $03df355ea183d08a$var$activeNextNodeMap.get(key);\n    if (prevNode === undefined || nextNode === undefined) throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    const isDirty = $03df355ea183d08a$var$treatAllNodesAsDirty || $03df355ea183d08a$var$activeDirtyLeaves.has(key) || $03df355ea183d08a$var$activeDirtyElements.has(key);\n    const dom = $03df355ea183d08a$var$getElementByKeyOrThrow($03df355ea183d08a$var$activeEditor$1, key); // If the node key points to the same instance in both states\n    // and isn't dirty, we just update the text content cache\n    // and return the existing DOM Node.\n    if (prevNode === nextNode && !isDirty) {\n        if ($03df355ea183d08a$var$$isElementNode(prevNode)) {\n            // @ts-expect-error: internal field\n            const previousSubTreeTextContent = dom.__lexicalTextContent;\n            if (previousSubTreeTextContent !== undefined) {\n                $03df355ea183d08a$var$subTreeTextContent += previousSubTreeTextContent;\n                $03df355ea183d08a$var$editorTextContent += previousSubTreeTextContent;\n            } // @ts-expect-error: internal field\n            const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n            if (previousSubTreeDirectionTextContent !== undefined) $03df355ea183d08a$var$subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n        } else {\n            const text = prevNode.getTextContent();\n            if ($03df355ea183d08a$var$$isTextNode(prevNode) && !prevNode.isDirectionless()) $03df355ea183d08a$var$subTreeDirectionedTextContent += text;\n            $03df355ea183d08a$var$editorTextContent += text;\n            $03df355ea183d08a$var$subTreeTextContent += text;\n        }\n        return dom;\n    } // If the node key doesn't point to the same instance in both maps,\n    // it means it were cloned. If they're also dirty, we mark them as mutated.\n    if (prevNode !== nextNode && isDirty) $03df355ea183d08a$var$setMutatedNode($03df355ea183d08a$var$mutatedNodes, $03df355ea183d08a$var$activeEditorNodes, $03df355ea183d08a$var$activeMutationListeners, nextNode, \"updated\");\n     // Update node. If it returns true, we need to unmount and re-create the node\n    if (nextNode.updateDOM(prevNode, dom, $03df355ea183d08a$var$activeEditorConfig)) {\n        const replacementDOM = $03df355ea183d08a$var$createNode(key, null, null);\n        if (parentDOM === null) throw Error(`reconcileNode: parentDOM is null`);\n        parentDOM.replaceChild(replacementDOM, dom);\n        $03df355ea183d08a$var$destroyNode(key, null);\n        return replacementDOM;\n    }\n    if ($03df355ea183d08a$var$$isElementNode(prevNode) && $03df355ea183d08a$var$$isElementNode(nextNode)) {\n        // Reconcile element children\n        const nextIndent = nextNode.__indent;\n        if (nextIndent !== prevNode.__indent) $03df355ea183d08a$var$setElementIndent(dom, nextIndent);\n        const nextFormat = nextNode.__format;\n        if (nextFormat !== prevNode.__format) $03df355ea183d08a$var$setElementFormat(dom, nextFormat);\n        if (isDirty) {\n            $03df355ea183d08a$var$reconcileChildrenWithDirection(prevNode, nextNode, dom);\n            if (!$03df355ea183d08a$var$$isRootNode(nextNode) && !nextNode.isInline()) $03df355ea183d08a$var$reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n        }\n        if ($03df355ea183d08a$var$$textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n            $03df355ea183d08a$var$subTreeTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n            $03df355ea183d08a$var$editorTextContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n        }\n    } else {\n        const text = nextNode.getTextContent();\n        if ($03df355ea183d08a$var$$isDecoratorNode(nextNode)) {\n            const decorator = nextNode.decorate($03df355ea183d08a$var$activeEditor$1, $03df355ea183d08a$var$activeEditorConfig);\n            if (decorator !== null) $03df355ea183d08a$var$reconcileDecorator(key, decorator);\n        } else if ($03df355ea183d08a$var$$isTextNode(nextNode) && !nextNode.isDirectionless()) // Handle text content, for LTR, LTR cases.\n        $03df355ea183d08a$var$subTreeDirectionedTextContent += text;\n        $03df355ea183d08a$var$subTreeTextContent += text;\n        $03df355ea183d08a$var$editorTextContent += text;\n    }\n    if (!$03df355ea183d08a$var$activeEditorStateReadOnly && $03df355ea183d08a$var$$isRootNode(nextNode) && nextNode.__cachedText !== $03df355ea183d08a$var$editorTextContent) {\n        // Cache the latest text content.\n        nextNode = nextNode.getWritable();\n        nextNode.__cachedText = $03df355ea183d08a$var$editorTextContent;\n    }\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n    return dom;\n}\nfunction $03df355ea183d08a$var$reconcileDecorator(key, decorator) {\n    let pendingDecorators = $03df355ea183d08a$var$activeEditor$1._pendingDecorators;\n    const currentDecorators = $03df355ea183d08a$var$activeEditor$1._decorators;\n    if (pendingDecorators === null) {\n        if (currentDecorators[key] === decorator) return;\n        pendingDecorators = $03df355ea183d08a$var$cloneDecorators($03df355ea183d08a$var$activeEditor$1);\n    }\n    pendingDecorators[key] = decorator;\n}\nfunction $03df355ea183d08a$var$getFirstChild(element) {\n    return element.firstChild;\n}\nfunction $03df355ea183d08a$var$getNextSibling(element) {\n    let nextSibling = element.nextSibling;\n    if (nextSibling !== null && nextSibling === $03df355ea183d08a$var$activeEditor$1._blockCursorElement) nextSibling = nextSibling.nextSibling;\n    return nextSibling;\n}\nfunction $03df355ea183d08a$var$reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n    const prevEndIndex = prevChildrenLength - 1;\n    const nextEndIndex = nextChildrenLength - 1;\n    let prevChildrenSet;\n    let nextChildrenSet;\n    let siblingDOM = $03df355ea183d08a$var$getFirstChild(dom);\n    let prevIndex = 0;\n    let nextIndex = 0;\n    while(prevIndex <= prevEndIndex && nextIndex <= nextEndIndex){\n        const prevKey = prevChildren[prevIndex];\n        const nextKey = nextChildren[nextIndex];\n        if (prevKey === nextKey) {\n            siblingDOM = $03df355ea183d08a$var$getNextSibling($03df355ea183d08a$var$reconcileNode(nextKey, dom));\n            prevIndex++;\n            nextIndex++;\n        } else {\n            if (prevChildrenSet === undefined) prevChildrenSet = new Set(prevChildren);\n            if (nextChildrenSet === undefined) nextChildrenSet = new Set(nextChildren);\n            const nextHasPrevKey = nextChildrenSet.has(prevKey);\n            const prevHasNextKey = prevChildrenSet.has(nextKey);\n            if (!nextHasPrevKey) {\n                // Remove prev\n                siblingDOM = $03df355ea183d08a$var$getNextSibling($03df355ea183d08a$var$getPrevElementByKeyOrThrow(prevKey));\n                $03df355ea183d08a$var$destroyNode(prevKey, dom);\n                prevIndex++;\n            } else if (!prevHasNextKey) {\n                // Create next\n                $03df355ea183d08a$var$createNode(nextKey, dom, siblingDOM);\n                nextIndex++;\n            } else {\n                // Move next\n                const childDOM = $03df355ea183d08a$var$getElementByKeyOrThrow($03df355ea183d08a$var$activeEditor$1, nextKey);\n                if (childDOM === siblingDOM) siblingDOM = $03df355ea183d08a$var$getNextSibling($03df355ea183d08a$var$reconcileNode(nextKey, dom));\n                else {\n                    if (siblingDOM != null) dom.insertBefore(childDOM, siblingDOM);\n                    else dom.appendChild(childDOM);\n                    $03df355ea183d08a$var$reconcileNode(nextKey, dom);\n                }\n                prevIndex++;\n                nextIndex++;\n            }\n        }\n    }\n    const appendNewChildren = prevIndex > prevEndIndex;\n    const removeOldChildren = nextIndex > nextEndIndex;\n    if (appendNewChildren && !removeOldChildren) {\n        const previousNode = nextChildren[nextEndIndex + 1];\n        const insertDOM = previousNode === undefined ? null : $03df355ea183d08a$var$activeEditor$1.getElementByKey(previousNode);\n        $03df355ea183d08a$var$createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n    } else if (removeOldChildren && !appendNewChildren) $03df355ea183d08a$var$destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n}\nfunction $03df355ea183d08a$var$reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n    // We cache text content to make retrieval more efficient.\n    // The cache must be rebuilt during reconciliation to account for any changes.\n    $03df355ea183d08a$var$subTreeTextContent = \"\";\n    $03df355ea183d08a$var$editorTextContent = \"\";\n    $03df355ea183d08a$var$subTreeDirectionedTextContent = \"\"; // Rather than pass around a load of arguments through the stack recursively\n    // we instead set them as bindings within the scope of the module.\n    $03df355ea183d08a$var$treatAllNodesAsDirty = dirtyType === $03df355ea183d08a$var$FULL_RECONCILE;\n    $03df355ea183d08a$var$activeTextDirection = null;\n    $03df355ea183d08a$var$activeEditor$1 = editor;\n    $03df355ea183d08a$var$activeEditorConfig = editor._config;\n    $03df355ea183d08a$var$activeEditorNodes = editor._nodes;\n    $03df355ea183d08a$var$activeMutationListeners = $03df355ea183d08a$var$activeEditor$1._listeners.mutation;\n    $03df355ea183d08a$var$activeDirtyElements = dirtyElements;\n    $03df355ea183d08a$var$activeDirtyLeaves = dirtyLeaves;\n    $03df355ea183d08a$var$activePrevNodeMap = prevEditorState._nodeMap;\n    $03df355ea183d08a$var$activeNextNodeMap = nextEditorState._nodeMap;\n    $03df355ea183d08a$var$activeEditorStateReadOnly = nextEditorState._readOnly;\n    $03df355ea183d08a$var$activePrevKeyToDOMMap = new Map(editor._keyToDOMMap); // We keep track of mutated nodes so we can trigger mutation\n    // listeners later in the update cycle.\n    const currentMutatedNodes = new Map();\n    $03df355ea183d08a$var$mutatedNodes = currentMutatedNodes;\n    $03df355ea183d08a$var$reconcileNode(\"root\", null); // We don't want a bunch of void checks throughout the scope\n    // so instead we make it seem that these values are always set.\n    // We also want to make sure we clear them down, otherwise we\n    // can leak memory.\n    // @ts-ignore\n    $03df355ea183d08a$var$activeEditor$1 = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activeEditorNodes = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activeDirtyElements = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activeDirtyLeaves = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activePrevNodeMap = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activeNextNodeMap = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activeEditorConfig = undefined; // @ts-ignore\n    $03df355ea183d08a$var$activePrevKeyToDOMMap = undefined; // @ts-ignore\n    $03df355ea183d08a$var$mutatedNodes = undefined;\n    return currentMutatedNodes;\n}\nfunction $03df355ea183d08a$var$storeDOMWithKey(key, dom, editor) {\n    const keyToDOMMap = editor._keyToDOMMap; // @ts-ignore We intentionally add this to the Node.\n    dom[\"__lexicalKey_\" + editor._key] = key;\n    keyToDOMMap.set(key, dom);\n}\nfunction $03df355ea183d08a$var$getPrevElementByKeyOrThrow(key) {\n    const element = $03df355ea183d08a$var$activePrevKeyToDOMMap.get(key);\n    if (element === undefined) throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    return element;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$PASS_THROUGH_COMMAND = Object.freeze({});\nconst $03df355ea183d08a$var$ANDROID_COMPOSITION_LATENCY = 30;\nconst $03df355ea183d08a$var$rootElementEvents = [\n    [\n        \"keydown\",\n        $03df355ea183d08a$var$onKeyDown\n    ],\n    [\n        \"pointerdown\",\n        $03df355ea183d08a$var$onPointerDown\n    ],\n    [\n        \"compositionstart\",\n        $03df355ea183d08a$var$onCompositionStart\n    ],\n    [\n        \"compositionend\",\n        $03df355ea183d08a$var$onCompositionEnd\n    ],\n    [\n        \"input\",\n        $03df355ea183d08a$var$onInput\n    ],\n    [\n        \"click\",\n        $03df355ea183d08a$var$onClick\n    ],\n    [\n        \"cut\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"copy\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"dragstart\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"dragover\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"dragend\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"paste\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"focus\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"blur\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ],\n    [\n        \"drop\",\n        $03df355ea183d08a$var$PASS_THROUGH_COMMAND\n    ]\n];\nif ($03df355ea183d08a$var$CAN_USE_BEFORE_INPUT) $03df355ea183d08a$var$rootElementEvents.push([\n    \"beforeinput\",\n    (event, editor)=>$03df355ea183d08a$var$onBeforeInput(event, editor)\n]);\nlet $03df355ea183d08a$var$lastKeyDownTimeStamp = 0;\nlet $03df355ea183d08a$var$lastKeyCode = 0;\nlet $03df355ea183d08a$var$lastBeforeInputInsertTextTimeStamp = 0;\nlet $03df355ea183d08a$var$unprocessedBeforeInputData = null;\nlet $03df355ea183d08a$var$rootElementsRegistered = 0;\nlet $03df355ea183d08a$var$isSelectionChangeFromDOMUpdate = false;\nlet $03df355ea183d08a$var$isSelectionChangeFromMouseDown = false;\nlet $03df355ea183d08a$var$isInsertLineBreak = false;\nlet $03df355ea183d08a$var$isFirefoxEndingComposition = false;\nlet $03df355ea183d08a$var$collapsedSelectionFormat = [\n    0,\n    \"\",\n    0,\n    \"root\",\n    0\n]; // This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\nfunction $03df355ea183d08a$var$$shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n    const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n    const anchorKey = anchor.key;\n    const backingAnchorElement = editor.getElementByKey(anchorKey);\n    const textLength = text.length;\n    return anchorKey !== focus.key || // If we're working with a non-text node.\n    !$03df355ea183d08a$var$$isTextNode(anchorNode) || // If we are replacing a range with a single character or grapheme, and not composing.\n    (!isBeforeInput && (!$03df355ea183d08a$var$CAN_USE_BEFORE_INPUT || // We check to see if there has been\n    // a recent beforeinput event for \"textInput\". If there has been one in the last\n    // 50ms then we proceed as normal. However, if there is not, then this is likely\n    // a dangling `input` event caused by execCommand('insertText').\n    $03df355ea183d08a$var$lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || $03df355ea183d08a$var$doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() || // Any non standard text node.\n    $03df355ea183d08a$var$$isTokenOrSegmented(anchorNode) || // If the text length is more than a single character and we're either\n    // dealing with this in \"beforeinput\" or where the node has already recently\n    // been changed (thus is dirty).\n    anchorNode.isDirty() && textLength > 1 || // If the DOM selection element is not the same as the backing node during beforeinput.\n    (isBeforeInput || !$03df355ea183d08a$var$CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== $03df355ea183d08a$var$getDOMTextNode(backingAnchorElement) || // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n    // of the editor.\n    domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) || // Check if we're changing from bold to italics, or some other format.\n    anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style || // One last set of heuristics to check against.\n    $03df355ea183d08a$var$$shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction $03df355ea183d08a$var$shouldSkipSelectionChange(domNode, offset) {\n    return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === $03df355ea183d08a$var$DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction $03df355ea183d08a$var$onSelectionChange(domSelection, editor, isActive) {\n    const { anchorNode: anchorDOM , anchorOffset: anchorOffset , focusNode: focusDOM , focusOffset: focusOffset  } = domSelection;\n    if ($03df355ea183d08a$var$isSelectionChangeFromDOMUpdate) {\n        $03df355ea183d08a$var$isSelectionChangeFromDOMUpdate = false; // If native DOM selection is on a DOM element, then\n        // we should continue as usual, as Lexical's selection\n        // may have normalized to a better child. If the DOM\n        // element is a text node, we can safely apply this\n        // optimization and skip the selection change entirely.\n        // We also need to check if the offset is at the boundary,\n        // because in this case, we might need to normalize to a\n        // sibling instead.\n        if ($03df355ea183d08a$var$shouldSkipSelectionChange(anchorDOM, anchorOffset) && $03df355ea183d08a$var$shouldSkipSelectionChange(focusDOM, focusOffset)) return;\n    }\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        // Non-active editor don't need any extra logic for selection, it only needs update\n        // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n        if (!isActive) {\n            $03df355ea183d08a$var$$setSelection(null);\n            return;\n        }\n        if (!$03df355ea183d08a$var$isSelectionWithinEditor(editor, anchorDOM, focusDOM)) return;\n        const selection = $03df355ea183d08a$var$$getSelection(); // Update the selection format\n        if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const anchor = selection.anchor;\n            const anchorNode = anchor.getNode();\n            if (selection.isCollapsed()) {\n                // Badly interpreted range selection when collapsed - #1482\n                if (domSelection.type === \"Range\" && domSelection.anchorNode === domSelection.focusNode) selection.dirty = true;\n                 // If we have marked a collapsed selection format, and we're\n                // within the given time range – then attempt to use that format\n                // instead of getting the format from the anchor node.\n                const windowEvent = $03df355ea183d08a$var$getWindow(editor).event;\n                const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n                const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = $03df355ea183d08a$var$collapsedSelectionFormat;\n                if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n                    selection.format = lastFormat;\n                    selection.style = lastStyle;\n                } else {\n                    if (anchor.type === \"text\") {\n                        selection.format = anchorNode.getFormat();\n                        selection.style = anchorNode.getStyle();\n                    } else if (anchor.type === \"element\") {\n                        selection.format = 0;\n                        selection.style = \"\";\n                    }\n                }\n            } else {\n                let combinedFormat = $03df355ea183d08a$var$IS_ALL_FORMATTING;\n                let hasTextNodes = false;\n                const nodes = selection.getNodes();\n                const nodesLength = nodes.length;\n                for(let i = 0; i < nodesLength; i++){\n                    const node = nodes[i];\n                    if ($03df355ea183d08a$var$$isTextNode(node)) {\n                        // TODO: what about style?\n                        hasTextNodes = true;\n                        combinedFormat &= node.getFormat();\n                        if (combinedFormat === 0) break;\n                    }\n                }\n                selection.format = hasTextNodes ? combinedFormat : 0;\n            }\n        }\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$SELECTION_CHANGE_COMMAND, undefined);\n    });\n} // This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction $03df355ea183d08a$var$onClick(event, editor) {\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        const selection = $03df355ea183d08a$var$$getSelection();\n        const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n        const lastSelection = $03df355ea183d08a$var$$getPreviousSelection();\n        if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const anchor = selection.anchor;\n            const anchorNode = anchor.getNode();\n            if (domSelection && anchor.type === \"element\" && anchor.offset === 0 && selection.isCollapsed() && !$03df355ea183d08a$var$$isRootNode(anchorNode) && $03df355ea183d08a$var$$getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n                domSelection.removeAllRanges();\n                selection.dirty = true;\n            }\n        }\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CLICK_COMMAND, event);\n    });\n}\nfunction $03df355ea183d08a$var$onPointerDown(event, editor) {\n    // TODO implement text drag & drop\n    const target = event.target;\n    const pointerType = event.pointerType;\n    if (target instanceof Node && pointerType !== \"touch\") $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        // Drag & drop should not recompute selection until mouse up; otherwise the initially\n        // selected content is lost.\n        if (!$03df355ea183d08a$var$$isSelectionCapturedInDecorator(target)) $03df355ea183d08a$var$isSelectionChangeFromMouseDown = true;\n    });\n}\nfunction $03df355ea183d08a$var$getTargetRange(event) {\n    if (!event.getTargetRanges) return null;\n    const targetRanges = event.getTargetRanges();\n    if (targetRanges.length === 0) return null;\n    return targetRanges[0];\n}\nfunction $03df355ea183d08a$var$$canRemoveText(anchorNode, focusNode) {\n    return anchorNode !== focusNode || $03df355ea183d08a$var$$isElementNode(anchorNode) || $03df355ea183d08a$var$$isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction $03df355ea183d08a$var$isPossiblyAndroidKeyPress(timeStamp) {\n    return $03df355ea183d08a$var$lastKeyCode === 229 && timeStamp < $03df355ea183d08a$var$lastKeyDownTimeStamp + $03df355ea183d08a$var$ANDROID_COMPOSITION_LATENCY;\n}\nfunction $03df355ea183d08a$var$onBeforeInput(event, editor) {\n    const inputType = event.inputType;\n    const targetRange = $03df355ea183d08a$var$getTargetRange(event); // We let the browser do its own thing for composition.\n    if (inputType === \"deleteCompositionText\" || // If we're pasting in FF, we shouldn't get this event\n    // as the `paste` event should have triggered, unless the\n    // user has dom.event.clipboardevents.enabled disabled in\n    // about:config. In that case, we need to process the\n    // pasted content in the DOM mutation phase.\n    $03df355ea183d08a$var$IS_FIREFOX && $03df355ea183d08a$var$isFirefoxClipboardEvents(editor)) return;\n    else if (inputType === \"insertCompositionText\") return;\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if (inputType === \"deleteContentBackward\") {\n            if (selection === null) {\n                // Use previous selection\n                const prevSelection = $03df355ea183d08a$var$$getPreviousSelection();\n                if (!$03df355ea183d08a$var$$isRangeSelection(prevSelection)) return;\n                $03df355ea183d08a$var$$setSelection(prevSelection.clone());\n            }\n            if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                // Used for handling backspace in Android.\n                if ($03df355ea183d08a$var$isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n                    $03df355ea183d08a$var$$setCompositionKey(null);\n                    $03df355ea183d08a$var$lastKeyDownTimeStamp = 0; // Fixes an Android bug where selection flickers when backspacing\n                    setTimeout(()=>{\n                        $03df355ea183d08a$var$updateEditor(editor, ()=>{\n                            $03df355ea183d08a$var$$setCompositionKey(null);\n                        });\n                    }, $03df355ea183d08a$var$ANDROID_COMPOSITION_LATENCY);\n                    if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                        const anchorNode = selection.anchor.getNode();\n                        anchorNode.markDirty();\n                        selection.format = anchorNode.getFormat();\n                        selection.style = anchorNode.getStyle();\n                    }\n                } else {\n                    event.preventDefault();\n                    $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND, true);\n                }\n                return;\n            }\n        }\n        if (!$03df355ea183d08a$var$$isRangeSelection(selection)) return;\n        const data = event.data; // This represents the case when two beforeinput events are triggered at the same time (without a\n        // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n        // a combination of autocorrection + autocapitalization.\n        // Having Lexical run everything in controlled mode would fix the issue without additional code\n        // but this would kill the massive performance win from the most common typing event.\n        // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n        // content, a job that would usually be the input event's responsibility.\n        if ($03df355ea183d08a$var$unprocessedBeforeInputData !== null) $03df355ea183d08a$var$$updateSelectedTextFromDOM(false, editor, $03df355ea183d08a$var$unprocessedBeforeInputData);\n        if ((!selection.dirty || $03df355ea183d08a$var$unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$03df355ea183d08a$var$$isRootNode(selection.anchor.getNode()) && targetRange !== null) selection.applyDOMRange(targetRange);\n        $03df355ea183d08a$var$unprocessedBeforeInputData = null;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        const anchorNode = anchor.getNode();\n        const focusNode = focus.getNode();\n        if (inputType === \"insertText\" || inputType === \"insertTranspose\") {\n            if (data === \"\\n\") {\n                event.preventDefault();\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND, false);\n            } else if (data === $03df355ea183d08a$var$DOUBLE_LINE_BREAK) {\n                event.preventDefault();\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_PARAGRAPH_COMMAND, undefined);\n            } else if (data == null && event.dataTransfer) {\n                // Gets around a Safari text replacement bug.\n                const text = event.dataTransfer.getData(\"text/plain\");\n                event.preventDefault();\n                selection.insertRawText(text);\n            } else if (data != null && $03df355ea183d08a$var$$shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n                event.preventDefault();\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND, data);\n            } else $03df355ea183d08a$var$unprocessedBeforeInputData = data;\n            $03df355ea183d08a$var$lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n            return;\n        } // Prevent the browser from carrying out\n        // the input event, so we can control the\n        // output.\n        event.preventDefault();\n        switch(inputType){\n            case \"insertFromYank\":\n            case \"insertFromDrop\":\n            case \"insertReplacementText\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND, event);\n                break;\n            case \"insertFromComposition\":\n                // This is the end of composition\n                $03df355ea183d08a$var$$setCompositionKey(null);\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND, event);\n                break;\n            case \"insertLineBreak\":\n                // Used for Android\n                $03df355ea183d08a$var$$setCompositionKey(null);\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND, false);\n                break;\n            case \"insertParagraph\":\n                // Used for Android\n                $03df355ea183d08a$var$$setCompositionKey(null); // Some browsers do not provide the type \"insertLineBreak\".\n                // So instead, we need to infer it from the keyboard event.\n                if ($03df355ea183d08a$var$isInsertLineBreak) {\n                    $03df355ea183d08a$var$isInsertLineBreak = false;\n                    $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND, false);\n                } else $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_PARAGRAPH_COMMAND, undefined);\n                break;\n            case \"insertFromPaste\":\n            case \"insertFromPasteAsQuotation\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$PASTE_COMMAND, event);\n                break;\n            case \"deleteByComposition\":\n                if ($03df355ea183d08a$var$$canRemoveText(anchorNode, focusNode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$REMOVE_TEXT_COMMAND, undefined);\n                break;\n            case \"deleteByDrag\":\n            case \"deleteByCut\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$REMOVE_TEXT_COMMAND, undefined);\n                break;\n            case \"deleteContent\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND, false);\n                break;\n            case \"deleteWordBackward\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_WORD_COMMAND, true);\n                break;\n            case \"deleteWordForward\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_WORD_COMMAND, false);\n                break;\n            case \"deleteHardLineBackward\":\n            case \"deleteSoftLineBackward\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_LINE_COMMAND, true);\n                break;\n            case \"deleteContentForward\":\n            case \"deleteHardLineForward\":\n            case \"deleteSoftLineForward\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_LINE_COMMAND, false);\n                break;\n            case \"formatStrikeThrough\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"strikethrough\");\n                break;\n            case \"formatBold\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"bold\");\n                break;\n            case \"formatItalic\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"italic\");\n                break;\n            case \"formatUnderline\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"underline\");\n                break;\n            case \"historyUndo\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$UNDO_COMMAND, undefined);\n                break;\n            case \"historyRedo\":\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$REDO_COMMAND, undefined);\n                break;\n        }\n    });\n}\nfunction $03df355ea183d08a$var$onInput(event, editor) {\n    // We don't want the onInput to bubble, in the case of nested editors.\n    event.stopPropagation();\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        const selection = $03df355ea183d08a$var$$getSelection();\n        const data = event.data;\n        const targetRange = $03df355ea183d08a$var$getTargetRange(event);\n        if (data != null && $03df355ea183d08a$var$$isRangeSelection(selection) && $03df355ea183d08a$var$$shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n            // Given we're over-riding the default behavior, we will need\n            // to ensure to disable composition before dispatching the\n            // insertText command for when changing the sequence for FF.\n            if ($03df355ea183d08a$var$isFirefoxEndingComposition) {\n                $03df355ea183d08a$var$onCompositionEndImpl(editor, data);\n                $03df355ea183d08a$var$isFirefoxEndingComposition = false;\n            }\n            const anchor = selection.anchor;\n            const anchorNode = anchor.getNode();\n            const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n            if (domSelection === null) return;\n            const offset = anchor.offset; // If the content is the same as inserted, then don't dispatch an insertion.\n            // Given onInput doesn't take the current selection (it uses the previous)\n            // we can compare that against what the DOM currently says.\n            if (!$03df355ea183d08a$var$CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$03df355ea183d08a$var$$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== $03df355ea183d08a$var$getAnchorTextFromDOM(domSelection.anchorNode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND, data);\n            const textLength = data.length; // Another hack for FF, as it's possible that the IME is still\n            // open, even though compositionend has already fired (sigh).\n            if ($03df355ea183d08a$var$IS_FIREFOX && textLength > 1 && event.inputType === \"insertCompositionText\" && !editor.isComposing()) selection.anchor.offset -= textLength;\n             // This ensures consistency on Android.\n            if (!$03df355ea183d08a$var$IS_SAFARI && !$03df355ea183d08a$var$IS_IOS && !$03df355ea183d08a$var$IS_APPLE_WEBKIT && editor.isComposing()) {\n                $03df355ea183d08a$var$lastKeyDownTimeStamp = 0;\n                $03df355ea183d08a$var$$setCompositionKey(null);\n            }\n        } else {\n            const characterData = data !== null ? data : undefined;\n            $03df355ea183d08a$var$$updateSelectedTextFromDOM(false, editor, characterData); // onInput always fires after onCompositionEnd for FF.\n            if ($03df355ea183d08a$var$isFirefoxEndingComposition) {\n                $03df355ea183d08a$var$onCompositionEndImpl(editor, data || undefined);\n                $03df355ea183d08a$var$isFirefoxEndingComposition = false;\n            }\n        } // Also flush any other mutations that might have occurred\n        // since the change.\n        $03df355ea183d08a$var$$flushMutations();\n    });\n    $03df355ea183d08a$var$unprocessedBeforeInputData = null;\n}\nfunction $03df355ea183d08a$var$onCompositionStart(event, editor) {\n    $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if ($03df355ea183d08a$var$$isRangeSelection(selection) && !editor.isComposing()) {\n            const anchor = selection.anchor;\n            const node = selection.anchor.getNode();\n            $03df355ea183d08a$var$$setCompositionKey(anchor.key);\n            if (// apply the empty space heuristic. We can't do this for Safari,\n            // as the keydown fires after composition start.\n            event.timeStamp < $03df355ea183d08a$var$lastKeyDownTimeStamp + $03df355ea183d08a$var$ANDROID_COMPOSITION_LATENCY || // FF has issues around composing multibyte characters, so we also\n            // need to invoke the empty space heuristic below.\n            anchor.type === \"element\" || !selection.isCollapsed() || node.getFormat() !== selection.format || node.getStyle() !== selection.style) // We insert a zero width character, ready for the composition\n            // to get inserted into the new node we create. If\n            // we don't do this, Safari will fail on us because\n            // there is no text node matching the selection.\n            $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND, $03df355ea183d08a$var$COMPOSITION_START_CHAR);\n        }\n    });\n}\nfunction $03df355ea183d08a$var$onCompositionEndImpl(editor, data) {\n    const compositionKey = editor._compositionKey;\n    $03df355ea183d08a$var$$setCompositionKey(null); // Handle termination of composition.\n    if (compositionKey !== null && data != null) {\n        // Composition can sometimes move to an adjacent DOM node when backspacing.\n        // So check for the empty case.\n        if (data === \"\") {\n            const node = $03df355ea183d08a$var$$getNodeByKey(compositionKey);\n            const textNode = $03df355ea183d08a$var$getDOMTextNode(editor.getElementByKey(compositionKey));\n            if (textNode !== null && textNode.nodeValue !== null && $03df355ea183d08a$var$$isTextNode(node)) $03df355ea183d08a$var$$updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n            return;\n        } // Composition can sometimes be that of a new line. In which case, we need to\n        // handle that accordingly.\n        if (data[data.length - 1] === \"\\n\") {\n            const selection = $03df355ea183d08a$var$$getSelection();\n            if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                // If the last character is a line break, we also need to insert\n                // a line break.\n                const focus = selection.focus;\n                selection.anchor.set(focus.key, focus.offset, focus.type);\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ENTER_COMMAND, null);\n                return;\n            }\n        }\n    }\n    $03df355ea183d08a$var$$updateSelectedTextFromDOM(true, editor, data);\n}\nfunction $03df355ea183d08a$var$onCompositionEnd(event, editor) {\n    // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n    // fire onInput before onCompositionEnd. To ensure the sequence works\n    // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n    // defer handling of onCompositionEnd in Firefox till we have processed\n    // the logic in onInput.\n    if ($03df355ea183d08a$var$IS_FIREFOX) $03df355ea183d08a$var$isFirefoxEndingComposition = true;\n    else $03df355ea183d08a$var$updateEditor(editor, ()=>{\n        $03df355ea183d08a$var$onCompositionEndImpl(editor, event.data);\n    });\n}\nfunction $03df355ea183d08a$var$onKeyDown(event, editor) {\n    $03df355ea183d08a$var$lastKeyDownTimeStamp = event.timeStamp;\n    $03df355ea183d08a$var$lastKeyCode = event.keyCode;\n    if (editor.isComposing()) return;\n    const { keyCode: keyCode , shiftKey: shiftKey , ctrlKey: ctrlKey , metaKey: metaKey , altKey: altKey  } = event;\n    if ($03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_DOWN_COMMAND, event)) return;\n    if ($03df355ea183d08a$var$isMoveForward(keyCode, ctrlKey, altKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ARROW_RIGHT_COMMAND, event);\n    else if ($03df355ea183d08a$var$isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$MOVE_TO_END, event);\n    else if ($03df355ea183d08a$var$isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ARROW_LEFT_COMMAND, event);\n    else if ($03df355ea183d08a$var$isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$MOVE_TO_START, event);\n    else if ($03df355ea183d08a$var$isMoveUp(keyCode, ctrlKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ARROW_UP_COMMAND, event);\n    else if ($03df355ea183d08a$var$isMoveDown(keyCode, ctrlKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ARROW_DOWN_COMMAND, event);\n    else if ($03df355ea183d08a$var$isLineBreak(keyCode, shiftKey)) {\n        $03df355ea183d08a$var$isInsertLineBreak = true;\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ENTER_COMMAND, event);\n    } else if ($03df355ea183d08a$var$isSpace(keyCode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_SPACE_COMMAND, event);\n    else if ($03df355ea183d08a$var$isOpenLineBreak(keyCode, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$isInsertLineBreak = true;\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND, true);\n    } else if ($03df355ea183d08a$var$isParagraph(keyCode, shiftKey)) {\n        $03df355ea183d08a$var$isInsertLineBreak = false;\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ENTER_COMMAND, event);\n    } else if ($03df355ea183d08a$var$isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n        if ($03df355ea183d08a$var$isBackspace(keyCode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_BACKSPACE_COMMAND, event);\n        else {\n            event.preventDefault();\n            $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND, true);\n        }\n    } else if ($03df355ea183d08a$var$isEscape(keyCode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_ESCAPE_COMMAND, event);\n    else if ($03df355ea183d08a$var$isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n        if ($03df355ea183d08a$var$isDelete(keyCode)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_DELETE_COMMAND, event);\n        else {\n            event.preventDefault();\n            $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND, false);\n        }\n    } else if ($03df355ea183d08a$var$isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_WORD_COMMAND, true);\n    } else if ($03df355ea183d08a$var$isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_WORD_COMMAND, false);\n    } else if ($03df355ea183d08a$var$isDeleteLineBackward(keyCode, metaKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_LINE_COMMAND, true);\n    } else if ($03df355ea183d08a$var$isDeleteLineForward(keyCode, metaKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DELETE_LINE_COMMAND, false);\n    } else if ($03df355ea183d08a$var$isBold(keyCode, altKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"bold\");\n    } else if ($03df355ea183d08a$var$isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"underline\");\n    } else if ($03df355ea183d08a$var$isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FORMAT_TEXT_COMMAND, \"italic\");\n    } else if ($03df355ea183d08a$var$isTab(keyCode, altKey, ctrlKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_TAB_COMMAND, event);\n    else if ($03df355ea183d08a$var$isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$UNDO_COMMAND, undefined);\n    } else if ($03df355ea183d08a$var$isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$REDO_COMMAND, undefined);\n    } else {\n        const prevSelection = editor._editorState._selection;\n        if ($03df355ea183d08a$var$$isNodeSelection(prevSelection)) {\n            if ($03df355ea183d08a$var$isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n                event.preventDefault();\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$COPY_COMMAND, event);\n            } else if ($03df355ea183d08a$var$isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n                event.preventDefault();\n                $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CUT_COMMAND, event);\n            }\n        }\n    }\n    if ($03df355ea183d08a$var$isModifier(ctrlKey, shiftKey, altKey, metaKey)) $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$KEY_MODIFIER_COMMAND, event);\n}\nfunction $03df355ea183d08a$var$getRootElementRemoveHandles(rootElement) {\n    // @ts-expect-error: internal field\n    let eventHandles = rootElement.__lexicalEventHandles;\n    if (eventHandles === undefined) {\n        eventHandles = []; // @ts-expect-error: internal field\n        rootElement.__lexicalEventHandles = eventHandles;\n    }\n    return eventHandles;\n} // Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst $03df355ea183d08a$var$activeNestedEditorsMap = new Map();\nfunction $03df355ea183d08a$var$onDocumentSelectionChange(event) {\n    const target = event.target;\n    const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n    const domSelection = $03df355ea183d08a$var$getDOMSelection(targetWindow);\n    if (domSelection === null) return;\n    const nextActiveEditor = $03df355ea183d08a$var$getNearestEditorFromDOMNode(domSelection.anchorNode);\n    if (nextActiveEditor === null) return;\n    if ($03df355ea183d08a$var$isSelectionChangeFromMouseDown) {\n        $03df355ea183d08a$var$isSelectionChangeFromMouseDown = false;\n        $03df355ea183d08a$var$updateEditor(nextActiveEditor, ()=>{\n            const lastSelection = $03df355ea183d08a$var$$getPreviousSelection();\n            const domAnchorNode = domSelection.anchorNode;\n            if (domAnchorNode === null) return;\n            const nodeType = domAnchorNode.nodeType; // If the user is attempting to click selection back onto text, then\n            // we should attempt create a range selection.\n            // When we click on an empty paragraph node or the end of a paragraph that ends\n            // with an image/poll, the nodeType will be ELEMENT_NODE\n            if (nodeType !== $03df355ea183d08a$var$DOM_ELEMENT_TYPE && nodeType !== $03df355ea183d08a$var$DOM_TEXT_TYPE) return;\n            const newSelection = $03df355ea183d08a$var$internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor);\n            $03df355ea183d08a$var$$setSelection(newSelection);\n        });\n    } // When editor receives selection change event, we're checking if\n    // it has any sibling editors (within same parent editor) that were active\n    // before, and trigger selection change on it to nullify selection.\n    const editors = $03df355ea183d08a$var$getEditorsToPropagate(nextActiveEditor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    const activeNestedEditor = $03df355ea183d08a$var$activeNestedEditorsMap.get(rootEditorKey);\n    const prevActiveEditor = activeNestedEditor || rootEditor;\n    if (prevActiveEditor !== nextActiveEditor) $03df355ea183d08a$var$onSelectionChange(domSelection, prevActiveEditor, false);\n    $03df355ea183d08a$var$onSelectionChange(domSelection, nextActiveEditor, true); // If newly selected editor is nested, then add it to the map, clean map otherwise\n    if (nextActiveEditor !== rootEditor) $03df355ea183d08a$var$activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n    else if (activeNestedEditor) $03df355ea183d08a$var$activeNestedEditorsMap.delete(rootEditorKey);\n}\nfunction $03df355ea183d08a$var$stopLexicalPropagation(event) {\n    // We attach a special property to ensure the same event doesn't re-fire\n    // for parent editors.\n    // @ts-ignore\n    event._lexicalHandled = true;\n}\nfunction $03df355ea183d08a$var$hasStoppedLexicalPropagation(event) {\n    // @ts-ignore\n    const stopped = event._lexicalHandled === true;\n    return stopped;\n}\nfunction $03df355ea183d08a$var$addRootElementEvents(rootElement, editor) {\n    // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n    if ($03df355ea183d08a$var$rootElementsRegistered === 0) {\n        const doc = rootElement.ownerDocument;\n        doc.addEventListener(\"selectionchange\", $03df355ea183d08a$var$onDocumentSelectionChange);\n    }\n    $03df355ea183d08a$var$rootElementsRegistered++; // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = editor;\n    const removeHandles = $03df355ea183d08a$var$getRootElementRemoveHandles(rootElement);\n    for(let i = 0; i < $03df355ea183d08a$var$rootElementEvents.length; i++){\n        const [eventName, onEvent] = $03df355ea183d08a$var$rootElementEvents[i];\n        const eventHandler = typeof onEvent === \"function\" ? (event)=>{\n            if ($03df355ea183d08a$var$hasStoppedLexicalPropagation(event)) return;\n            $03df355ea183d08a$var$stopLexicalPropagation(event);\n            if (editor.isEditable()) onEvent(event, editor);\n        } : (event)=>{\n            if ($03df355ea183d08a$var$hasStoppedLexicalPropagation(event)) return;\n            $03df355ea183d08a$var$stopLexicalPropagation(event);\n            if (editor.isEditable()) switch(eventName){\n                case \"cut\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$CUT_COMMAND, event);\n                case \"copy\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$COPY_COMMAND, event);\n                case \"paste\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$PASTE_COMMAND, event);\n                case \"dragstart\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DRAGSTART_COMMAND, event);\n                case \"dragover\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DRAGOVER_COMMAND, event);\n                case \"dragend\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DRAGEND_COMMAND, event);\n                case \"focus\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$FOCUS_COMMAND, event);\n                case \"blur\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$BLUR_COMMAND, event);\n                case \"drop\":\n                    return $03df355ea183d08a$var$dispatchCommand(editor, $03df355ea183d08a$var$DROP_COMMAND, event);\n            }\n        };\n        rootElement.addEventListener(eventName, eventHandler);\n        removeHandles.push(()=>{\n            rootElement.removeEventListener(eventName, eventHandler);\n        });\n    }\n}\nfunction $03df355ea183d08a$var$removeRootElementEvents(rootElement) {\n    if ($03df355ea183d08a$var$rootElementsRegistered !== 0) {\n        $03df355ea183d08a$var$rootElementsRegistered--; // We only want to have a single global selectionchange event handler, shared\n        // between all editor instances.\n        if ($03df355ea183d08a$var$rootElementsRegistered === 0) {\n            const doc = rootElement.ownerDocument;\n            doc.removeEventListener(\"selectionchange\", $03df355ea183d08a$var$onDocumentSelectionChange);\n        }\n    } // @ts-expect-error: internal field\n    const editor = rootElement.__lexicalEditor;\n    if (editor !== null && editor !== undefined) {\n        $03df355ea183d08a$var$cleanActiveNestedEditorsMap(editor); // @ts-expect-error: internal field\n        rootElement.__lexicalEditor = null;\n    }\n    const removeHandles = $03df355ea183d08a$var$getRootElementRemoveHandles(rootElement);\n    for(let i = 0; i < removeHandles.length; i++)removeHandles[i]();\n     // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = [];\n}\nfunction $03df355ea183d08a$var$cleanActiveNestedEditorsMap(editor) {\n    if (editor._parentEditor !== null) {\n        // For nested editor cleanup map if this editor was marked as active\n        const editors = $03df355ea183d08a$var$getEditorsToPropagate(editor);\n        const rootEditor = editors[editors.length - 1];\n        const rootEditorKey = rootEditor._key;\n        if ($03df355ea183d08a$var$activeNestedEditorsMap.get(rootEditorKey) === editor) $03df355ea183d08a$var$activeNestedEditorsMap.delete(rootEditorKey);\n    } else // For top-level editors cleanup map\n    $03df355ea183d08a$var$activeNestedEditorsMap.delete(editor._key);\n}\nfunction $03df355ea183d08a$var$markSelectionChangeFromDOMUpdate() {\n    $03df355ea183d08a$var$isSelectionChangeFromDOMUpdate = true;\n}\nfunction $03df355ea183d08a$var$markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n    $03df355ea183d08a$var$collapsedSelectionFormat = [\n        format,\n        style,\n        offset,\n        key,\n        timeStamp\n    ];\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ class $03df355ea183d08a$var$Point {\n    is(point) {\n        return this.key === point.key && this.offset === point.offset && this.type === point.type;\n    }\n    isBefore(b) {\n        let aNode = this.getNode();\n        let bNode = b.getNode();\n        const aOffset = this.offset;\n        const bOffset = b.offset;\n        if ($03df355ea183d08a$var$$isElementNode(aNode)) {\n            const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n            aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n        }\n        if ($03df355ea183d08a$var$$isElementNode(bNode)) {\n            const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n            bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n        }\n        if (aNode === bNode) return aOffset < bOffset;\n        return aNode.isBefore(bNode);\n    }\n    getNode() {\n        const key = this.key;\n        const node = $03df355ea183d08a$var$$getNodeByKey(key);\n        if (node === null) throw Error(`Point.getNode: node not found`);\n        return node;\n    }\n    set(key, offset, type) {\n        const selection = this._selection;\n        const oldKey = this.key;\n        this.key = key;\n        this.offset = offset;\n        this.type = type;\n        if (!$03df355ea183d08a$var$isCurrentlyReadOnlyMode()) {\n            if ($03df355ea183d08a$var$$getCompositionKey() === oldKey) $03df355ea183d08a$var$$setCompositionKey(key);\n            if (selection !== null) {\n                selection._cachedNodes = null;\n                selection.dirty = true;\n            }\n        }\n    }\n    constructor(key, offset, type){\n        this._selection = null;\n        this.key = key;\n        this.offset = offset;\n        this.type = type;\n    }\n}\nfunction $03df355ea183d08a$var$$createPoint(key, offset, type) {\n    // @ts-expect-error: intentionally cast as we use a class for perf reasons\n    return new $03df355ea183d08a$var$Point(key, offset, type);\n}\nfunction $03df355ea183d08a$var$selectPointOnNode(point, node) {\n    let key = node.__key;\n    let offset = point.offset;\n    let type = \"element\";\n    if ($03df355ea183d08a$var$$isTextNode(node)) {\n        type = \"text\";\n        const textContentLength = node.getTextContentSize();\n        if (offset > textContentLength) offset = textContentLength;\n    } else if (!$03df355ea183d08a$var$$isElementNode(node)) {\n        const nextSibling = node.getNextSibling();\n        if ($03df355ea183d08a$var$$isTextNode(nextSibling)) {\n            key = nextSibling.__key;\n            offset = 0;\n            type = \"text\";\n        } else {\n            const parentNode = node.getParent();\n            if (parentNode) {\n                key = parentNode.__key;\n                offset = node.getIndexWithinParent() + 1;\n            }\n        }\n    }\n    point.set(key, offset, type);\n}\nfunction $03df355ea183d08a$var$$moveSelectionPointToEnd(point, node) {\n    if ($03df355ea183d08a$var$$isElementNode(node)) {\n        const lastNode = node.getLastDescendant();\n        if ($03df355ea183d08a$var$$isElementNode(lastNode) || $03df355ea183d08a$var$$isTextNode(lastNode)) $03df355ea183d08a$var$selectPointOnNode(point, lastNode);\n        else $03df355ea183d08a$var$selectPointOnNode(point, node);\n    } else $03df355ea183d08a$var$selectPointOnNode(point, node);\n}\nfunction $03df355ea183d08a$var$$transferStartingElementPointToTextPoint(start, end, format, style) {\n    const element = start.getNode();\n    const placementNode = element.getChildAtIndex(start.offset);\n    const textNode = $03df355ea183d08a$var$$createTextNode();\n    const target = $03df355ea183d08a$var$$isRootNode(element) ? $03df355ea183d08a$var$$createParagraphNode().append(textNode) : textNode;\n    textNode.setFormat(format);\n    textNode.setStyle(style);\n    if (placementNode === null) element.append(target);\n    else placementNode.insertBefore(target);\n     // Transfer the element point to a text point.\n    if (start.is(end)) end.set(textNode.__key, 0, \"text\");\n    start.set(textNode.__key, 0, \"text\");\n}\nfunction $03df355ea183d08a$var$$setPointValues(point, key, offset, type) {\n    point.key = key;\n    point.offset = offset;\n    point.type = type;\n}\nclass $03df355ea183d08a$var$NodeSelection {\n    is(selection) {\n        if (!$03df355ea183d08a$var$$isNodeSelection(selection)) return false;\n        const a = this._nodes;\n        const b = selection._nodes;\n        return a.size === b.size && Array.from(a).every((key)=>b.has(key));\n    }\n    add(key) {\n        this.dirty = true;\n        this._nodes.add(key);\n        this._cachedNodes = null;\n    }\n    delete(key) {\n        this.dirty = true;\n        this._nodes.delete(key);\n        this._cachedNodes = null;\n    }\n    clear() {\n        this.dirty = true;\n        this._nodes.clear();\n        this._cachedNodes = null;\n    }\n    has(key) {\n        return this._nodes.has(key);\n    }\n    clone() {\n        return new $03df355ea183d08a$var$NodeSelection(new Set(this._nodes));\n    }\n    extract() {\n        return this.getNodes();\n    }\n    insertRawText(text) {}\n    insertText() {}\n    insertNodes(nodes, selectStart) {\n        const selectedNodes = this.getNodes();\n        const selectedNodesLength = selectedNodes.length;\n        const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n        let selectionAtEnd; // Insert nodes\n        if ($03df355ea183d08a$var$$isTextNode(lastSelectedNode)) selectionAtEnd = lastSelectedNode.select();\n        else {\n            const index = lastSelectedNode.getIndexWithinParent() + 1;\n            selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n        }\n        selectionAtEnd.insertNodes(nodes, selectStart); // Remove selected nodes\n        for(let i = 0; i < selectedNodesLength; i++)selectedNodes[i].remove();\n        return true;\n    }\n    getNodes() {\n        const cachedNodes = this._cachedNodes;\n        if (cachedNodes !== null) return cachedNodes;\n        const objects = this._nodes;\n        const nodes = [];\n        for (const object of objects){\n            const node = $03df355ea183d08a$var$$getNodeByKey(object);\n            if (node !== null) nodes.push(node);\n        }\n        if (!$03df355ea183d08a$var$isCurrentlyReadOnlyMode()) this._cachedNodes = nodes;\n        return nodes;\n    }\n    getTextContent() {\n        const nodes = this.getNodes();\n        let textContent = \"\";\n        for(let i = 0; i < nodes.length; i++)textContent += nodes[i].getTextContent();\n        return textContent;\n    }\n    constructor(objects){\n        this.dirty = false;\n        this._nodes = objects;\n        this._cachedNodes = null;\n    }\n}\nfunction $03df355ea183d08a$var$$isRangeSelection(x) {\n    return x instanceof $03df355ea183d08a$var$RangeSelection;\n}\nclass $03df355ea183d08a$var$GridSelection {\n    is(selection) {\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridSelection(selection)) return false;\n        return this.gridKey === selection.gridKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n    }\n    set(gridKey, anchorCellKey, focusCellKey) {\n        this.dirty = true;\n        this.gridKey = gridKey;\n        this.anchor.key = anchorCellKey;\n        this.focus.key = focusCellKey;\n        this._cachedNodes = null;\n    }\n    clone() {\n        return new $03df355ea183d08a$var$GridSelection(this.gridKey, this.anchor, this.focus);\n    }\n    isCollapsed() {\n        return false;\n    }\n    isBackward() {\n        return this.focus.isBefore(this.anchor);\n    }\n    getCharacterOffsets() {\n        return $03df355ea183d08a$var$getCharacterOffsets(this);\n    }\n    extract() {\n        return this.getNodes();\n    }\n    insertRawText(text) {}\n    insertText() {}\n    insertNodes(nodes, selectStart) {\n        const focusNode = this.focus.getNode();\n        const selection = $03df355ea183d08a$var$$normalizeSelection(focusNode.select(0, focusNode.getChildrenSize()));\n        return selection.insertNodes(nodes, selectStart);\n    }\n    getShape() {\n        const anchorCellNode = $03df355ea183d08a$var$$getNodeByKey(this.anchor.key);\n        if (!(anchorCellNode !== null)) throw Error(`getNodes: expected to find AnchorNode`);\n        const anchorCellNodeIndex = anchorCellNode.getIndexWithinParent();\n        const anchorCelRoweIndex = anchorCellNode.getParentOrThrow().getIndexWithinParent();\n        const focusCellNode = $03df355ea183d08a$var$$getNodeByKey(this.focus.key);\n        if (!(focusCellNode !== null)) throw Error(`getNodes: expected to find FocusNode`);\n        const focusCellNodeIndex = focusCellNode.getIndexWithinParent();\n        const focusCellRowIndex = focusCellNode.getParentOrThrow().getIndexWithinParent();\n        const startX = Math.min(anchorCellNodeIndex, focusCellNodeIndex);\n        const stopX = Math.max(anchorCellNodeIndex, focusCellNodeIndex);\n        const startY = Math.min(anchorCelRoweIndex, focusCellRowIndex);\n        const stopY = Math.max(anchorCelRoweIndex, focusCellRowIndex);\n        return {\n            fromX: Math.min(startX, stopX),\n            fromY: Math.min(startY, stopY),\n            toX: Math.max(startX, stopX),\n            toY: Math.max(startY, stopY)\n        };\n    }\n    getNodes() {\n        const cachedNodes = this._cachedNodes;\n        if (cachedNodes !== null) return cachedNodes;\n        const anchorNode = this.anchor.getNode();\n        const focusNode = this.focus.getNode();\n        const anchorCell = $03df355ea183d08a$var$$findMatchingParent(anchorNode, $03df355ea183d08a$var$DEPRECATED_$isGridCellNode);\n        const focusCell = $03df355ea183d08a$var$$findMatchingParent(focusNode, $03df355ea183d08a$var$DEPRECATED_$isGridCellNode);\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridCellNode(anchorCell)) throw Error(`Expected GridSelection anchor to be (or a child of) GridCellNode`);\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridCellNode(focusCell)) throw Error(`Expected GridSelection focus to be (or a child of) GridCellNode`);\n        const anchorRow = anchorCell.getParent();\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridRowNode(anchorRow)) throw Error(`Expected anchorCell to have a parent GridRowNode`);\n        const gridNode = anchorRow.getParent();\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridNode(gridNode)) throw Error(`Expected tableNode to have a parent GridNode`);\n         // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n        // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n        // ability to store a state. Killing GridSelection and moving the logic to the plugin would make\n        // this possible.\n        const [map, cellAMap, cellBMap] = $03df355ea183d08a$var$computeGridMap(gridNode, anchorCell, focusCell);\n        let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n        let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n        let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n        let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n        let exploredMinColumn = minColumn;\n        let exploredMinRow = minRow;\n        let exploredMaxColumn = minColumn;\n        let exploredMaxRow = minRow;\n        function expandBoundary(mapValue) {\n            const { cell: cell , startColumn: cellStartColumn , startRow: cellStartRow  } = mapValue;\n            minColumn = Math.min(minColumn, cellStartColumn);\n            minRow = Math.min(minRow, cellStartRow);\n            maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n            maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n        }\n        while(minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow){\n            if (minColumn < exploredMinColumn) {\n                // Expand on the left\n                const rowDiff = exploredMaxRow - exploredMinRow;\n                const previousColumn = exploredMinColumn - 1;\n                for(let i = 0; i <= rowDiff; i++)expandBoundary(map[exploredMinRow + i][previousColumn]);\n                exploredMinColumn = previousColumn;\n            }\n            if (minRow < exploredMinRow) {\n                // Expand on top\n                const columnDiff = exploredMaxColumn - exploredMinColumn;\n                const previousRow = exploredMinRow - 1;\n                for(let i = 0; i <= columnDiff; i++)expandBoundary(map[previousRow][exploredMinColumn + i]);\n                exploredMinRow = previousRow;\n            }\n            if (maxColumn > exploredMaxColumn) {\n                // Expand on the right\n                const rowDiff = exploredMaxRow - exploredMinRow;\n                const nextColumn = exploredMaxColumn + 1;\n                for(let i = 0; i <= rowDiff; i++)expandBoundary(map[exploredMinRow + i][nextColumn]);\n                exploredMaxColumn = nextColumn;\n            }\n            if (maxRow > exploredMaxRow) {\n                // Expand on the bottom\n                const columnDiff = exploredMaxColumn - exploredMinColumn;\n                const nextRow = exploredMaxRow + 1;\n                for(let i = 0; i <= columnDiff; i++)expandBoundary(map[nextRow][exploredMinColumn + i]);\n                exploredMaxRow = nextRow;\n            }\n        }\n        const nodes = [\n            gridNode\n        ];\n        let lastRow = null;\n        for(let i = minRow; i <= maxRow; i++)for(let j = minColumn; j <= maxColumn; j++){\n            const { cell: cell  } = map[i][j];\n            const currentRow = cell.getParent();\n            if (!$03df355ea183d08a$var$DEPRECATED_$isGridRowNode(currentRow)) throw Error(`Expected GridCellNode parent to be a GridRowNode`);\n            if (currentRow !== lastRow) nodes.push(currentRow);\n            nodes.push(cell, ...$03df355ea183d08a$var$$getChildrenRecursively(cell));\n            lastRow = currentRow;\n        }\n        if (!$03df355ea183d08a$var$isCurrentlyReadOnlyMode()) this._cachedNodes = nodes;\n        return nodes;\n    }\n    getTextContent() {\n        const nodes = this.getNodes();\n        let textContent = \"\";\n        for(let i = 0; i < nodes.length; i++)textContent += nodes[i].getTextContent();\n        return textContent;\n    }\n    constructor(gridKey, anchor, focus){\n        this.gridKey = gridKey;\n        this.anchor = anchor;\n        this.focus = focus;\n        this.dirty = false;\n        this._cachedNodes = null;\n        anchor._selection = this;\n        focus._selection = this;\n    }\n}\nfunction $03df355ea183d08a$var$DEPRECATED_$isGridSelection(x) {\n    return x instanceof $03df355ea183d08a$var$GridSelection;\n}\nclass $03df355ea183d08a$var$RangeSelection {\n    is(selection) {\n        if (!$03df355ea183d08a$var$$isRangeSelection(selection)) return false;\n        return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n    }\n    isBackward() {\n        return this.focus.isBefore(this.anchor);\n    }\n    isCollapsed() {\n        return this.anchor.is(this.focus);\n    }\n    getNodes() {\n        const cachedNodes = this._cachedNodes;\n        if (cachedNodes !== null) return cachedNodes;\n        const anchor = this.anchor;\n        const focus = this.focus;\n        const isBefore = anchor.isBefore(focus);\n        const firstPoint = isBefore ? anchor : focus;\n        const lastPoint = isBefore ? focus : anchor;\n        let firstNode = firstPoint.getNode();\n        let lastNode = lastPoint.getNode();\n        const startOffset = firstPoint.offset;\n        const endOffset = lastPoint.offset;\n        if ($03df355ea183d08a$var$$isElementNode(firstNode)) {\n            const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n            firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n        }\n        if ($03df355ea183d08a$var$$isElementNode(lastNode)) {\n            let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset); // We don't want to over-select, as node selection infers the child before\n            // the last descendant, not including that descendant.\n            if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n            lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n        }\n        let nodes;\n        if (firstNode.is(lastNode)) {\n            if ($03df355ea183d08a$var$$isElementNode(firstNode) && firstNode.getChildrenSize() > 0) nodes = [];\n            else nodes = [\n                firstNode\n            ];\n        } else nodes = firstNode.getNodesBetween(lastNode);\n        if (!$03df355ea183d08a$var$isCurrentlyReadOnlyMode()) this._cachedNodes = nodes;\n        return nodes;\n    }\n    setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n        $03df355ea183d08a$var$$setPointValues(this.anchor, anchorNode.__key, anchorOffset, \"text\");\n        $03df355ea183d08a$var$$setPointValues(this.focus, focusNode.__key, focusOffset, \"text\");\n        this._cachedNodes = null;\n        this.dirty = true;\n    }\n    getTextContent() {\n        const nodes = this.getNodes();\n        if (nodes.length === 0) return \"\";\n        const firstNode = nodes[0];\n        const lastNode = nodes[nodes.length - 1];\n        const anchor = this.anchor;\n        const focus = this.focus;\n        const isBefore = anchor.isBefore(focus);\n        const [anchorOffset, focusOffset] = $03df355ea183d08a$var$getCharacterOffsets(this);\n        let textContent = \"\";\n        let prevWasElement = true;\n        for(let i = 0; i < nodes.length; i++){\n            const node = nodes[i];\n            if ($03df355ea183d08a$var$$isElementNode(node) && !node.isInline()) {\n                if (!prevWasElement) textContent += \"\\n\";\n                if (node.isEmpty()) prevWasElement = false;\n                else prevWasElement = true;\n            } else {\n                prevWasElement = false;\n                if ($03df355ea183d08a$var$$isTextNode(node)) {\n                    let text = node.getTextContent();\n                    if (node === firstNode) {\n                        if (node === lastNode) {\n                            if (anchor.type !== \"element\" || focus.type !== \"element\" || focus.offset === anchor.offset) text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n                        } else text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n                    } else if (node === lastNode) text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n                    textContent += text;\n                } else if (($03df355ea183d08a$var$$isDecoratorNode(node) || $03df355ea183d08a$var$$isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) textContent += node.getTextContent();\n            }\n        }\n        return textContent;\n    }\n    applyDOMRange(range) {\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        const currentEditorState = editor.getEditorState();\n        const lastSelection = currentEditorState._selection;\n        const resolvedSelectionPoints = $03df355ea183d08a$var$internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n        if (resolvedSelectionPoints === null) return;\n        const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n        $03df355ea183d08a$var$$setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n        $03df355ea183d08a$var$$setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n        this._cachedNodes = null;\n    }\n    clone() {\n        const anchor = this.anchor;\n        const focus = this.focus;\n        const selection = new $03df355ea183d08a$var$RangeSelection($03df355ea183d08a$var$$createPoint(anchor.key, anchor.offset, anchor.type), $03df355ea183d08a$var$$createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n        return selection;\n    }\n    toggleFormat(format) {\n        this.format = $03df355ea183d08a$var$toggleTextFormatType(this.format, format, null);\n        this.dirty = true;\n    }\n    setStyle(style) {\n        this.style = style;\n        this.dirty = true;\n    }\n    hasFormat(type) {\n        const formatFlag = $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[type];\n        return (this.format & formatFlag) !== 0;\n    }\n    insertRawText(text) {\n        const parts = text.split(/\\r?\\n/);\n        if (parts.length === 1) this.insertText(text);\n        else {\n            const nodes = [];\n            const length = parts.length;\n            for(let i = 0; i < length; i++){\n                const part = parts[i];\n                if (part !== \"\") nodes.push($03df355ea183d08a$var$$createTextNode(part));\n                if (i !== length - 1) nodes.push($03df355ea183d08a$var$$createLineBreakNode());\n            }\n            this.insertNodes(nodes);\n        }\n    }\n    insertText(text) {\n        const anchor = this.anchor;\n        const focus = this.focus;\n        const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n        const format = this.format;\n        const style = this.style;\n        if (isBefore && anchor.type === \"element\") $03df355ea183d08a$var$$transferStartingElementPointToTextPoint(anchor, focus, format, style);\n        else if (!isBefore && focus.type === \"element\") $03df355ea183d08a$var$$transferStartingElementPointToTextPoint(focus, anchor, format, style);\n        const selectedNodes = this.getNodes();\n        const selectedNodesLength = selectedNodes.length;\n        const firstPoint = isBefore ? anchor : focus;\n        const endPoint = isBefore ? focus : anchor;\n        const startOffset = firstPoint.offset;\n        const endOffset = endPoint.offset;\n        let firstNode = selectedNodes[0];\n        if (!$03df355ea183d08a$var$$isTextNode(firstNode)) throw Error(`insertText: first node is not a text node`);\n        const firstNodeText = firstNode.getTextContent();\n        const firstNodeTextLength = firstNodeText.length;\n        const firstNodeParent = firstNode.getParentOrThrow();\n        const lastIndex = selectedNodesLength - 1;\n        let lastNode = selectedNodes[lastIndex];\n        if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n            let nextSibling = firstNode.getNextSibling();\n            if (!$03df355ea183d08a$var$$isTextNode(nextSibling) || $03df355ea183d08a$var$$isTokenOrSegmented(nextSibling)) {\n                nextSibling = $03df355ea183d08a$var$$createTextNode();\n                nextSibling.setFormat(format);\n                if (!firstNodeParent.canInsertTextAfter()) firstNodeParent.insertAfter(nextSibling);\n                else firstNode.insertAfter(nextSibling);\n            }\n            nextSibling.select(0, 0);\n            firstNode = nextSibling;\n            if (text !== \"\") {\n                this.insertText(text);\n                return;\n            }\n        } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n            let prevSibling = firstNode.getPreviousSibling();\n            if (!$03df355ea183d08a$var$$isTextNode(prevSibling) || $03df355ea183d08a$var$$isTokenOrSegmented(prevSibling)) {\n                prevSibling = $03df355ea183d08a$var$$createTextNode();\n                prevSibling.setFormat(format);\n                if (!firstNodeParent.canInsertTextBefore()) firstNodeParent.insertBefore(prevSibling);\n                else firstNode.insertBefore(prevSibling);\n            }\n            prevSibling.select();\n            firstNode = prevSibling;\n            if (text !== \"\") {\n                this.insertText(text);\n                return;\n            }\n        } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n            const textNode = $03df355ea183d08a$var$$createTextNode(firstNode.getTextContent());\n            textNode.setFormat(format);\n            firstNode.replace(textNode);\n            firstNode = textNode;\n        } else if (!this.isCollapsed() && text !== \"\") {\n            // When the firstNode or lastNode parents are elements that\n            // do not allow text to be inserted before or after, we first\n            // clear the content. Then we normalize selection, then insert\n            // the new content.\n            const lastNodeParent = lastNode.getParent();\n            if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $03df355ea183d08a$var$$isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n                this.insertText(\"\");\n                $03df355ea183d08a$var$normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n                this.insertText(text);\n                return;\n            }\n        }\n        if (selectedNodesLength === 1) {\n            if (firstNode.isToken()) {\n                const textNode = $03df355ea183d08a$var$$createTextNode(text);\n                textNode.select();\n                firstNode.replace(textNode);\n                return;\n            }\n            const firstNodeFormat = firstNode.getFormat();\n            const firstNodeStyle = firstNode.getStyle();\n            if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n                if (firstNode.getTextContent() === \"\") {\n                    firstNode.setFormat(format);\n                    firstNode.setStyle(style);\n                } else {\n                    const textNode = $03df355ea183d08a$var$$createTextNode(text);\n                    textNode.setFormat(format);\n                    textNode.setStyle(style);\n                    textNode.select();\n                    if (startOffset === 0) firstNode.insertBefore(textNode, false);\n                    else {\n                        const [targetNode] = firstNode.splitText(startOffset);\n                        targetNode.insertAfter(textNode, false);\n                    } // When composing, we need to adjust the anchor offset so that\n                    // we correctly replace that right range.\n                    if (textNode.isComposing() && this.anchor.type === \"text\") this.anchor.offset -= text.length;\n                    return;\n                }\n            }\n            const delCount = endOffset - startOffset;\n            firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n            if (firstNode.getTextContent() === \"\") firstNode.remove();\n            else if (this.anchor.type === \"text\") {\n                if (firstNode.isComposing()) // When composing, we need to adjust the anchor offset so that\n                // we correctly replace that right range.\n                this.anchor.offset -= text.length;\n                else {\n                    this.format = firstNodeFormat;\n                    this.style = firstNodeStyle;\n                }\n            }\n        } else {\n            const markedNodeKeysForKeep = new Set([\n                ...firstNode.getParentKeys(),\n                ...lastNode.getParentKeys()\n            ]); // We have to get the parent elements before the next section,\n            // as in that section we might mutate the lastNode.\n            const firstElement = $03df355ea183d08a$var$$isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n            let lastElement = $03df355ea183d08a$var$$isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n            let lastElementChild = lastNode; // If the last element is inline, we should instead look at getting\n            // the nodes of its parent, rather than itself. This behavior will\n            // then better match how text node insertions work. We will need to\n            // also update the last element's child accordingly as we do this.\n            if (!firstElement.is(lastElement) && lastElement.isInline()) // Keep traversing till we have a non-inline element parent.\n            do {\n                lastElementChild = lastElement;\n                lastElement = lastElement.getParentOrThrow();\n            }while (lastElement.isInline());\n             // Handle mutations to the last node.\n            if (endPoint.type === \"text\" && (endOffset !== 0 || lastNode.getTextContent() === \"\") || endPoint.type === \"element\" && lastNode.getIndexWithinParent() < endOffset) {\n                if ($03df355ea183d08a$var$$isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n                    if (lastNode.isSegmented()) {\n                        const textNode = $03df355ea183d08a$var$$createTextNode(lastNode.getTextContent());\n                        lastNode.replace(textNode);\n                        lastNode = textNode;\n                    }\n                    lastNode = lastNode.spliceText(0, endOffset, \"\");\n                    markedNodeKeysForKeep.add(lastNode.__key);\n                } else {\n                    const lastNodeParent = lastNode.getParentOrThrow();\n                    if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) lastNodeParent.remove();\n                    else lastNode.remove();\n                }\n            } else markedNodeKeysForKeep.add(lastNode.__key);\n             // Either move the remaining nodes of the last parent to after\n            // the first child, or remove them entirely. If the last parent\n            // is the same as the first parent, this logic also works.\n            const lastNodeChildren = lastElement.getChildren();\n            const selectedNodesSet = new Set(selectedNodes);\n            const firstAndLastElementsAreEqual = firstElement.is(lastElement); // We choose a target to insert all nodes after. In the case of having\n            // and inline starting parent element with a starting node that has no\n            // siblings, we should insert after the starting parent element, otherwise\n            // we will incorrectly merge into the starting parent element.\n            // TODO: should we keep on traversing parents if we're inside another\n            // nested inline element?\n            const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n            for(let i = lastNodeChildren.length - 1; i >= 0; i--){\n                const lastNodeChild = lastNodeChildren[i];\n                if (lastNodeChild.is(firstNode) || $03df355ea183d08a$var$$isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) break;\n                if (lastNodeChild.isAttached()) {\n                    if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n                        if (!firstAndLastElementsAreEqual) insertionTarget.insertAfter(lastNodeChild, false);\n                    } else lastNodeChild.remove();\n                }\n            }\n            if (!firstAndLastElementsAreEqual) {\n                // Check if we have already moved out all the nodes of the\n                // last parent, and if so, traverse the parent tree and mark\n                // them all as being able to deleted too.\n                let parent = lastElement;\n                let lastRemovedParent = null;\n                while(parent !== null){\n                    const children = parent.getChildren();\n                    const childrenLength = children.length;\n                    if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n                        markedNodeKeysForKeep.delete(parent.__key);\n                        lastRemovedParent = parent;\n                    }\n                    parent = parent.getParent();\n                }\n            } // Ensure we do splicing after moving of nodes, as splicing\n            // can have side-effects (in the case of hashtags).\n            if (!firstNode.isToken()) {\n                firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n                if (firstNode.getTextContent() === \"\") firstNode.remove();\n                else if (firstNode.isComposing() && this.anchor.type === \"text\") // When composing, we need to adjust the anchor offset so that\n                // we correctly replace that right range.\n                this.anchor.offset -= text.length;\n            } else if (startOffset === firstNodeTextLength) firstNode.select();\n            else {\n                const textNode = $03df355ea183d08a$var$$createTextNode(text);\n                textNode.select();\n                firstNode.replace(textNode);\n            } // Remove all selected nodes that haven't already been removed.\n            for(let i = 1; i < selectedNodesLength; i++){\n                const selectedNode = selectedNodes[i];\n                const key = selectedNode.__key;\n                if (!markedNodeKeysForKeep.has(key)) selectedNode.remove();\n            }\n        }\n    }\n    removeText() {\n        this.insertText(\"\");\n    }\n    formatText(formatType) {\n        if (this.isCollapsed()) {\n            this.toggleFormat(formatType); // When changing format, we should stop composition\n            $03df355ea183d08a$var$$setCompositionKey(null);\n            return;\n        }\n        const selectedNodes = this.getNodes();\n        const selectedTextNodes = [];\n        for (const selectedNode of selectedNodes)if ($03df355ea183d08a$var$$isTextNode(selectedNode)) selectedTextNodes.push(selectedNode);\n        const selectedTextNodesLength = selectedTextNodes.length;\n        if (selectedTextNodesLength === 0) {\n            this.toggleFormat(formatType); // When changing format, we should stop composition\n            $03df355ea183d08a$var$$setCompositionKey(null);\n            return;\n        }\n        const anchor = this.anchor;\n        const focus = this.focus;\n        const isBackward = this.isBackward();\n        const startPoint = isBackward ? focus : anchor;\n        const endPoint = isBackward ? anchor : focus;\n        let firstIndex = 0;\n        let firstNode = selectedTextNodes[0];\n        let startOffset = startPoint.type === \"element\" ? 0 : startPoint.offset; // In case selection started at the end of text node use next text node\n        if (startPoint.type === \"text\" && startOffset === firstNode.getTextContentSize()) {\n            firstIndex = 1;\n            firstNode = selectedTextNodes[1];\n            startOffset = 0;\n        }\n        if (firstNode == null) return;\n        const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n        const lastIndex = selectedTextNodesLength - 1;\n        let lastNode = selectedTextNodes[lastIndex];\n        const endOffset = endPoint.type === \"text\" ? endPoint.offset : lastNode.getTextContentSize(); // Single node selected\n        if (firstNode.is(lastNode)) {\n            // No actual text is selected, so do nothing.\n            if (startOffset === endOffset) return;\n             // The entire node is selected, so just format it\n            if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) firstNode.setFormat(firstNextFormat);\n            else {\n                // Node is partially selected, so split it into two nodes\n                // add style the selected one.\n                const splitNodes = firstNode.splitText(startOffset, endOffset);\n                const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n                replacement.setFormat(firstNextFormat); // Update selection only if starts/ends on text node\n                if (startPoint.type === \"text\") startPoint.set(replacement.__key, 0, \"text\");\n                if (endPoint.type === \"text\") endPoint.set(replacement.__key, endOffset - startOffset, \"text\");\n            }\n            this.format = firstNextFormat;\n            return;\n        } // Multiple nodes selected\n        // The entire first node isn't selected, so split it\n        if (startOffset !== 0) {\n            [, firstNode] = firstNode.splitText(startOffset);\n            startOffset = 0;\n        }\n        firstNode.setFormat(firstNextFormat);\n        const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat); // If the offset is 0, it means no actual characters are selected,\n        // so we skip formatting the last node altogether.\n        if (endOffset > 0) {\n            if (endOffset !== lastNode.getTextContentSize()) [lastNode] = lastNode.splitText(endOffset);\n            lastNode.setFormat(lastNextFormat);\n        } // Process all text nodes in between\n        for(let i = firstIndex + 1; i < lastIndex; i++){\n            const textNode = selectedTextNodes[i];\n            if (!textNode.isToken()) {\n                const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n                textNode.setFormat(nextFormat);\n            }\n        } // Update selection only if starts/ends on text node\n        if (startPoint.type === \"text\") startPoint.set(firstNode.__key, startOffset, \"text\");\n        if (endPoint.type === \"text\") endPoint.set(lastNode.__key, endOffset, \"text\");\n        this.format = firstNextFormat | lastNextFormat;\n    }\n    insertNodes(nodes, selectStart) {\n        // If there is a range selected remove the text in it\n        if (!this.isCollapsed()) {\n            const selectionEnd = this.isBackward() ? this.anchor : this.focus;\n            const nextSibling = selectionEnd.getNode().getNextSibling();\n            const nextSiblingKey = nextSibling ? nextSibling.getKey() : null;\n            const prevSibling = selectionEnd.getNode().getPreviousSibling();\n            const prevSiblingKey = prevSibling ? prevSibling.getKey() : null;\n            this.removeText(); // If the selection has been moved to an adjacent inline element, create\n            // a temporary text node that we can insert the nodes after.\n            if (this.isCollapsed() && this.focus.type === \"element\") {\n                let textNode;\n                if (this.focus.key === nextSiblingKey && this.focus.offset === 0) {\n                    textNode = $03df355ea183d08a$var$$createTextNode();\n                    this.focus.getNode().insertBefore(textNode);\n                } else if (this.focus.key === prevSiblingKey && this.focus.offset === this.focus.getNode().getChildrenSize()) {\n                    textNode = $03df355ea183d08a$var$$createTextNode();\n                    this.focus.getNode().insertAfter(textNode);\n                }\n                if (textNode) {\n                    this.focus.set(textNode.__key, 0, \"text\");\n                    this.anchor.set(textNode.__key, 0, \"text\");\n                }\n            }\n        }\n        const anchor = this.anchor;\n        const anchorOffset = anchor.offset;\n        const anchorNode = anchor.getNode();\n        let target = anchorNode;\n        if (anchor.type === \"element\") {\n            const element = anchor.getNode();\n            const placementNode = element.getChildAtIndex(anchorOffset - 1);\n            if (placementNode === null) target = element;\n            else target = placementNode;\n        }\n        const siblings = []; // Get all remaining text node siblings in this element so we can\n        // append them after the last node we're inserting.\n        const nextSiblings = anchorNode.getNextSiblings();\n        const topLevelElement = $03df355ea183d08a$var$$isRootOrShadowRoot(anchorNode) ? null : anchorNode.getTopLevelElementOrThrow();\n        if ($03df355ea183d08a$var$$isTextNode(anchorNode)) {\n            const textContent = anchorNode.getTextContent();\n            const textContentLength = textContent.length;\n            if (anchorOffset === 0 && textContentLength !== 0) {\n                const prevSibling = anchorNode.getPreviousSibling();\n                if (prevSibling !== null) target = prevSibling;\n                else target = anchorNode.getParentOrThrow();\n                siblings.push(anchorNode);\n            } else if (anchorOffset === textContentLength) target = anchorNode;\n            else if (anchorNode.isToken()) // Do nothing if we're inside a token node\n            return false;\n            else {\n                // If we started with a range selected grab the danglingText after the\n                // end of the selection and put it on our siblings array so we can\n                // append it after the last node we're inserting\n                let danglingText;\n                [target, danglingText] = anchorNode.splitText(anchorOffset);\n                siblings.push(danglingText);\n            }\n        }\n        const startingNode = target;\n        siblings.push(...nextSiblings);\n        const firstNode = nodes[0];\n        let didReplaceOrMerge = false;\n        let lastNode = null; // Time to insert the nodes!\n        for(let i = 0; i < nodes.length; i++){\n            const node = nodes[i];\n            if (!$03df355ea183d08a$var$$isRootOrShadowRoot(target) && !$03df355ea183d08a$var$$isDecoratorNode(target) && $03df355ea183d08a$var$$isElementNode(node) && !node.isInline()) {\n                // -----\n                // Heuristics for the replacement or merging of elements\n                // -----\n                // If we have an incoming element node as the first node, then we'll need\n                // see if we can merge any descendant leaf nodes into our existing target.\n                // We can do this by finding the first descendant in our node and then we can\n                // pluck it and its parent (siblings included) out and insert them directly\n                // into our target. We only do this for the first node, as we are only\n                // interested in merging with the anchor, which is our target.\n                //\n                // If we apply either the replacement or merging heuristics, we need to be\n                // careful that we're not trying to insert a non-element node into a root node,\n                // so we check if the target's parent after this logic is the root node and if\n                // so we trigger an invariant to ensure this problem is caught in development\n                // and fixed accordingly.\n                if (node.is(firstNode)) {\n                    if ($03df355ea183d08a$var$$isElementNode(target) && target.isEmpty() && target.canReplaceWith(node)) {\n                        target.replace(node);\n                        target = node;\n                        didReplaceOrMerge = true;\n                        continue;\n                    } // We may have a node tree where there are many levels, for example with\n                    // lists and tables. So let's find the first descendant to try and merge\n                    // with. So if we have the target:\n                    //\n                    // Paragraph (1)\n                    //   Text (2)\n                    //\n                    // and we are trying to insert:\n                    //\n                    // ListNode (3)\n                    //   ListItemNode (4)\n                    //     Text (5)\n                    //   ListItemNode (6)\n                    //\n                    // The result would be:\n                    //\n                    // Paragraph (1)\n                    //   Text (2)\n                    //   Text (5)\n                    //\n                    const firstDescendant = node.getFirstDescendant();\n                    if ($03df355ea183d08a$var$$isLeafNode(firstDescendant)) {\n                        let element = firstDescendant.getParentOrThrow();\n                        while(element.isInline())element = element.getParentOrThrow();\n                        const children = element.getChildren();\n                        const childrenLength = children.length;\n                        if ($03df355ea183d08a$var$$isElementNode(target)) {\n                            let firstChild = target.getFirstChild();\n                            for(let s = 0; s < childrenLength; s++){\n                                const child = children[s];\n                                if (firstChild === null) target.append(child);\n                                else firstChild.insertAfter(child);\n                                firstChild = child;\n                            }\n                        } else {\n                            for(let s = childrenLength - 1; s >= 0; s--)target.insertAfter(children[s]);\n                            target = target.getParentOrThrow();\n                        }\n                        lastNode = children[childrenLength - 1];\n                        element.remove();\n                        didReplaceOrMerge = true;\n                        if (element.is(node)) continue;\n                    }\n                }\n                if ($03df355ea183d08a$var$$isTextNode(target)) {\n                    if (topLevelElement === null) throw Error(`insertNode: topLevelElement is root node`);\n                    target = topLevelElement;\n                }\n            } else if (didReplaceOrMerge && !$03df355ea183d08a$var$$isDecoratorNode(node) && $03df355ea183d08a$var$$isRootOrShadowRoot(target.getParent())) throw Error(`insertNodes: cannot insert a non-element into a root node`);\n            didReplaceOrMerge = false;\n            if ($03df355ea183d08a$var$$isElementNode(target) && !target.isInline()) {\n                lastNode = node;\n                if ($03df355ea183d08a$var$$isDecoratorNode(node) && !node.isInline()) target = target.insertAfter(node, false);\n                else if (!$03df355ea183d08a$var$$isElementNode(node)) {\n                    const firstChild = target.getFirstChild();\n                    if (firstChild !== null) firstChild.insertBefore(node);\n                    else target.append(node);\n                    target = node;\n                } else {\n                    if (!node.canBeEmpty() && node.isEmpty()) continue;\n                    if ($03df355ea183d08a$var$$isRootNode(target)) {\n                        const placementNode = target.getChildAtIndex(anchorOffset);\n                        if (placementNode !== null) placementNode.insertBefore(node);\n                        else target.append(node);\n                        target = node;\n                    } else if (node.isInline()) {\n                        target.append(node);\n                        target = node;\n                    } else target = target.insertAfter(node, false);\n                }\n            } else if (!$03df355ea183d08a$var$$isElementNode(node) || $03df355ea183d08a$var$$isElementNode(node) && node.isInline() || $03df355ea183d08a$var$$isDecoratorNode(target) && !target.isInline()) {\n                lastNode = node; // when pasting top level node in the middle of paragraph\n                // we need to split paragraph instead of placing it inline\n                if ($03df355ea183d08a$var$$isRangeSelection(this) && $03df355ea183d08a$var$$isDecoratorNode(node) && ($03df355ea183d08a$var$$isElementNode(target) || $03df355ea183d08a$var$$isTextNode(target)) && !node.isInline()) {\n                    let splitNode;\n                    let splitOffset;\n                    if ($03df355ea183d08a$var$$isTextNode(target)) {\n                        splitNode = target.getParentOrThrow();\n                        const [textNode] = target.splitText(anchorOffset);\n                        splitOffset = textNode.getIndexWithinParent() + 1;\n                    } else {\n                        splitNode = target;\n                        splitOffset = anchorOffset;\n                    }\n                    const [, rightTree] = $03df355ea183d08a$var$$splitNode(splitNode, splitOffset);\n                    target = rightTree.insertBefore(node);\n                } else target = target.insertAfter(node, false);\n            } else {\n                const nextTarget = target.getParentOrThrow(); // if we're inserting an Element after a LineBreak, we want to move the target to the parent\n                // and remove the LineBreak so we don't have empty space.\n                if ($03df355ea183d08a$var$$isLineBreakNode(target)) target.remove();\n                target = nextTarget; // Re-try again with the target being the parent\n                i--;\n                continue;\n            }\n        }\n        if (selectStart) {\n            // Handle moving selection to start for all nodes\n            if ($03df355ea183d08a$var$$isTextNode(startingNode)) startingNode.select();\n            else {\n                const prevSibling = target.getPreviousSibling();\n                if ($03df355ea183d08a$var$$isTextNode(prevSibling)) prevSibling.select();\n                else {\n                    const index = target.getIndexWithinParent();\n                    target.getParentOrThrow().select(index, index);\n                }\n            }\n        }\n        if ($03df355ea183d08a$var$$isElementNode(target)) {\n            // If the last node to be inserted was a text node,\n            // then we should attempt to move selection to that.\n            const lastChild = $03df355ea183d08a$var$$isTextNode(lastNode) ? lastNode : $03df355ea183d08a$var$$isElementNode(lastNode) && lastNode.isInline() ? lastNode.getLastDescendant() : target.getLastDescendant();\n            if (!selectStart) {\n                // Handle moving selection to end for elements\n                if (lastChild === null) target.select();\n                else if ($03df355ea183d08a$var$$isTextNode(lastChild)) {\n                    if (lastChild.getTextContent() === \"\") lastChild.selectPrevious();\n                    else lastChild.select();\n                } else lastChild.selectNext();\n            }\n            if (siblings.length !== 0) {\n                const originalTarget = target;\n                for(let i = siblings.length - 1; i >= 0; i--){\n                    const sibling = siblings[i];\n                    const prevParent = sibling.getParentOrThrow();\n                    if ($03df355ea183d08a$var$$isElementNode(target) && !$03df355ea183d08a$var$$isBlockElementNode(sibling) && !($03df355ea183d08a$var$$isDecoratorNode(sibling) && (!sibling.isInline() || sibling.isIsolated()))) {\n                        if (originalTarget === target) target.append(sibling);\n                        else target.insertBefore(sibling);\n                        target = sibling;\n                    } else if (!$03df355ea183d08a$var$$isElementNode(target) && !$03df355ea183d08a$var$$isBlockElementNode(sibling)) {\n                        target.insertBefore(sibling);\n                        target = sibling;\n                    } else if ($03df355ea183d08a$var$$isElementNode(sibling) && !sibling.canInsertAfter(target)) {\n                        // @ts-ignore The clone method does exist on the constructor.\n                        const prevParentClone = prevParent.constructor.clone(prevParent);\n                        if (!$03df355ea183d08a$var$$isElementNode(prevParentClone)) throw Error(`insertNodes: cloned parent clone is not an element`);\n                        prevParentClone.append(sibling);\n                        target.insertAfter(prevParentClone);\n                    } else target.insertAfter(sibling);\n                     // Check if the prev parent is empty, as it might need\n                    // removing.\n                    if (prevParent.isEmpty() && !prevParent.canBeEmpty()) prevParent.remove();\n                }\n            }\n        } else if (!selectStart) {\n            // Handle moving selection to end for other nodes\n            if ($03df355ea183d08a$var$$isTextNode(target)) target.select();\n            else {\n                const element = target.getParentOrThrow();\n                const index = target.getIndexWithinParent() + 1;\n                element.select(index, index);\n            }\n        }\n        return true;\n    }\n    insertParagraph() {\n        if (!this.isCollapsed()) this.removeText();\n        const anchor = this.anchor;\n        const anchorOffset = anchor.offset;\n        let currentElement;\n        let nodesToMove = [];\n        let siblingsToMove = [];\n        if (anchor.type === \"text\") {\n            const anchorNode = anchor.getNode();\n            nodesToMove = anchorNode.getNextSiblings().reverse();\n            currentElement = anchorNode.getParentOrThrow();\n            const isInline = currentElement.isInline();\n            const textContentLength = isInline ? currentElement.getTextContentSize() : anchorNode.getTextContentSize();\n            if (anchorOffset === 0) nodesToMove.push(anchorNode);\n            else {\n                if (isInline) // For inline nodes, we want to move all the siblings to the new paragraph\n                // if selection is at the end, we just move the siblings. Otherwise, we also\n                // split the text node and add that and it's siblings below.\n                siblingsToMove = currentElement.getNextSiblings();\n                if (anchorOffset !== textContentLength) {\n                    if (!isInline || anchorOffset !== anchorNode.getTextContentSize()) {\n                        const [, splitNode] = anchorNode.splitText(anchorOffset);\n                        nodesToMove.push(splitNode);\n                    }\n                }\n            }\n        } else {\n            currentElement = anchor.getNode();\n            if ($03df355ea183d08a$var$$isRootOrShadowRoot(currentElement)) {\n                const paragraph = $03df355ea183d08a$var$$createParagraphNode();\n                const child = currentElement.getChildAtIndex(anchorOffset);\n                paragraph.select();\n                if (child !== null) child.insertBefore(paragraph, false);\n                else currentElement.append(paragraph);\n                return;\n            }\n            nodesToMove = currentElement.getChildren().slice(anchorOffset).reverse();\n        }\n        const nodesToMoveLength = nodesToMove.length;\n        if (anchorOffset === 0 && nodesToMoveLength > 0 && currentElement.isInline()) {\n            const parent = currentElement.getParentOrThrow();\n            const newElement = parent.insertNewAfter(this, false);\n            if ($03df355ea183d08a$var$$isElementNode(newElement)) {\n                const children = parent.getChildren();\n                for(let i = 0; i < children.length; i++)newElement.append(children[i]);\n            }\n            return;\n        }\n        const newElement = currentElement.insertNewAfter(this, false);\n        if (newElement === null) // Handle as a line break insertion\n        this.insertLineBreak();\n        else if ($03df355ea183d08a$var$$isElementNode(newElement)) {\n            // If we're at the beginning of the current element, move the new element to be before the current element\n            const currentElementFirstChild = currentElement.getFirstChild();\n            const isBeginning = anchorOffset === 0 && (currentElement.is(anchor.getNode()) || currentElementFirstChild && currentElementFirstChild.is(anchor.getNode()));\n            if (isBeginning && nodesToMoveLength > 0) {\n                currentElement.insertBefore(newElement);\n                return;\n            }\n            let firstChild = null;\n            const siblingsToMoveLength = siblingsToMove.length;\n            const parent = newElement.getParentOrThrow(); // For inline elements, we append the siblings to the parent.\n            if (siblingsToMoveLength > 0) for(let i = 0; i < siblingsToMoveLength; i++){\n                const siblingToMove = siblingsToMove[i];\n                parent.append(siblingToMove);\n            }\n            if (nodesToMoveLength !== 0) for(let i = 0; i < nodesToMoveLength; i++){\n                const nodeToMove = nodesToMove[i];\n                if (firstChild === null) newElement.append(nodeToMove);\n                else firstChild.insertBefore(nodeToMove);\n                firstChild = nodeToMove;\n            }\n            if (!newElement.canBeEmpty() && newElement.getChildrenSize() === 0) {\n                newElement.selectPrevious();\n                newElement.remove();\n            } else newElement.selectStart();\n        }\n    }\n    insertLineBreak(selectStart) {\n        const lineBreakNode = $03df355ea183d08a$var$$createLineBreakNode();\n        const anchor = this.anchor;\n        if (anchor.type === \"element\") {\n            const element = anchor.getNode();\n            if ($03df355ea183d08a$var$$isRootNode(element)) this.insertParagraph();\n        }\n        if (selectStart) this.insertNodes([\n            lineBreakNode\n        ], true);\n        else if (this.insertNodes([\n            lineBreakNode\n        ])) lineBreakNode.selectNext(0, 0);\n    }\n    getCharacterOffsets() {\n        return $03df355ea183d08a$var$getCharacterOffsets(this);\n    }\n    extract() {\n        const selectedNodes = this.getNodes();\n        const selectedNodesLength = selectedNodes.length;\n        const lastIndex = selectedNodesLength - 1;\n        const anchor = this.anchor;\n        const focus = this.focus;\n        let firstNode = selectedNodes[0];\n        let lastNode = selectedNodes[lastIndex];\n        const [anchorOffset, focusOffset] = $03df355ea183d08a$var$getCharacterOffsets(this);\n        if (selectedNodesLength === 0) return [];\n        else if (selectedNodesLength === 1) {\n            if ($03df355ea183d08a$var$$isTextNode(firstNode) && !this.isCollapsed()) {\n                const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n                const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n                const splitNodes = firstNode.splitText(startOffset, endOffset);\n                const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n                return node != null ? [\n                    node\n                ] : [];\n            }\n            return [\n                firstNode\n            ];\n        }\n        const isBefore = anchor.isBefore(focus);\n        if ($03df355ea183d08a$var$$isTextNode(firstNode)) {\n            const startOffset = isBefore ? anchorOffset : focusOffset;\n            if (startOffset === firstNode.getTextContentSize()) selectedNodes.shift();\n            else if (startOffset !== 0) {\n                [, firstNode] = firstNode.splitText(startOffset);\n                selectedNodes[0] = firstNode;\n            }\n        }\n        if ($03df355ea183d08a$var$$isTextNode(lastNode)) {\n            const lastNodeText = lastNode.getTextContent();\n            const lastNodeTextLength = lastNodeText.length;\n            const endOffset = isBefore ? focusOffset : anchorOffset;\n            if (endOffset === 0) selectedNodes.pop();\n            else if (endOffset !== lastNodeTextLength) {\n                [lastNode] = lastNode.splitText(endOffset);\n                selectedNodes[lastIndex] = lastNode;\n            }\n        }\n        return selectedNodes;\n    }\n    modify(alter, isBackward, granularity) {\n        const focus = this.focus;\n        const anchor = this.anchor;\n        const collapse = alter === \"move\"; // Handle the selection movement around decorators.\n        const possibleNode = $03df355ea183d08a$var$$getAdjacentNode(focus, isBackward);\n        if ($03df355ea183d08a$var$$isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n            // Make it possible to move selection from range selection to\n            // node selection on the node.\n            if (collapse && possibleNode.isKeyboardSelectable()) {\n                const nodeSelection = $03df355ea183d08a$var$$createNodeSelection();\n                nodeSelection.add(possibleNode.__key);\n                $03df355ea183d08a$var$$setSelection(nodeSelection);\n                return;\n            }\n            const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n            if (!$03df355ea183d08a$var$$isTextNode(sibling)) {\n                const parent = possibleNode.getParentOrThrow();\n                let offset;\n                let elementKey;\n                if ($03df355ea183d08a$var$$isElementNode(sibling)) {\n                    elementKey = sibling.__key;\n                    offset = isBackward ? sibling.getChildrenSize() : 0;\n                } else {\n                    offset = possibleNode.getIndexWithinParent();\n                    elementKey = parent.__key;\n                    if (!isBackward) offset++;\n                }\n                focus.set(elementKey, offset, \"element\");\n                if (collapse) anchor.set(elementKey, offset, \"element\");\n                return;\n            } else {\n                const siblingKey = sibling.__key;\n                const offset = isBackward ? sibling.getTextContent().length : 0;\n                focus.set(siblingKey, offset, \"text\");\n                if (collapse) anchor.set(siblingKey, offset, \"text\");\n                return;\n            }\n        }\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n        if (!domSelection) return;\n        const blockCursorElement = editor._blockCursorElement;\n        const rootElement = editor._rootElement; // Remove the block cursor element if it exists. This will ensure selection\n        // works as intended. If we leave it in the DOM all sorts of strange bugs\n        // occur. :/\n        if (rootElement !== null && blockCursorElement !== null && $03df355ea183d08a$var$$isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) $03df355ea183d08a$var$removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n         // We use the DOM selection.modify API here to \"tell\" us what the selection\n        // will be. We then use it to update the Lexical selection accordingly. This\n        // is much more reliable than waiting for a beforeinput and using the ranges\n        // from getTargetRanges(), and is also better than trying to do it ourselves\n        // using Intl.Segmenter or other workarounds that struggle with word segments\n        // and line segments (especially with word wrapping and non-Roman languages).\n        $03df355ea183d08a$var$moveNativeSelection(domSelection, alter, isBackward ? \"backward\" : \"forward\", granularity); // Guard against no ranges\n        if (domSelection.rangeCount > 0) {\n            const range = domSelection.getRangeAt(0); // Apply the DOM selection to our Lexical selection.\n            const anchorNode = this.anchor.getNode();\n            const root = $03df355ea183d08a$var$$isRootNode(anchorNode) ? anchorNode : $03df355ea183d08a$var$$getNearestRootOrShadowRoot(anchorNode);\n            this.applyDOMRange(range);\n            this.dirty = true;\n            if (!collapse) {\n                // Validate selection; make sure that the new extended selection respects shadow roots\n                const nodes = this.getNodes();\n                const validNodes = [];\n                let shrinkSelection = false;\n                for(let i = 0; i < nodes.length; i++){\n                    const nextNode = nodes[i];\n                    if ($03df355ea183d08a$var$$hasAncestor(nextNode, root)) validNodes.push(nextNode);\n                    else shrinkSelection = true;\n                }\n                if (shrinkSelection && validNodes.length > 0) {\n                    // validNodes length check is a safeguard against an invalid selection; as getNodes()\n                    // will return an empty array in this case\n                    if (isBackward) {\n                        const firstValidNode = validNodes[0];\n                        if ($03df355ea183d08a$var$$isElementNode(firstValidNode)) firstValidNode.selectStart();\n                        else firstValidNode.getParentOrThrow().selectStart();\n                    } else {\n                        const lastValidNode = validNodes[validNodes.length - 1];\n                        if ($03df355ea183d08a$var$$isElementNode(lastValidNode)) lastValidNode.selectEnd();\n                        else lastValidNode.getParentOrThrow().selectEnd();\n                    }\n                } // Because a range works on start and end, we might need to flip\n                // the anchor and focus points to match what the DOM has, not what\n                // the range has specifically.\n                if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) $03df355ea183d08a$var$$swapPoints(this);\n            }\n        }\n    }\n    deleteCharacter(isBackward) {\n        if (this.isCollapsed()) {\n            const anchor = this.anchor;\n            const focus = this.focus;\n            let anchorNode = anchor.getNode();\n            if (!isBackward && (anchor.type === \"element\" && $03df355ea183d08a$var$$isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === \"text\" && anchor.offset === anchorNode.getTextContentSize())) {\n                const parent = anchorNode.getParent();\n                const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n                if ($03df355ea183d08a$var$$isElementNode(nextSibling) && !nextSibling.canExtractContents()) return;\n            } // Handle the deletion around decorators.\n            const possibleNode = $03df355ea183d08a$var$$getAdjacentNode(focus, isBackward);\n            if ($03df355ea183d08a$var$$isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n                // Make it possible to move selection from range selection to\n                // node selection on the node.\n                if (possibleNode.isKeyboardSelectable() && $03df355ea183d08a$var$$isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n                    anchorNode.remove();\n                    const nodeSelection = $03df355ea183d08a$var$$createNodeSelection();\n                    nodeSelection.add(possibleNode.__key);\n                    $03df355ea183d08a$var$$setSelection(nodeSelection);\n                } else possibleNode.remove();\n                return;\n            }\n            this.modify(\"extend\", isBackward, \"character\");\n            if (!this.isCollapsed()) {\n                const focusNode = focus.type === \"text\" ? focus.getNode() : null;\n                anchorNode = anchor.type === \"text\" ? anchor.getNode() : null;\n                if (focusNode !== null && focusNode.isSegmented()) {\n                    const offset = focus.offset;\n                    const textContentSize = focusNode.getTextContentSize();\n                    if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n                        $03df355ea183d08a$var$$removeSegment(focusNode, isBackward, offset);\n                        return;\n                    }\n                } else if (anchorNode !== null && anchorNode.isSegmented()) {\n                    const offset = anchor.offset;\n                    const textContentSize = anchorNode.getTextContentSize();\n                    if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n                        $03df355ea183d08a$var$$removeSegment(anchorNode, isBackward, offset);\n                        return;\n                    }\n                }\n                $03df355ea183d08a$var$$updateCaretSelectionForUnicodeCharacter(this, isBackward);\n            } else if (isBackward && anchor.offset === 0) {\n                // Special handling around rich text nodes\n                const element = anchor.type === \"element\" ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n                if (element.collapseAtStart(this)) return;\n            }\n        }\n        const wasCollapsed = this.isCollapsed();\n        this.removeText();\n        if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === \"element\" && this.anchor.offset === 0) {\n            const anchorNode = this.anchor.getNode();\n            if (anchorNode.isEmpty() && $03df355ea183d08a$var$$isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) anchorNode.collapseAtStart(this);\n        }\n    }\n    deleteLine(isBackward) {\n        if (this.isCollapsed()) {\n            if (this.anchor.type === \"text\") this.modify(\"extend\", isBackward, \"lineboundary\");\n             // If selection is extended to cover text edge then extend it one character more\n            // to delete its parent element. Otherwise text content will be deleted but empty\n            // parent node will remain\n            const endPoint = isBackward ? this.focus : this.anchor;\n            if (endPoint.offset === 0) this.modify(\"extend\", isBackward, \"character\");\n        }\n        this.removeText();\n    }\n    deleteWord(isBackward) {\n        if (this.isCollapsed()) this.modify(\"extend\", isBackward, \"word\");\n        this.removeText();\n    }\n    constructor(anchor, focus, format, style){\n        this.anchor = anchor;\n        this.focus = focus;\n        this.dirty = false;\n        this.format = format;\n        this.style = style;\n        this._cachedNodes = null;\n        anchor._selection = this;\n        focus._selection = this;\n    }\n}\nfunction $03df355ea183d08a$var$$isNodeSelection(x) {\n    return x instanceof $03df355ea183d08a$var$NodeSelection;\n}\nfunction $03df355ea183d08a$var$getCharacterOffset(point) {\n    const offset = point.offset;\n    if (point.type === \"text\") return offset;\n    const parent = point.getNode();\n    return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $03df355ea183d08a$var$getCharacterOffsets(selection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.type === \"element\" && focus.type === \"element\" && anchor.key === focus.key && anchor.offset === focus.offset) return [\n        0,\n        0\n    ];\n    return [\n        $03df355ea183d08a$var$getCharacterOffset(anchor),\n        $03df355ea183d08a$var$getCharacterOffset(focus)\n    ];\n}\nfunction $03df355ea183d08a$var$$swapPoints(selection) {\n    const focus = selection.focus;\n    const anchor = selection.anchor;\n    const anchorKey = anchor.key;\n    const anchorOffset = anchor.offset;\n    const anchorType = anchor.type;\n    $03df355ea183d08a$var$$setPointValues(anchor, focus.key, focus.offset, focus.type);\n    $03df355ea183d08a$var$$setPointValues(focus, anchorKey, anchorOffset, anchorType);\n    selection._cachedNodes = null;\n}\nfunction $03df355ea183d08a$var$moveNativeSelection(domSelection, alter, direction, granularity) {\n    // @ts-expect-error Selection.modify() method applies a change to the current selection or cursor position,\n    // but is still non-standard in some browsers.\n    domSelection.modify(alter, direction, granularity);\n}\nfunction $03df355ea183d08a$var$$updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (anchorNode === focusNode && anchor.type === \"text\" && focus.type === \"text\") {\n        // Handling of multibyte characters\n        const anchorOffset = anchor.offset;\n        const focusOffset = focus.offset;\n        const isBefore = anchorOffset < focusOffset;\n        const startOffset = isBefore ? anchorOffset : focusOffset;\n        const endOffset = isBefore ? focusOffset : anchorOffset;\n        const characterOffset = endOffset - 1;\n        if (startOffset !== characterOffset) {\n            const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n            if (!$03df355ea183d08a$var$doesContainGrapheme(text)) {\n                if (isBackward) focus.offset = characterOffset;\n                else anchor.offset = characterOffset;\n            }\n        }\n    }\n}\nfunction $03df355ea183d08a$var$$removeSegment(node, isBackward, offset) {\n    const textNode = node;\n    const textContent = textNode.getTextContent();\n    const split = textContent.split(/(?=\\s)/g);\n    const splitLength = split.length;\n    let segmentOffset = 0;\n    let restoreOffset = 0;\n    for(let i = 0; i < splitLength; i++){\n        const text = split[i];\n        const isLast = i === splitLength - 1;\n        restoreOffset = segmentOffset;\n        segmentOffset += text.length;\n        if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n            split.splice(i, 1);\n            if (isLast) restoreOffset = undefined;\n            break;\n        }\n    }\n    const nextTextContent = split.join(\"\").trim();\n    if (nextTextContent === \"\") textNode.remove();\n    else {\n        textNode.setTextContent(nextTextContent);\n        textNode.select(restoreOffset, restoreOffset);\n    }\n}\nfunction $03df355ea183d08a$var$shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n    const parent = resolvedElement.getParent();\n    return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $03df355ea183d08a$var$internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n    let resolvedOffset = offset;\n    let resolvedNode; // If we have selection on an element, we will\n    // need to figure out (using the offset) what text\n    // node should be selected.\n    if (dom.nodeType === $03df355ea183d08a$var$DOM_ELEMENT_TYPE) {\n        // Resolve element to a ElementNode, or TextNode, or null\n        let moveSelectionToEnd = false; // Given we're moving selection to another node, selection is\n        // definitely dirty.\n        // We use the anchor to find which child node to select\n        const childNodes = dom.childNodes;\n        const childNodesLength = childNodes.length; // If the anchor is the same as length, then this means we\n        // need to select the very last text node.\n        if (resolvedOffset === childNodesLength) {\n            moveSelectionToEnd = true;\n            resolvedOffset = childNodesLength - 1;\n        }\n        let childDOM = childNodes[resolvedOffset];\n        let hasBlockCursor = false;\n        if (childDOM === editor._blockCursorElement) {\n            childDOM = childNodes[resolvedOffset + 1];\n            hasBlockCursor = true;\n        } else if (editor._blockCursorElement !== null) resolvedOffset--;\n        resolvedNode = $03df355ea183d08a$var$getNodeFromDOM(childDOM);\n        if ($03df355ea183d08a$var$$isTextNode(resolvedNode)) resolvedOffset = $03df355ea183d08a$var$getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n        else {\n            let resolvedElement = $03df355ea183d08a$var$getNodeFromDOM(dom); // Ensure resolvedElement is actually a element.\n            if (resolvedElement === null) return null;\n            if ($03df355ea183d08a$var$$isElementNode(resolvedElement)) {\n                let child = resolvedElement.getChildAtIndex(resolvedOffset);\n                if ($03df355ea183d08a$var$$isElementNode(child) && $03df355ea183d08a$var$shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n                    const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n                    if (descendant === null) {\n                        resolvedElement = child;\n                        resolvedOffset = 0;\n                    } else {\n                        child = descendant;\n                        resolvedElement = $03df355ea183d08a$var$$isElementNode(child) ? child : child.getParentOrThrow();\n                    }\n                }\n                if ($03df355ea183d08a$var$$isTextNode(child)) {\n                    resolvedNode = child;\n                    resolvedElement = null;\n                    resolvedOffset = $03df355ea183d08a$var$getTextNodeOffset(child, moveSelectionToEnd);\n                } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) resolvedOffset++;\n            } else {\n                const index = resolvedElement.getIndexWithinParent(); // When selecting decorators, there can be some selection issues when using resolvedOffset,\n                // and instead we should be checking if we're using the offset\n                if (offset === 0 && $03df355ea183d08a$var$$isDecoratorNode(resolvedElement) && $03df355ea183d08a$var$getNodeFromDOM(dom) === resolvedElement) resolvedOffset = index;\n                else resolvedOffset = index + 1;\n                resolvedElement = resolvedElement.getParentOrThrow();\n            }\n            if ($03df355ea183d08a$var$$isElementNode(resolvedElement)) return $03df355ea183d08a$var$$createPoint(resolvedElement.__key, resolvedOffset, \"element\");\n        }\n    } else // TextNode or null\n    resolvedNode = $03df355ea183d08a$var$getNodeFromDOM(dom);\n    if (!$03df355ea183d08a$var$$isTextNode(resolvedNode)) return null;\n    return $03df355ea183d08a$var$$createPoint(resolvedNode.__key, resolvedOffset, \"text\");\n}\nfunction $03df355ea183d08a$var$resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n    const offset = point.offset;\n    const node = point.getNode();\n    if (offset === 0) {\n        const prevSibling = node.getPreviousSibling();\n        const parent = node.getParent();\n        if (!isBackward) {\n            if ($03df355ea183d08a$var$$isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n                point.key = prevSibling.__key;\n                point.offset = prevSibling.getChildrenSize(); // @ts-expect-error: intentional\n                point.type = \"element\";\n            } else if ($03df355ea183d08a$var$$isTextNode(prevSibling)) {\n                point.key = prevSibling.__key;\n                point.offset = prevSibling.getTextContent().length;\n            }\n        } else if ((isCollapsed || !isBackward) && prevSibling === null && $03df355ea183d08a$var$$isElementNode(parent) && parent.isInline()) {\n            const parentSibling = parent.getPreviousSibling();\n            if ($03df355ea183d08a$var$$isTextNode(parentSibling)) {\n                point.key = parentSibling.__key;\n                point.offset = parentSibling.getTextContent().length;\n            }\n        }\n    } else if (offset === node.getTextContent().length) {\n        const nextSibling = node.getNextSibling();\n        const parent = node.getParent();\n        if (isBackward && $03df355ea183d08a$var$$isElementNode(nextSibling) && nextSibling.isInline()) {\n            point.key = nextSibling.__key;\n            point.offset = 0; // @ts-expect-error: intentional\n            point.type = \"element\";\n        } else if ((isCollapsed || isBackward) && nextSibling === null && $03df355ea183d08a$var$$isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n            const parentSibling = parent.getNextSibling();\n            if ($03df355ea183d08a$var$$isTextNode(parentSibling)) {\n                point.key = parentSibling.__key;\n                point.offset = 0;\n            }\n        }\n    }\n}\nfunction $03df355ea183d08a$var$normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n    if (anchor.type === \"text\" && focus.type === \"text\") {\n        const isBackward = anchor.isBefore(focus);\n        const isCollapsed = anchor.is(focus); // Attempt to normalize the offset to the previous sibling if we're at the\n        // start of a text node and the sibling is a text node or inline element.\n        $03df355ea183d08a$var$resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n        $03df355ea183d08a$var$resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n        if (isCollapsed) {\n            focus.key = anchor.key;\n            focus.offset = anchor.offset;\n            focus.type = anchor.type;\n        }\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        if (editor.isComposing() && editor._compositionKey !== anchor.key && $03df355ea183d08a$var$$isRangeSelection(lastSelection)) {\n            const lastAnchor = lastSelection.anchor;\n            const lastFocus = lastSelection.focus;\n            $03df355ea183d08a$var$$setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n            $03df355ea183d08a$var$$setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n    if (anchorDOM === null || focusDOM === null || !$03df355ea183d08a$var$isSelectionWithinEditor(editor, anchorDOM, focusDOM)) return null;\n    const resolvedAnchorPoint = $03df355ea183d08a$var$internalResolveSelectionPoint(anchorDOM, anchorOffset, $03df355ea183d08a$var$$isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n    if (resolvedAnchorPoint === null) return null;\n    const resolvedFocusPoint = $03df355ea183d08a$var$internalResolveSelectionPoint(focusDOM, focusOffset, $03df355ea183d08a$var$$isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n    if (resolvedFocusPoint === null) return null;\n    if (resolvedAnchorPoint.type === \"element\" && resolvedFocusPoint.type === \"element\") {\n        const anchorNode = $03df355ea183d08a$var$getNodeFromDOM(anchorDOM);\n        const focusNode = $03df355ea183d08a$var$getNodeFromDOM(focusDOM); // Ensure if we're selecting the content of a decorator that we\n        // return null for this point, as it's not in the controlled scope\n        // of Lexical.\n        if ($03df355ea183d08a$var$$isDecoratorNode(anchorNode) && $03df355ea183d08a$var$$isDecoratorNode(focusNode)) return null;\n    } // Handle normalization of selection when it is at the boundaries.\n    $03df355ea183d08a$var$normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n    return [\n        resolvedAnchorPoint,\n        resolvedFocusPoint\n    ];\n}\nfunction $03df355ea183d08a$var$$isBlockElementNode(node) {\n    return $03df355ea183d08a$var$$isElementNode(node) && !node.isInline();\n} // This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\nfunction $03df355ea183d08a$var$internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    const selection = new $03df355ea183d08a$var$RangeSelection($03df355ea183d08a$var$$createPoint(anchorKey, anchorOffset, anchorType), $03df355ea183d08a$var$$createPoint(focusKey, focusOffset, focusType), 0, \"\");\n    selection.dirty = true;\n    editorState._selection = selection;\n    return selection;\n}\nfunction $03df355ea183d08a$var$$createRangeSelection() {\n    const anchor = $03df355ea183d08a$var$$createPoint(\"root\", 0, \"element\");\n    const focus = $03df355ea183d08a$var$$createPoint(\"root\", 0, \"element\");\n    return new $03df355ea183d08a$var$RangeSelection(anchor, focus, 0, \"\");\n}\nfunction $03df355ea183d08a$var$$createNodeSelection() {\n    return new $03df355ea183d08a$var$NodeSelection(new Set());\n}\nfunction $03df355ea183d08a$var$DEPRECATED_$createGridSelection() {\n    const anchor = $03df355ea183d08a$var$$createPoint(\"root\", 0, \"element\");\n    const focus = $03df355ea183d08a$var$$createPoint(\"root\", 0, \"element\");\n    return new $03df355ea183d08a$var$GridSelection(\"root\", anchor, focus);\n}\nfunction $03df355ea183d08a$var$internalCreateSelection(editor) {\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const domSelection = $03df355ea183d08a$var$getDOMSelection(editor._window);\n    if ($03df355ea183d08a$var$$isNodeSelection(lastSelection) || $03df355ea183d08a$var$DEPRECATED_$isGridSelection(lastSelection)) return lastSelection.clone();\n    return $03df355ea183d08a$var$internalCreateRangeSelection(lastSelection, domSelection, editor);\n}\nfunction $03df355ea183d08a$var$internalCreateRangeSelection(lastSelection, domSelection, editor) {\n    const windowObj = editor._window;\n    if (windowObj === null) return null;\n     // When we create a selection, we try to use the previous\n    // selection where possible, unless an actual user selection\n    // change has occurred. When we do need to create a new selection\n    // we validate we can have text nodes for both anchor and focus\n    // nodes. If that holds true, we then return that selection\n    // as a mutable object that we use for the editor state for this\n    // update cycle. If a selection gets changed, and requires a\n    // update to native DOM selection, it gets marked as \"dirty\".\n    // If the selection changes, but matches with the existing\n    // DOM selection, then we only need to sync it. Otherwise,\n    // we generally bail out of doing an update to selection during\n    // reconciliation unless there are dirty nodes that need\n    // reconciling.\n    const windowEvent = windowObj.event;\n    const eventType = windowEvent ? windowEvent.type : undefined;\n    const isSelectionChange = eventType === \"selectionchange\";\n    const useDOMSelection = !$03df355ea183d08a$var$getIsProcesssingMutations() && (isSelectionChange || eventType === \"beforeinput\" || eventType === \"compositionstart\" || eventType === \"compositionend\" || eventType === \"click\" && windowEvent && windowEvent.detail === 3 || eventType === \"drop\" || eventType === undefined);\n    let anchorDOM, focusDOM, anchorOffset, focusOffset;\n    if (!$03df355ea183d08a$var$$isRangeSelection(lastSelection) || useDOMSelection) {\n        if (domSelection === null) return null;\n        anchorDOM = domSelection.anchorNode;\n        focusDOM = domSelection.focusNode;\n        anchorOffset = domSelection.anchorOffset;\n        focusOffset = domSelection.focusOffset;\n        if (isSelectionChange && $03df355ea183d08a$var$$isRangeSelection(lastSelection) && !$03df355ea183d08a$var$isSelectionWithinEditor(editor, anchorDOM, focusDOM)) return lastSelection.clone();\n    } else return lastSelection.clone();\n     // Let's resolve the text nodes from the offsets and DOM nodes we have from\n    // native selection.\n    const resolvedSelectionPoints = $03df355ea183d08a$var$internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) return null;\n    const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n    return new $03df355ea183d08a$var$RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$03df355ea183d08a$var$$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$03df355ea183d08a$var$$isRangeSelection(lastSelection) ? \"\" : lastSelection.style);\n}\nfunction $03df355ea183d08a$var$$getSelection() {\n    const editorState = $03df355ea183d08a$var$getActiveEditorState();\n    return editorState._selection;\n}\nfunction $03df355ea183d08a$var$$getPreviousSelection() {\n    const editor = $03df355ea183d08a$var$getActiveEditor();\n    return editor._editorState._selection;\n}\nfunction $03df355ea183d08a$var$$updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) return;\n    const parentKey = parentNode.__key; // Single node. We shift selection but never redimension it\n    if (selection.isCollapsed()) {\n        const selectionOffset = anchor.offset;\n        if (nodeOffset <= selectionOffset) {\n            const newSelectionOffset = Math.max(0, selectionOffset + times);\n            anchor.set(parentKey, newSelectionOffset, \"element\");\n            focus.set(parentKey, newSelectionOffset, \"element\"); // The new selection might point to text nodes, try to resolve them\n            $03df355ea183d08a$var$$updateSelectionResolveTextNodes(selection);\n        }\n        return;\n    } // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n        const firstPointOffset = firstPoint.offset;\n        if (nodeOffset <= firstPointOffset) firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), \"element\");\n    }\n    if (parentNode.is(lastPointNode)) {\n        const lastPointOffset = lastPoint.offset;\n        if (nodeOffset <= lastPointOffset) lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), \"element\");\n    } // The new selection might point to text nodes, try to resolve them\n    $03df355ea183d08a$var$$updateSelectionResolveTextNodes(selection);\n}\nfunction $03df355ea183d08a$var$$updateSelectionResolveTextNodes(selection) {\n    const anchor = selection.anchor;\n    const anchorOffset = anchor.offset;\n    const focus = selection.focus;\n    const focusOffset = focus.offset;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (selection.isCollapsed()) {\n        if (!$03df355ea183d08a$var$$isElementNode(anchorNode)) return;\n        const childSize = anchorNode.getChildrenSize();\n        const anchorOffsetAtEnd = anchorOffset >= childSize;\n        const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n        if ($03df355ea183d08a$var$$isTextNode(child)) {\n            let newOffset = 0;\n            if (anchorOffsetAtEnd) newOffset = child.getTextContentSize();\n            anchor.set(child.__key, newOffset, \"text\");\n            focus.set(child.__key, newOffset, \"text\");\n        }\n        return;\n    }\n    if ($03df355ea183d08a$var$$isElementNode(anchorNode)) {\n        const childSize = anchorNode.getChildrenSize();\n        const anchorOffsetAtEnd = anchorOffset >= childSize;\n        const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n        if ($03df355ea183d08a$var$$isTextNode(child)) {\n            let newOffset = 0;\n            if (anchorOffsetAtEnd) newOffset = child.getTextContentSize();\n            anchor.set(child.__key, newOffset, \"text\");\n        }\n    }\n    if ($03df355ea183d08a$var$$isElementNode(focusNode)) {\n        const childSize = focusNode.getChildrenSize();\n        const focusOffsetAtEnd = focusOffset >= childSize;\n        const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n        if ($03df355ea183d08a$var$$isTextNode(child)) {\n            let newOffset = 0;\n            if (focusOffsetAtEnd) newOffset = child.getTextContentSize();\n            focus.set(child.__key, newOffset, \"text\");\n        }\n    }\n}\nfunction $03df355ea183d08a$var$applySelectionTransforms(nextEditorState, editor) {\n    const prevEditorState = editor.getEditorState();\n    const prevSelection = prevEditorState._selection;\n    const nextSelection = nextEditorState._selection;\n    if ($03df355ea183d08a$var$$isRangeSelection(nextSelection)) {\n        const anchor = nextSelection.anchor;\n        const focus = nextSelection.focus;\n        let anchorNode;\n        if (anchor.type === \"text\") {\n            anchorNode = anchor.getNode();\n            anchorNode.selectionTransform(prevSelection, nextSelection);\n        }\n        if (focus.type === \"text\") {\n            const focusNode = focus.getNode();\n            if (anchorNode !== focusNode) focusNode.selectionTransform(prevSelection, nextSelection);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n    let siblingKey = null;\n    let offset = 0;\n    let type = null;\n    if (prevSibling !== null) {\n        siblingKey = prevSibling.__key;\n        if ($03df355ea183d08a$var$$isTextNode(prevSibling)) {\n            offset = prevSibling.getTextContentSize();\n            type = \"text\";\n        } else if ($03df355ea183d08a$var$$isElementNode(prevSibling)) {\n            offset = prevSibling.getChildrenSize();\n            type = \"element\";\n        }\n    } else if (nextSibling !== null) {\n        siblingKey = nextSibling.__key;\n        if ($03df355ea183d08a$var$$isTextNode(nextSibling)) type = \"text\";\n        else if ($03df355ea183d08a$var$$isElementNode(nextSibling)) type = \"element\";\n    }\n    if (siblingKey !== null && type !== null) point.set(siblingKey, offset, type);\n    else {\n        offset = node.getIndexWithinParent();\n        if (offset === -1) // Move selection to end of parent\n        offset = parent.getChildrenSize();\n        point.set(parent.__key, offset, \"element\");\n    }\n}\nfunction $03df355ea183d08a$var$adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n    if (point.type === \"text\") {\n        point.key = key;\n        if (!isBefore) point.offset += textLength;\n    } else if (point.offset > target.getIndexWithinParent()) point.offset -= 1;\n}\nfunction $03df355ea183d08a$var$updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n    const anchorDOMNode = domSelection.anchorNode;\n    const focusDOMNode = domSelection.focusNode;\n    const anchorOffset = domSelection.anchorOffset;\n    const focusOffset = domSelection.focusOffset;\n    const activeElement = document.activeElement; // TODO: make this not hard-coded, and add another config option\n    // that makes this configurable.\n    if (tags.has(\"collaboration\") && activeElement !== rootElement || activeElement !== null && $03df355ea183d08a$var$isSelectionCapturedInDecoratorInput(activeElement)) return;\n    if (!$03df355ea183d08a$var$$isRangeSelection(nextSelection)) {\n        // We don't remove selection if the prevSelection is null because\n        // of editor.setRootElement(). If this occurs on init when the\n        // editor is already focused, then this can cause the editor to\n        // lose focus.\n        if (prevSelection !== null && $03df355ea183d08a$var$isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) domSelection.removeAllRanges();\n        return;\n    }\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    const anchorKey = anchor.key;\n    const focusKey = focus.key;\n    const anchorDOM = $03df355ea183d08a$var$getElementByKeyOrThrow(editor, anchorKey);\n    const focusDOM = $03df355ea183d08a$var$getElementByKeyOrThrow(editor, focusKey);\n    const nextAnchorOffset = anchor.offset;\n    const nextFocusOffset = focus.offset;\n    const nextFormat = nextSelection.format;\n    const nextStyle = nextSelection.style;\n    const isCollapsed = nextSelection.isCollapsed();\n    let nextAnchorNode = anchorDOM;\n    let nextFocusNode = focusDOM;\n    let anchorFormatOrStyleChanged = false;\n    if (anchor.type === \"text\") {\n        nextAnchorNode = $03df355ea183d08a$var$getDOMTextNode(anchorDOM);\n        const anchorNode = anchor.getNode();\n        anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n    } else if ($03df355ea183d08a$var$$isRangeSelection(prevSelection) && prevSelection.anchor.type === \"text\") anchorFormatOrStyleChanged = true;\n    if (focus.type === \"text\") nextFocusNode = $03df355ea183d08a$var$getDOMTextNode(focusDOM);\n     // If we can't get an underlying text node for selection, then\n    // we should avoid setting selection to something incorrect.\n    if (nextAnchorNode === null || nextFocusNode === null) return;\n    if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $03df355ea183d08a$var$$isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) $03df355ea183d08a$var$markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n     // Diff against the native DOM selection to ensure we don't do\n    // an unnecessary selection update. We also skip this check if\n    // we're moving selection to within an element, as this can\n    // sometimes be problematic around scrolling.\n    if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode && // Badly interpreted range selection when collapsed - #1482\n    !(domSelection.type === \"Range\" && isCollapsed)) {\n        // If the root element does not have focus, ensure it has focus\n        if (activeElement === null || !rootElement.contains(activeElement)) rootElement.focus({\n            preventScroll: true\n        });\n        if (anchor.type !== \"element\") return;\n    } // Apply the updated selection to the DOM. Note: this will trigger\n    // a \"selectionchange\" event, although it will be asynchronous.\n    try {\n        domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n    } catch (error) {\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    }\n    if (!tags.has(\"skip-scroll-into-view\") && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n        const selectionTarget = nextSelection instanceof $03df355ea183d08a$var$RangeSelection && nextSelection.anchor.type === \"element\" ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n        if (selectionTarget !== null) {\n            // @ts-ignore Text nodes do have getBoundingClientRect\n            const selectionRect = selectionTarget.getBoundingClientRect();\n            $03df355ea183d08a$var$scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n        }\n    }\n    $03df355ea183d08a$var$markSelectionChangeFromDOMUpdate();\n}\nfunction $03df355ea183d08a$var$$insertNodes(nodes, selectStart) {\n    let selection = $03df355ea183d08a$var$$getSelection();\n    if (selection === null) selection = $03df355ea183d08a$var$$getRoot().selectEnd();\n    return selection.insertNodes(nodes, selectStart);\n}\nfunction $03df355ea183d08a$var$$getTextContent() {\n    const selection = $03df355ea183d08a$var$$getSelection();\n    if (selection === null) return \"\";\n    return selection.getTextContent();\n}\nfunction $03df355ea183d08a$var$computeGridMap(grid, cellA, cellB) {\n    const tableMap = [];\n    let cellAValue = null;\n    let cellBValue = null;\n    function write(startRow, startColumn, cell) {\n        const value = {\n            cell: cell,\n            startColumn: startColumn,\n            startRow: startRow\n        };\n        const rowSpan = cell.__rowSpan;\n        const colSpan = cell.__colSpan;\n        for(let i = 0; i < rowSpan; i++){\n            if (tableMap[startRow + i] === undefined) tableMap[startRow + i] = [];\n            for(let j = 0; j < colSpan; j++)tableMap[startRow + i][startColumn + j] = value;\n        }\n        if (cellA.is(cell)) cellAValue = value;\n        if (cellB.is(cell)) cellBValue = value;\n    }\n    function isEmpty(row, column) {\n        return tableMap[row] === undefined || tableMap[row][column] === undefined;\n    }\n    const gridChildren = grid.getChildren();\n    for(let i = 0; i < gridChildren.length; i++){\n        const row = gridChildren[i];\n        if (!$03df355ea183d08a$var$DEPRECATED_$isGridRowNode(row)) throw Error(`Expected GridNode children to be GridRowNode`);\n        const rowChildren = row.getChildren();\n        let j = 0;\n        for (const cell of rowChildren){\n            if (!$03df355ea183d08a$var$DEPRECATED_$isGridCellNode(cell)) throw Error(`Expected GridRowNode children to be GridCellNode`);\n            while(!isEmpty(i, j))j++;\n            write(i, j, cell);\n            j += cell.__colSpan;\n        }\n    }\n    if (!(cellAValue !== null)) throw Error(`Anchor not found in Grid`);\n    if (!(cellBValue !== null)) throw Error(`Focus not found in Grid`);\n    return [\n        tableMap,\n        cellAValue,\n        cellBValue\n    ];\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ let $03df355ea183d08a$var$activeEditorState = null;\nlet $03df355ea183d08a$var$activeEditor = null;\nlet $03df355ea183d08a$var$isReadOnlyMode = false;\nlet $03df355ea183d08a$var$isAttemptingToRecoverFromReconcilerError = false;\nlet $03df355ea183d08a$var$infiniteTransformCount = 0;\nconst $03df355ea183d08a$var$observerOptions = {\n    characterData: true,\n    childList: true,\n    subtree: true\n};\nfunction $03df355ea183d08a$var$isCurrentlyReadOnlyMode() {\n    return $03df355ea183d08a$var$isReadOnlyMode || $03df355ea183d08a$var$activeEditorState !== null && $03df355ea183d08a$var$activeEditorState._readOnly;\n}\nfunction $03df355ea183d08a$var$errorOnReadOnly() {\n    if ($03df355ea183d08a$var$isReadOnlyMode) throw Error(`Cannot use method in read-only mode.`);\n}\nfunction $03df355ea183d08a$var$errorOnInfiniteTransforms() {\n    if ($03df355ea183d08a$var$infiniteTransformCount > 99) throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n}\nfunction $03df355ea183d08a$var$getActiveEditorState() {\n    if ($03df355ea183d08a$var$activeEditorState === null) throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    return $03df355ea183d08a$var$activeEditorState;\n}\nfunction $03df355ea183d08a$var$getActiveEditor() {\n    if ($03df355ea183d08a$var$activeEditor === null) throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    return $03df355ea183d08a$var$activeEditor;\n}\nfunction $03df355ea183d08a$var$internalGetActiveEditor() {\n    return $03df355ea183d08a$var$activeEditor;\n}\nfunction $03df355ea183d08a$var$$applyTransforms(editor, node, transformsCache) {\n    const type = node.__type;\n    const registeredNode = $03df355ea183d08a$var$getRegisteredNodeOrThrow(editor, type);\n    let transformsArr = transformsCache.get(type);\n    if (transformsArr === undefined) {\n        transformsArr = Array.from(registeredNode.transforms);\n        transformsCache.set(type, transformsArr);\n    }\n    const transformsArrLength = transformsArr.length;\n    for(let i = 0; i < transformsArrLength; i++){\n        transformsArr[i](node);\n        if (!node.isAttached()) break;\n    }\n}\nfunction $03df355ea183d08a$var$$isNodeValidForTransform(node, compositionKey) {\n    return node !== undefined && // We don't want to transform nodes being composed\n    node.__key !== compositionKey && node.isAttached();\n}\nfunction $03df355ea183d08a$var$$normalizeAllDirtyTextNodes(editorState, editor) {\n    const dirtyLeaves = editor._dirtyLeaves;\n    const nodeMap = editorState._nodeMap;\n    for (const nodeKey of dirtyLeaves){\n        const node = nodeMap.get(nodeKey);\n        if ($03df355ea183d08a$var$$isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) $03df355ea183d08a$var$$normalizeTextNode(node);\n    }\n}\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */ function $03df355ea183d08a$var$$applyAllTransforms(editorState, editor) {\n    const dirtyLeaves = editor._dirtyLeaves;\n    const dirtyElements = editor._dirtyElements;\n    const nodeMap = editorState._nodeMap;\n    const compositionKey = $03df355ea183d08a$var$$getCompositionKey();\n    const transformsCache = new Map();\n    let untransformedDirtyLeaves = dirtyLeaves;\n    let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    let untransformedDirtyElements = dirtyElements;\n    let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    while(untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0){\n        if (untransformedDirtyLeavesLength > 0) {\n            // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n            editor._dirtyLeaves = new Set();\n            for (const nodeKey of untransformedDirtyLeaves){\n                const node = nodeMap.get(nodeKey);\n                if ($03df355ea183d08a$var$$isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) $03df355ea183d08a$var$$normalizeTextNode(node);\n                if (node !== undefined && $03df355ea183d08a$var$$isNodeValidForTransform(node, compositionKey)) $03df355ea183d08a$var$$applyTransforms(editor, node, transformsCache);\n                dirtyLeaves.add(nodeKey);\n            }\n            untransformedDirtyLeaves = editor._dirtyLeaves;\n            untransformedDirtyLeavesLength = untransformedDirtyLeaves.size; // We want to prioritize node transforms over element transforms\n            if (untransformedDirtyLeavesLength > 0) {\n                $03df355ea183d08a$var$infiniteTransformCount++;\n                continue;\n            }\n        } // All dirty leaves have been processed. Let's do elements!\n        // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n        // new ones caused by element transforms\n        editor._dirtyLeaves = new Set();\n        editor._dirtyElements = new Map();\n        for (const currentUntransformedDirtyElement of untransformedDirtyElements){\n            const nodeKey = currentUntransformedDirtyElement[0];\n            const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n            if (nodeKey !== \"root\" && !intentionallyMarkedAsDirty) continue;\n            const node = nodeMap.get(nodeKey);\n            if (node !== undefined && $03df355ea183d08a$var$$isNodeValidForTransform(node, compositionKey)) $03df355ea183d08a$var$$applyTransforms(editor, node, transformsCache);\n            dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n        }\n        untransformedDirtyLeaves = editor._dirtyLeaves;\n        untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n        untransformedDirtyElements = editor._dirtyElements;\n        untransformedDirtyElementsLength = untransformedDirtyElements.size;\n        $03df355ea183d08a$var$infiniteTransformCount++;\n    }\n    editor._dirtyLeaves = dirtyLeaves;\n    editor._dirtyElements = dirtyElements;\n}\nfunction $03df355ea183d08a$var$$parseSerializedNode(serializedNode) {\n    const internalSerializedNode = serializedNode;\n    return $03df355ea183d08a$var$$parseSerializedNodeImpl(internalSerializedNode, $03df355ea183d08a$var$getActiveEditor()._nodes);\n}\nfunction $03df355ea183d08a$var$$parseSerializedNodeImpl(serializedNode, registeredNodes) {\n    const type = serializedNode.type;\n    const registeredNode = registeredNodes.get(type);\n    if (registeredNode === undefined) throw Error(`parseEditorState: type \"${type}\" + not found`);\n    const nodeClass = registeredNode.klass;\n    if (serializedNode.type !== nodeClass.getType()) throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    const node = nodeClass.importJSON(serializedNode);\n    const children = serializedNode.children;\n    if ($03df355ea183d08a$var$$isElementNode(node) && Array.isArray(children)) for(let i = 0; i < children.length; i++){\n        const serializedJSONChildNode = children[i];\n        const childNode = $03df355ea183d08a$var$$parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n        node.append(childNode);\n    }\n    return node;\n}\nfunction $03df355ea183d08a$var$parseEditorState(serializedEditorState, editor, updateFn) {\n    const editorState = $03df355ea183d08a$var$createEmptyEditorState();\n    const previousActiveEditorState = $03df355ea183d08a$var$activeEditorState;\n    const previousReadOnlyMode = $03df355ea183d08a$var$isReadOnlyMode;\n    const previousActiveEditor = $03df355ea183d08a$var$activeEditor;\n    const previousDirtyElements = editor._dirtyElements;\n    const previousDirtyLeaves = editor._dirtyLeaves;\n    const previousCloneNotNeeded = editor._cloneNotNeeded;\n    const previousDirtyType = editor._dirtyType;\n    editor._dirtyElements = new Map();\n    editor._dirtyLeaves = new Set();\n    editor._cloneNotNeeded = new Set();\n    editor._dirtyType = 0;\n    $03df355ea183d08a$var$activeEditorState = editorState;\n    $03df355ea183d08a$var$isReadOnlyMode = false;\n    $03df355ea183d08a$var$activeEditor = editor;\n    try {\n        const registeredNodes = editor._nodes;\n        const serializedNode = serializedEditorState.root;\n        $03df355ea183d08a$var$$parseSerializedNodeImpl(serializedNode, registeredNodes);\n        if (updateFn) updateFn();\n         // Make the editorState immutable\n        editorState._readOnly = true;\n        $03df355ea183d08a$var$handleDEVOnlyPendingUpdateGuarantees(editorState);\n    } finally{\n        editor._dirtyElements = previousDirtyElements;\n        editor._dirtyLeaves = previousDirtyLeaves;\n        editor._cloneNotNeeded = previousCloneNotNeeded;\n        editor._dirtyType = previousDirtyType;\n        $03df355ea183d08a$var$activeEditorState = previousActiveEditorState;\n        $03df355ea183d08a$var$isReadOnlyMode = previousReadOnlyMode;\n        $03df355ea183d08a$var$activeEditor = previousActiveEditor;\n    }\n    return editorState;\n} // This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\nfunction $03df355ea183d08a$var$readEditorState(editorState, callbackFn) {\n    const previousActiveEditorState = $03df355ea183d08a$var$activeEditorState;\n    const previousReadOnlyMode = $03df355ea183d08a$var$isReadOnlyMode;\n    const previousActiveEditor = $03df355ea183d08a$var$activeEditor;\n    $03df355ea183d08a$var$activeEditorState = editorState;\n    $03df355ea183d08a$var$isReadOnlyMode = true;\n    $03df355ea183d08a$var$activeEditor = null;\n    try {\n        return callbackFn();\n    } finally{\n        $03df355ea183d08a$var$activeEditorState = previousActiveEditorState;\n        $03df355ea183d08a$var$isReadOnlyMode = previousReadOnlyMode;\n        $03df355ea183d08a$var$activeEditor = previousActiveEditor;\n    }\n}\nfunction $03df355ea183d08a$var$handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n    // Given we can't Object.freeze the nodeMap as it's a Map,\n    // we instead replace its set, clear and delete methods.\n    const nodeMap = pendingEditorState._nodeMap;\n    nodeMap.set = ()=>{\n        throw new Error(\"Cannot call set() on a frozen Lexical node map\");\n    };\n    nodeMap.clear = ()=>{\n        throw new Error(\"Cannot call clear() on a frozen Lexical node map\");\n    };\n    nodeMap.delete = ()=>{\n        throw new Error(\"Cannot call delete() on a frozen Lexical node map\");\n    };\n}\nfunction $03df355ea183d08a$var$commitPendingUpdates(editor) {\n    const pendingEditorState = editor._pendingEditorState;\n    const rootElement = editor._rootElement;\n    const shouldSkipDOM = editor._headless || rootElement === null;\n    if (pendingEditorState === null) return;\n     // ======\n    // Reconciliation has started.\n    // ======\n    const currentEditorState = editor._editorState;\n    const currentSelection = currentEditorState._selection;\n    const pendingSelection = pendingEditorState._selection;\n    const needsUpdate = editor._dirtyType !== $03df355ea183d08a$var$NO_DIRTY_NODES;\n    const previousActiveEditorState = $03df355ea183d08a$var$activeEditorState;\n    const previousReadOnlyMode = $03df355ea183d08a$var$isReadOnlyMode;\n    const previousActiveEditor = $03df355ea183d08a$var$activeEditor;\n    const previouslyUpdating = editor._updating;\n    const observer = editor._observer;\n    let mutatedNodes = null;\n    editor._pendingEditorState = null;\n    editor._editorState = pendingEditorState;\n    if (!shouldSkipDOM && needsUpdate && observer !== null) {\n        $03df355ea183d08a$var$activeEditor = editor;\n        $03df355ea183d08a$var$activeEditorState = pendingEditorState;\n        $03df355ea183d08a$var$isReadOnlyMode = false; // We don't want updates to sync block the reconciliation.\n        editor._updating = true;\n        try {\n            const dirtyType = editor._dirtyType;\n            const dirtyElements = editor._dirtyElements;\n            const dirtyLeaves = editor._dirtyLeaves;\n            observer.disconnect();\n            mutatedNodes = $03df355ea183d08a$var$reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n        } catch (error) {\n            // Report errors\n            if (error instanceof Error) editor._onError(error);\n             // Reset editor and restore incoming editor state to the DOM\n            if (!$03df355ea183d08a$var$isAttemptingToRecoverFromReconcilerError) {\n                $03df355ea183d08a$var$resetEditor(editor, null, rootElement, pendingEditorState);\n                $03df355ea183d08a$var$initMutationObserver(editor);\n                editor._dirtyType = $03df355ea183d08a$var$FULL_RECONCILE;\n                $03df355ea183d08a$var$isAttemptingToRecoverFromReconcilerError = true;\n                $03df355ea183d08a$var$commitPendingUpdates(editor);\n                $03df355ea183d08a$var$isAttemptingToRecoverFromReconcilerError = false;\n            } else // To avoid a possible situation of infinite loops, lets throw\n            throw error;\n            return;\n        } finally{\n            observer.observe(rootElement, $03df355ea183d08a$var$observerOptions);\n            editor._updating = previouslyUpdating;\n            $03df355ea183d08a$var$activeEditorState = previousActiveEditorState;\n            $03df355ea183d08a$var$isReadOnlyMode = previousReadOnlyMode;\n            $03df355ea183d08a$var$activeEditor = previousActiveEditor;\n        }\n    }\n    if (!pendingEditorState._readOnly) {\n        pendingEditorState._readOnly = true;\n        $03df355ea183d08a$var$handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n        if ($03df355ea183d08a$var$$isRangeSelection(pendingSelection)) {\n            Object.freeze(pendingSelection.anchor);\n            Object.freeze(pendingSelection.focus);\n        }\n        Object.freeze(pendingSelection);\n    }\n    const dirtyLeaves = editor._dirtyLeaves;\n    const dirtyElements = editor._dirtyElements;\n    const normalizedNodes = editor._normalizedNodes;\n    const tags = editor._updateTags;\n    const deferred = editor._deferred;\n    if (needsUpdate) {\n        editor._dirtyType = $03df355ea183d08a$var$NO_DIRTY_NODES;\n        editor._cloneNotNeeded.clear();\n        editor._dirtyLeaves = new Set();\n        editor._dirtyElements = new Map();\n        editor._normalizedNodes = new Set();\n        editor._updateTags = new Set();\n    }\n    $03df355ea183d08a$var$$garbageCollectDetachedDecorators(editor, pendingEditorState); // ======\n    // Reconciliation has finished. Now update selection and trigger listeners.\n    // ======\n    const domSelection = shouldSkipDOM ? null : $03df355ea183d08a$var$getDOMSelection(editor._window); // Attempt to update the DOM selection, including focusing of the root element,\n    // and scroll into view if needed.\n    if (editor._editable && // domSelection will be null in headless\n    domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n        $03df355ea183d08a$var$activeEditor = editor;\n        $03df355ea183d08a$var$activeEditorState = pendingEditorState;\n        try {\n            if (observer !== null) observer.disconnect();\n            if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n                const blockCursorElement = editor._blockCursorElement;\n                if (blockCursorElement !== null) $03df355ea183d08a$var$removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n                $03df355ea183d08a$var$updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n            }\n            $03df355ea183d08a$var$updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n            if (observer !== null) observer.observe(rootElement, $03df355ea183d08a$var$observerOptions);\n        } finally{\n            $03df355ea183d08a$var$activeEditor = previousActiveEditor;\n            $03df355ea183d08a$var$activeEditorState = previousActiveEditorState;\n        }\n    }\n    if (mutatedNodes !== null) $03df355ea183d08a$var$triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, tags, dirtyLeaves);\n    if (!$03df355ea183d08a$var$$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) editor.dispatchCommand($03df355ea183d08a$var$SELECTION_CHANGE_COMMAND, undefined);\n    /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */ const pendingDecorators = editor._pendingDecorators;\n    if (pendingDecorators !== null) {\n        editor._decorators = pendingDecorators;\n        editor._pendingDecorators = null;\n        $03df355ea183d08a$var$triggerListeners(\"decorator\", editor, true, pendingDecorators);\n    }\n    $03df355ea183d08a$var$triggerTextContentListeners(editor, currentEditorState, pendingEditorState);\n    $03df355ea183d08a$var$triggerListeners(\"update\", editor, true, {\n        dirtyElements: dirtyElements,\n        dirtyLeaves: dirtyLeaves,\n        editorState: pendingEditorState,\n        normalizedNodes: normalizedNodes,\n        prevEditorState: currentEditorState,\n        tags: tags\n    });\n    $03df355ea183d08a$var$triggerDeferredUpdateCallbacks(editor, deferred);\n    $03df355ea183d08a$var$triggerEnqueuedUpdates(editor);\n}\nfunction $03df355ea183d08a$var$triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n    const currentTextContent = $03df355ea183d08a$var$getEditorStateTextContent(currentEditorState);\n    const latestTextContent = $03df355ea183d08a$var$getEditorStateTextContent(pendingEditorState);\n    if (currentTextContent !== latestTextContent) $03df355ea183d08a$var$triggerListeners(\"textcontent\", editor, true, latestTextContent);\n}\nfunction $03df355ea183d08a$var$triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, updateTags, dirtyLeaves) {\n    const listeners = Array.from(editor._listeners.mutation);\n    const listenersLength = listeners.length;\n    for(let i = 0; i < listenersLength; i++){\n        const [listener, klass] = listeners[i];\n        const mutatedNodesByType = mutatedNodes.get(klass);\n        if (mutatedNodesByType !== undefined) listener(mutatedNodesByType, {\n            dirtyLeaves: dirtyLeaves,\n            updateTags: updateTags\n        });\n    }\n}\nfunction $03df355ea183d08a$var$triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = isCurrentlyEnqueuingUpdates;\n    try {\n        const listeners = Array.from(editor._listeners[type]);\n        for(let i = 0; i < listeners.length; i++)// @ts-ignore\n        listeners[i].apply(null, payload);\n    } finally{\n        editor._updating = previouslyUpdating;\n    }\n}\nfunction $03df355ea183d08a$var$triggerCommandListeners(editor, type, payload) {\n    if (editor._updating === false || $03df355ea183d08a$var$activeEditor !== editor) {\n        let returnVal = false;\n        editor.update(()=>{\n            returnVal = $03df355ea183d08a$var$triggerCommandListeners(editor, type, payload);\n        });\n        return returnVal;\n    }\n    const editors = $03df355ea183d08a$var$getEditorsToPropagate(editor);\n    for(let i = 4; i >= 0; i--)for(let e = 0; e < editors.length; e++){\n        const currentEditor = editors[e];\n        const commandListeners = currentEditor._commands;\n        const listenerInPriorityOrder = commandListeners.get(type);\n        if (listenerInPriorityOrder !== undefined) {\n            const listenersSet = listenerInPriorityOrder[i];\n            if (listenersSet !== undefined) {\n                const listeners = Array.from(listenersSet);\n                const listenersLength = listeners.length;\n                for(let j = 0; j < listenersLength; j++){\n                    if (listeners[j](payload, editor) === true) return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction $03df355ea183d08a$var$triggerEnqueuedUpdates(editor) {\n    const queuedUpdates = editor._updates;\n    if (queuedUpdates.length !== 0) {\n        const queuedUpdate = queuedUpdates.shift();\n        if (queuedUpdate) {\n            const [updateFn, options] = queuedUpdate;\n            $03df355ea183d08a$var$beginUpdate(editor, updateFn, options);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$triggerDeferredUpdateCallbacks(editor, deferred) {\n    editor._deferred = [];\n    if (deferred.length !== 0) {\n        const previouslyUpdating = editor._updating;\n        editor._updating = true;\n        try {\n            for(let i = 0; i < deferred.length; i++)deferred[i]();\n        } finally{\n            editor._updating = previouslyUpdating;\n        }\n    }\n}\nfunction $03df355ea183d08a$var$processNestedUpdates(editor, initialSkipTransforms) {\n    const queuedUpdates = editor._updates;\n    let skipTransforms = initialSkipTransforms || false; // Updates might grow as we process them, we so we'll need\n    // to handle each update as we go until the updates array is\n    // empty.\n    while(queuedUpdates.length !== 0){\n        const queuedUpdate = queuedUpdates.shift();\n        if (queuedUpdate) {\n            const [nextUpdateFn, options] = queuedUpdate;\n            let onUpdate;\n            let tag;\n            if (options !== undefined) {\n                onUpdate = options.onUpdate;\n                tag = options.tag;\n                if (options.skipTransforms) skipTransforms = true;\n                if (onUpdate) editor._deferred.push(onUpdate);\n                if (tag) editor._updateTags.add(tag);\n            }\n            nextUpdateFn();\n        }\n    }\n    return skipTransforms;\n}\nfunction $03df355ea183d08a$var$beginUpdate(editor, updateFn, options) {\n    const updateTags = editor._updateTags;\n    let onUpdate;\n    let tag;\n    let skipTransforms = false;\n    let discrete = false;\n    if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (tag != null) updateTags.add(tag);\n        skipTransforms = options.skipTransforms || false;\n        discrete = options.discrete || false;\n    }\n    if (onUpdate) editor._deferred.push(onUpdate);\n    const currentEditorState = editor._editorState;\n    let pendingEditorState = editor._pendingEditorState;\n    let editorStateWasCloned = false;\n    if (pendingEditorState === null || pendingEditorState._readOnly) {\n        pendingEditorState = editor._pendingEditorState = $03df355ea183d08a$var$cloneEditorState(pendingEditorState || currentEditorState);\n        editorStateWasCloned = true;\n    }\n    pendingEditorState._flushSync = discrete;\n    const previousActiveEditorState = $03df355ea183d08a$var$activeEditorState;\n    const previousReadOnlyMode = $03df355ea183d08a$var$isReadOnlyMode;\n    const previousActiveEditor = $03df355ea183d08a$var$activeEditor;\n    const previouslyUpdating = editor._updating;\n    $03df355ea183d08a$var$activeEditorState = pendingEditorState;\n    $03df355ea183d08a$var$isReadOnlyMode = false;\n    editor._updating = true;\n    $03df355ea183d08a$var$activeEditor = editor;\n    try {\n        if (editorStateWasCloned) {\n            if (editor._headless) {\n                if (currentEditorState._selection != null) pendingEditorState._selection = currentEditorState._selection.clone();\n            } else pendingEditorState._selection = $03df355ea183d08a$var$internalCreateSelection(editor);\n        }\n        const startingCompositionKey = editor._compositionKey;\n        updateFn();\n        skipTransforms = $03df355ea183d08a$var$processNestedUpdates(editor, skipTransforms);\n        $03df355ea183d08a$var$applySelectionTransforms(pendingEditorState, editor);\n        if (editor._dirtyType !== $03df355ea183d08a$var$NO_DIRTY_NODES) {\n            if (skipTransforms) $03df355ea183d08a$var$$normalizeAllDirtyTextNodes(pendingEditorState, editor);\n            else $03df355ea183d08a$var$$applyAllTransforms(pendingEditorState, editor);\n            $03df355ea183d08a$var$processNestedUpdates(editor);\n            $03df355ea183d08a$var$$garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n        }\n        const endingCompositionKey = editor._compositionKey;\n        if (startingCompositionKey !== endingCompositionKey) pendingEditorState._flushSync = true;\n        const pendingSelection = pendingEditorState._selection;\n        if ($03df355ea183d08a$var$$isRangeSelection(pendingSelection)) {\n            const pendingNodeMap = pendingEditorState._nodeMap;\n            const anchorKey = pendingSelection.anchor.key;\n            const focusKey = pendingSelection.focus.key;\n            if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        } else if ($03df355ea183d08a$var$$isNodeSelection(pendingSelection)) // TODO: we should also validate node selection?\n        {\n            if (pendingSelection._nodes.size === 0) pendingEditorState._selection = null;\n        }\n    } catch (error) {\n        // Report errors\n        if (error instanceof Error) editor._onError(error);\n         // Restore existing editor state to the DOM\n        editor._pendingEditorState = currentEditorState;\n        editor._dirtyType = $03df355ea183d08a$var$FULL_RECONCILE;\n        editor._cloneNotNeeded.clear();\n        editor._dirtyLeaves = new Set();\n        editor._dirtyElements.clear();\n        $03df355ea183d08a$var$commitPendingUpdates(editor);\n        return;\n    } finally{\n        $03df355ea183d08a$var$activeEditorState = previousActiveEditorState;\n        $03df355ea183d08a$var$isReadOnlyMode = previousReadOnlyMode;\n        $03df355ea183d08a$var$activeEditor = previousActiveEditor;\n        editor._updating = previouslyUpdating;\n        $03df355ea183d08a$var$infiniteTransformCount = 0;\n    }\n    const shouldUpdate = editor._dirtyType !== $03df355ea183d08a$var$NO_DIRTY_NODES || $03df355ea183d08a$var$editorStateHasDirtySelection(pendingEditorState, editor);\n    if (shouldUpdate) {\n        if (pendingEditorState._flushSync) {\n            pendingEditorState._flushSync = false;\n            $03df355ea183d08a$var$commitPendingUpdates(editor);\n        } else if (editorStateWasCloned) $03df355ea183d08a$var$scheduleMicroTask(()=>{\n            $03df355ea183d08a$var$commitPendingUpdates(editor);\n        });\n    } else {\n        pendingEditorState._flushSync = false;\n        if (editorStateWasCloned) {\n            updateTags.clear();\n            editor._deferred = [];\n            editor._pendingEditorState = null;\n        }\n    }\n}\nfunction $03df355ea183d08a$var$updateEditor(editor, updateFn, options) {\n    if (editor._updating) editor._updates.push([\n        updateFn,\n        options\n    ]);\n    else $03df355ea183d08a$var$beginUpdate(editor, updateFn, options);\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n    $03df355ea183d08a$var$errorOnReadOnly();\n    const key = nodeToRemove.__key;\n    const parent = nodeToRemove.getParent();\n    if (parent === null) return;\n    const selection = $03df355ea183d08a$var$$maybeMoveChildrenSelectionToParent(nodeToRemove);\n    let selectionMoved = false;\n    if ($03df355ea183d08a$var$$isRangeSelection(selection) && restoreSelection) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key) {\n            $03df355ea183d08a$var$moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n            selectionMoved = true;\n        }\n        if (focus.key === key) {\n            $03df355ea183d08a$var$moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n            selectionMoved = true;\n        }\n    }\n    if ($03df355ea183d08a$var$$isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n        // Doing this is O(n) so lets avoid it unless we need to do it\n        const index = nodeToRemove.getIndexWithinParent();\n        $03df355ea183d08a$var$removeFromParent(nodeToRemove);\n        $03df355ea183d08a$var$$updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n    } else $03df355ea183d08a$var$removeFromParent(nodeToRemove);\n    if (!preserveEmptyParent && !$03df355ea183d08a$var$$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) $03df355ea183d08a$var$removeNode(parent, restoreSelection);\n    if (restoreSelection && $03df355ea183d08a$var$$isRootNode(parent) && parent.isEmpty()) parent.selectEnd();\n}\nclass $03df355ea183d08a$var$LexicalNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    // Flow doesn't support abstract classes unfortunately, so we can't _force_\n    // subclasses of Node to implement statics. All subclasses of Node should have\n    // a static getType and clone method though. We define getType and clone here so we can call it\n    // on any  Node, and we throw this error by default since the subclass should provide\n    // their own implementation.\n    /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */ static getType() {\n        throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n    /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */ static clone(_data) {\n        throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n    /**\n   * Returns the string type of this node.\n   */ getType() {\n        return this.__type;\n    }\n    /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */ isAttached() {\n        let nodeKey = this.__key;\n        while(nodeKey !== null){\n            if (nodeKey === \"root\") return true;\n            const node = $03df355ea183d08a$var$$getNodeByKey(nodeKey);\n            if (node === null) break;\n            nodeKey = node.__parent;\n        }\n        return false;\n    }\n    /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */ isSelected(selection) {\n        const targetSelection = selection || $03df355ea183d08a$var$$getSelection();\n        if (targetSelection == null) return false;\n        const isSelected = targetSelection.getNodes().some((n)=>n.__key === this.__key);\n        if ($03df355ea183d08a$var$$isTextNode(this)) return isSelected;\n         // For inline images inside of element nodes.\n        // Without this change the image will be selected if the cursor is before or after it.\n        if ($03df355ea183d08a$var$$isRangeSelection(targetSelection) && targetSelection.anchor.type === \"element\" && targetSelection.focus.type === \"element\" && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) return false;\n        return isSelected;\n    }\n    /**\n   * Returns this nodes key.\n   */ getKey() {\n        // Key is stable between copies\n        return this.__key;\n    }\n    /**\n   * Returns the zero-based index of this node within the parent.\n   */ getIndexWithinParent() {\n        const parent = this.getParent();\n        if (parent === null) return -1;\n        let node = parent.getFirstChild();\n        let index = 0;\n        while(node !== null){\n            if (this.is(node)) return index;\n            index++;\n            node = node.getNextSibling();\n        }\n        return -1;\n    }\n    /**\n   * Returns the parent of this node, or null if none is found.\n   */ getParent() {\n        const parent = this.getLatest().__parent;\n        if (parent === null) return null;\n        return $03df355ea183d08a$var$$getNodeByKey(parent);\n    }\n    /**\n   * Returns the parent of this node, or throws if none is found.\n   */ getParentOrThrow() {\n        const parent = this.getParent();\n        if (parent === null) throw Error(`Expected node ${this.__key} to have a parent.`);\n        return parent;\n    }\n    /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */ getTopLevelElement() {\n        let node = this;\n        while(node !== null){\n            const parent = node.getParent();\n            if ($03df355ea183d08a$var$$isRootOrShadowRoot(parent)) return node;\n            node = parent;\n        }\n        return null;\n    }\n    /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */ getTopLevelElementOrThrow() {\n        const parent = this.getTopLevelElement();\n        if (parent === null) throw Error(`Expected node ${this.__key} to have a top parent element.`);\n        return parent;\n    }\n    /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */ getParents() {\n        const parents = [];\n        let node = this.getParent();\n        while(node !== null){\n            parents.push(node);\n            node = node.getParent();\n        }\n        return parents;\n    }\n    /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */ getParentKeys() {\n        const parents = [];\n        let node = this.getParent();\n        while(node !== null){\n            parents.push(node.__key);\n            node = node.getParent();\n        }\n        return parents;\n    }\n    /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */ getPreviousSibling() {\n        const self = this.getLatest();\n        const prevKey = self.__prev;\n        return prevKey === null ? null : $03df355ea183d08a$var$$getNodeByKey(prevKey);\n    }\n    /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */ getPreviousSiblings() {\n        const siblings = [];\n        const parent = this.getParent();\n        if (parent === null) return siblings;\n        let node = parent.getFirstChild();\n        while(node !== null){\n            if (node.is(this)) break;\n            siblings.push(node);\n            node = node.getNextSibling();\n        }\n        return siblings;\n    }\n    /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */ getNextSibling() {\n        const self = this.getLatest();\n        const nextKey = self.__next;\n        return nextKey === null ? null : $03df355ea183d08a$var$$getNodeByKey(nextKey);\n    }\n    /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */ getNextSiblings() {\n        const siblings = [];\n        let node = this.getNextSibling();\n        while(node !== null){\n            siblings.push(node);\n            node = node.getNextSibling();\n        }\n        return siblings;\n    }\n    /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */ getCommonAncestor(node) {\n        const a = this.getParents();\n        const b = node.getParents();\n        if ($03df355ea183d08a$var$$isElementNode(this)) a.unshift(this);\n        if ($03df355ea183d08a$var$$isElementNode(node)) b.unshift(node);\n        const aLength = a.length;\n        const bLength = b.length;\n        if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) return null;\n        const bSet = new Set(b);\n        for(let i = 0; i < aLength; i++){\n            const ancestor = a[i];\n            if (bSet.has(ancestor)) return ancestor;\n        }\n        return null;\n    }\n    /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */ is(object) {\n        if (object == null) return false;\n        return this.__key === object.__key;\n    }\n    /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */ isBefore(targetNode) {\n        if (this === targetNode) return false;\n        if (targetNode.isParentOf(this)) return true;\n        if (this.isParentOf(targetNode)) return false;\n        const commonAncestor = this.getCommonAncestor(targetNode);\n        let indexA = 0;\n        let indexB = 0;\n        let node = this;\n        while(true){\n            const parent = node.getParentOrThrow();\n            if (parent === commonAncestor) {\n                indexA = node.getIndexWithinParent();\n                break;\n            }\n            node = parent;\n        }\n        node = targetNode;\n        while(true){\n            const parent = node.getParentOrThrow();\n            if (parent === commonAncestor) {\n                indexB = node.getIndexWithinParent();\n                break;\n            }\n            node = parent;\n        }\n        return indexA < indexB;\n    }\n    /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */ isParentOf(targetNode) {\n        const key = this.__key;\n        if (key === targetNode.__key) return false;\n        let node = targetNode;\n        while(node !== null){\n            if (node.__key === key) return true;\n            node = node.getParent();\n        }\n        return false;\n    }\n    /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */ getNodesBetween(targetNode) {\n        const isBefore = this.isBefore(targetNode);\n        const nodes = [];\n        const visited = new Set();\n        let node = this;\n        while(true){\n            const key = node.__key;\n            if (!visited.has(key)) {\n                visited.add(key);\n                nodes.push(node);\n            }\n            if (node === targetNode) break;\n            const child = $03df355ea183d08a$var$$isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n            if (child !== null) {\n                node = child;\n                continue;\n            }\n            const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n            if (nextSibling !== null) {\n                node = nextSibling;\n                continue;\n            }\n            const parent = node.getParentOrThrow();\n            if (!visited.has(parent.__key)) nodes.push(parent);\n            if (parent === targetNode) break;\n            let parentSibling = null;\n            let ancestor = parent;\n            do {\n                if (ancestor === null) throw Error(`getNodesBetween: ancestor is null`);\n                parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n                ancestor = ancestor.getParent();\n                if (ancestor !== null) {\n                    if (parentSibling === null && !visited.has(ancestor.__key)) nodes.push(ancestor);\n                }\n            }while (parentSibling === null);\n            node = parentSibling;\n        }\n        if (!isBefore) nodes.reverse();\n        return nodes;\n    }\n    /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */ isDirty() {\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        const dirtyLeaves = editor._dirtyLeaves;\n        return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n    }\n    /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */ getLatest() {\n        const latest = $03df355ea183d08a$var$$getNodeByKey(this.__key);\n        if (latest === null) throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n        return latest;\n    }\n    /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */ getWritable() {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        const editorState = $03df355ea183d08a$var$getActiveEditorState();\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        const nodeMap = editorState._nodeMap;\n        const key = this.__key; // Ensure we get the latest node from pending state\n        const latestNode = this.getLatest();\n        const parent = latestNode.__parent;\n        const cloneNotNeeded = editor._cloneNotNeeded;\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if (selection !== null) selection._cachedNodes = null;\n        if (cloneNotNeeded.has(key)) {\n            // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n            $03df355ea183d08a$var$internalMarkNodeAsDirty(latestNode);\n            return latestNode;\n        }\n        const constructor = latestNode.constructor; // @ts-expect-error\n        const mutableNode = constructor.clone(latestNode);\n        mutableNode.__parent = parent;\n        mutableNode.__next = latestNode.__next;\n        mutableNode.__prev = latestNode.__prev;\n        if ($03df355ea183d08a$var$$isElementNode(latestNode) && $03df355ea183d08a$var$$isElementNode(mutableNode)) {\n            mutableNode.__first = latestNode.__first;\n            mutableNode.__last = latestNode.__last;\n            mutableNode.__size = latestNode.__size;\n            mutableNode.__indent = latestNode.__indent;\n            mutableNode.__format = latestNode.__format;\n            mutableNode.__dir = latestNode.__dir;\n        } else if ($03df355ea183d08a$var$$isTextNode(latestNode) && $03df355ea183d08a$var$$isTextNode(mutableNode)) {\n            mutableNode.__format = latestNode.__format;\n            mutableNode.__style = latestNode.__style;\n            mutableNode.__mode = latestNode.__mode;\n            mutableNode.__detail = latestNode.__detail;\n        }\n        cloneNotNeeded.add(key);\n        mutableNode.__key = key;\n        $03df355ea183d08a$var$internalMarkNodeAsDirty(mutableNode); // Update reference in node map\n        nodeMap.set(key, mutableNode);\n        return mutableNode;\n    }\n    /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */ getTextContent() {\n        return \"\";\n    }\n    /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */ getTextContentSize() {\n        return this.getTextContent().length;\n    }\n    /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */ createDOM(_config, _editor) {\n        throw Error(`createDOM: base method not extended`);\n    }\n    /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */ updateDOM(_prevNode, _dom, _config) {\n        throw Error(`updateDOM: base method not extended`);\n    }\n    /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */ exportDOM(editor) {\n        const element = this.createDOM(editor._config, editor);\n        return {\n            element: element\n        };\n    }\n    /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */ exportJSON() {\n        throw Error(`exportJSON: base method not extended`);\n    }\n    /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction betweent he node implementation and serialized interfaec that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */ static importJSON(_serializedNode) {\n        throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n    /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */ static transform() {\n        return null;\n    }\n    /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */ remove(preserveEmptyParent) {\n        $03df355ea183d08a$var$removeNode(this, true, preserveEmptyParent);\n    }\n    /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */ replace(replaceWith, includeChildren) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        let selection = $03df355ea183d08a$var$$getSelection();\n        if (selection !== null) selection = selection.clone();\n        $03df355ea183d08a$var$errorOnInsertTextNodeOnRoot(this, replaceWith);\n        const self = this.getLatest();\n        const toReplaceKey = this.__key;\n        const key = replaceWith.__key;\n        const writableReplaceWith = replaceWith.getWritable();\n        const writableParent = this.getParentOrThrow().getWritable();\n        const size = writableParent.__size;\n        $03df355ea183d08a$var$removeFromParent(writableReplaceWith);\n        const prevSibling = self.getPreviousSibling();\n        const nextSibling = self.getNextSibling();\n        const prevKey = self.__prev;\n        const nextKey = self.__next;\n        const parentKey = self.__parent;\n        $03df355ea183d08a$var$removeNode(self, false, true);\n        if (prevSibling === null) writableParent.__first = key;\n        else {\n            const writablePrevSibling = prevSibling.getWritable();\n            writablePrevSibling.__next = key;\n        }\n        writableReplaceWith.__prev = prevKey;\n        if (nextSibling === null) writableParent.__last = key;\n        else {\n            const writableNextSibling = nextSibling.getWritable();\n            writableNextSibling.__prev = key;\n        }\n        writableReplaceWith.__next = nextKey;\n        writableReplaceWith.__parent = parentKey;\n        writableParent.__size = size;\n        if (includeChildren) this.getChildren().forEach((child)=>{\n            writableReplaceWith.append(child);\n        });\n        if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n            $03df355ea183d08a$var$$setSelection(selection);\n            const anchor = selection.anchor;\n            const focus = selection.focus;\n            if (anchor.key === toReplaceKey) $03df355ea183d08a$var$$moveSelectionPointToEnd(anchor, writableReplaceWith);\n            if (focus.key === toReplaceKey) $03df355ea183d08a$var$$moveSelectionPointToEnd(focus, writableReplaceWith);\n        }\n        if ($03df355ea183d08a$var$$getCompositionKey() === toReplaceKey) $03df355ea183d08a$var$$setCompositionKey(key);\n        return writableReplaceWith;\n    }\n    /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */ insertAfter(nodeToInsert, restoreSelection = true) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        $03df355ea183d08a$var$errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n        const writableSelf = this.getWritable();\n        const writableNodeToInsert = nodeToInsert.getWritable();\n        const oldParent = writableNodeToInsert.getParent();\n        const selection = $03df355ea183d08a$var$$getSelection();\n        let elementAnchorSelectionOnNode = false;\n        let elementFocusSelectionOnNode = false;\n        if (oldParent !== null) {\n            // TODO: this is O(n), can we improve?\n            const oldIndex = nodeToInsert.getIndexWithinParent();\n            $03df355ea183d08a$var$removeFromParent(writableNodeToInsert);\n            if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                const oldParentKey = oldParent.__key;\n                const anchor = selection.anchor;\n                const focus = selection.focus;\n                elementAnchorSelectionOnNode = anchor.type === \"element\" && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n                elementFocusSelectionOnNode = focus.type === \"element\" && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n            }\n        }\n        const nextSibling = this.getNextSibling();\n        const writableParent = this.getParentOrThrow().getWritable();\n        const insertKey = writableNodeToInsert.__key;\n        const nextKey = writableSelf.__next;\n        if (nextSibling === null) writableParent.__last = insertKey;\n        else {\n            const writableNextSibling = nextSibling.getWritable();\n            writableNextSibling.__prev = insertKey;\n        }\n        writableParent.__size++;\n        writableSelf.__next = insertKey;\n        writableNodeToInsert.__next = nextKey;\n        writableNodeToInsert.__prev = writableSelf.__key;\n        writableNodeToInsert.__parent = writableSelf.__parent;\n        if (restoreSelection && $03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const index = this.getIndexWithinParent();\n            $03df355ea183d08a$var$$updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n            const writableParentKey = writableParent.__key;\n            if (elementAnchorSelectionOnNode) selection.anchor.set(writableParentKey, index + 2, \"element\");\n            if (elementFocusSelectionOnNode) selection.focus.set(writableParentKey, index + 2, \"element\");\n        }\n        return nodeToInsert;\n    }\n    /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */ insertBefore(nodeToInsert, restoreSelection = true) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        $03df355ea183d08a$var$errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n        const writableSelf = this.getWritable();\n        const writableNodeToInsert = nodeToInsert.getWritable();\n        const insertKey = writableNodeToInsert.__key;\n        $03df355ea183d08a$var$removeFromParent(writableNodeToInsert);\n        const prevSibling = this.getPreviousSibling();\n        const writableParent = this.getParentOrThrow().getWritable();\n        const prevKey = writableSelf.__prev; // TODO: this is O(n), can we improve?\n        const index = this.getIndexWithinParent();\n        if (prevSibling === null) writableParent.__first = insertKey;\n        else {\n            const writablePrevSibling = prevSibling.getWritable();\n            writablePrevSibling.__next = insertKey;\n        }\n        writableParent.__size++;\n        writableSelf.__prev = insertKey;\n        writableNodeToInsert.__prev = prevKey;\n        writableNodeToInsert.__next = writableSelf.__key;\n        writableNodeToInsert.__parent = writableSelf.__parent;\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if (restoreSelection && $03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const parent = this.getParentOrThrow();\n            $03df355ea183d08a$var$$updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n        }\n        return nodeToInsert;\n    }\n    /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */ isParentRequired() {\n        return false;\n    }\n    /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */ createParentElementNode() {\n        return $03df355ea183d08a$var$$createParagraphNode();\n    }\n    /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */ selectPrevious(anchorOffset, focusOffset) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        const prevSibling = this.getPreviousSibling();\n        const parent = this.getParentOrThrow();\n        if (prevSibling === null) return parent.select(0, 0);\n        if ($03df355ea183d08a$var$$isElementNode(prevSibling)) return prevSibling.select();\n        else if (!$03df355ea183d08a$var$$isTextNode(prevSibling)) {\n            const index = prevSibling.getIndexWithinParent() + 1;\n            return parent.select(index, index);\n        }\n        return prevSibling.select(anchorOffset, focusOffset);\n    }\n    /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */ selectNext(anchorOffset, focusOffset) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        const nextSibling = this.getNextSibling();\n        const parent = this.getParentOrThrow();\n        if (nextSibling === null) return parent.select();\n        if ($03df355ea183d08a$var$$isElementNode(nextSibling)) return nextSibling.select(0, 0);\n        else if (!$03df355ea183d08a$var$$isTextNode(nextSibling)) {\n            const index = nextSibling.getIndexWithinParent();\n            return parent.select(index, index);\n        }\n        return nextSibling.select(anchorOffset, focusOffset);\n    }\n    /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */ markDirty() {\n        this.getWritable();\n    }\n    constructor(key){\n        // @ts-expect-error\n        this.__type = this.constructor.getType();\n        this.__parent = null;\n        this.__prev = null;\n        this.__next = null;\n        $03df355ea183d08a$var$$setNodeKey(this, key);\n        if (this.__type !== \"root\") {\n            $03df355ea183d08a$var$errorOnReadOnly();\n            $03df355ea183d08a$var$errorOnTypeKlassMismatch(this.__type, this.constructor);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$errorOnTypeKlassMismatch(type, klass) {\n    const registeredNode = $03df355ea183d08a$var$getActiveEditor()._nodes.get(type); // Common error - split in its own invariant\n    if (registeredNode === undefined) throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    const editorKlass = registeredNode.klass;\n    if (editorKlass !== klass) throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$DecoratorNode extends $03df355ea183d08a$var$LexicalNode {\n    decorate(editor, config) {\n        throw Error(`decorate: base method not extended`);\n    }\n    isIsolated() {\n        return false;\n    }\n    isInline() {\n        return true;\n    }\n    isKeyboardSelectable() {\n        return true;\n    }\n    constructor(key){\n        super(key);\n    }\n}\nfunction $03df355ea183d08a$var$$isDecoratorNode(node) {\n    return node instanceof $03df355ea183d08a$var$DecoratorNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$ElementNode extends $03df355ea183d08a$var$LexicalNode {\n    getFormat() {\n        const self = this.getLatest();\n        return self.__format;\n    }\n    getFormatType() {\n        const format = this.getFormat();\n        return $03df355ea183d08a$var$ELEMENT_FORMAT_TO_TYPE[format] || \"\";\n    }\n    getIndent() {\n        const self = this.getLatest();\n        return self.__indent;\n    }\n    getChildren() {\n        const children = [];\n        let child = this.getFirstChild();\n        while(child !== null){\n            children.push(child);\n            child = child.getNextSibling();\n        }\n        return children;\n    }\n    getChildrenKeys() {\n        const children = [];\n        let child = this.getFirstChild();\n        while(child !== null){\n            children.push(child.__key);\n            child = child.getNextSibling();\n        }\n        return children;\n    }\n    getChildrenSize() {\n        const self = this.getLatest();\n        return self.__size;\n    }\n    isEmpty() {\n        return this.getChildrenSize() === 0;\n    }\n    isDirty() {\n        const editor = $03df355ea183d08a$var$getActiveEditor();\n        const dirtyElements = editor._dirtyElements;\n        return dirtyElements !== null && dirtyElements.has(this.__key);\n    }\n    isLastChild() {\n        const self = this.getLatest();\n        const parentLastChild = this.getParentOrThrow().getLastChild();\n        return parentLastChild !== null && parentLastChild.is(self);\n    }\n    getAllTextNodes() {\n        const textNodes = [];\n        let child = this.getFirstChild();\n        while(child !== null){\n            if ($03df355ea183d08a$var$$isTextNode(child)) textNodes.push(child);\n            if ($03df355ea183d08a$var$$isElementNode(child)) {\n                const subChildrenNodes = child.getAllTextNodes();\n                textNodes.push(...subChildrenNodes);\n            }\n            child = child.getNextSibling();\n        }\n        return textNodes;\n    }\n    getFirstDescendant() {\n        let node = this.getFirstChild();\n        while(node !== null){\n            if ($03df355ea183d08a$var$$isElementNode(node)) {\n                const child = node.getFirstChild();\n                if (child !== null) {\n                    node = child;\n                    continue;\n                }\n            }\n            break;\n        }\n        return node;\n    }\n    getLastDescendant() {\n        let node = this.getLastChild();\n        while(node !== null){\n            if ($03df355ea183d08a$var$$isElementNode(node)) {\n                const child = node.getLastChild();\n                if (child !== null) {\n                    node = child;\n                    continue;\n                }\n            }\n            break;\n        }\n        return node;\n    }\n    getDescendantByIndex(index) {\n        const children = this.getChildren();\n        const childrenLength = children.length; // For non-empty element nodes, we resolve its descendant\n        // (either a leaf node or the bottom-most element)\n        if (index >= childrenLength) {\n            const resolvedNode = children[childrenLength - 1];\n            return $03df355ea183d08a$var$$isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n        }\n        const resolvedNode = children[index];\n        return $03df355ea183d08a$var$$isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n    }\n    getFirstChild() {\n        const self = this.getLatest();\n        const firstKey = self.__first;\n        return firstKey === null ? null : $03df355ea183d08a$var$$getNodeByKey(firstKey);\n    }\n    getFirstChildOrThrow() {\n        const firstChild = this.getFirstChild();\n        if (firstChild === null) throw Error(`Expected node ${this.__key} to have a first child.`);\n        return firstChild;\n    }\n    getLastChild() {\n        const self = this.getLatest();\n        const lastKey = self.__last;\n        return lastKey === null ? null : $03df355ea183d08a$var$$getNodeByKey(lastKey);\n    }\n    getLastChildOrThrow() {\n        const lastChild = this.getLastChild();\n        if (lastChild === null) throw Error(`Expected node ${this.__key} to have a last child.`);\n        return lastChild;\n    }\n    getChildAtIndex(index) {\n        const size = this.getChildrenSize();\n        let node;\n        let i;\n        if (index < size / 2) {\n            node = this.getFirstChild();\n            i = 0;\n            while(node !== null && i <= index){\n                if (i === index) return node;\n                node = node.getNextSibling();\n                i++;\n            }\n            return null;\n        }\n        node = this.getLastChild();\n        i = size - 1;\n        while(node !== null && i >= index){\n            if (i === index) return node;\n            node = node.getPreviousSibling();\n            i--;\n        }\n        return null;\n    }\n    getTextContent() {\n        let textContent = \"\";\n        const children = this.getChildren();\n        const childrenLength = children.length;\n        for(let i = 0; i < childrenLength; i++){\n            const child = children[i];\n            textContent += child.getTextContent();\n            if ($03df355ea183d08a$var$$isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) textContent += $03df355ea183d08a$var$DOUBLE_LINE_BREAK;\n        }\n        return textContent;\n    }\n    getTextContentSize() {\n        let textContentSize = 0;\n        const children = this.getChildren();\n        const childrenLength = children.length;\n        for(let i = 0; i < childrenLength; i++){\n            const child = children[i];\n            textContentSize += child.getTextContentSize();\n            if ($03df355ea183d08a$var$$isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) textContentSize += $03df355ea183d08a$var$DOUBLE_LINE_BREAK.length;\n        }\n        return textContentSize;\n    }\n    getDirection() {\n        const self = this.getLatest();\n        return self.__dir;\n    }\n    hasFormat(type) {\n        if (type !== \"\") {\n            const formatFlag = $03df355ea183d08a$var$ELEMENT_TYPE_TO_FORMAT[type];\n            return (this.getFormat() & formatFlag) !== 0;\n        }\n        return false;\n    }\n    select(_anchorOffset, _focusOffset) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        const selection = $03df355ea183d08a$var$$getSelection();\n        let anchorOffset = _anchorOffset;\n        let focusOffset = _focusOffset;\n        const childrenCount = this.getChildrenSize();\n        if (!this.canBeEmpty()) {\n            if (_anchorOffset === 0 && _focusOffset === 0) {\n                const firstChild = this.getFirstChild();\n                if ($03df355ea183d08a$var$$isTextNode(firstChild) || $03df355ea183d08a$var$$isElementNode(firstChild)) return firstChild.select(0, 0);\n            } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n                const lastChild = this.getLastChild();\n                if ($03df355ea183d08a$var$$isTextNode(lastChild) || $03df355ea183d08a$var$$isElementNode(lastChild)) return lastChild.select();\n            }\n        }\n        if (anchorOffset === undefined) anchorOffset = childrenCount;\n        if (focusOffset === undefined) focusOffset = childrenCount;\n        const key = this.__key;\n        if (!$03df355ea183d08a$var$$isRangeSelection(selection)) return $03df355ea183d08a$var$internalMakeRangeSelection(key, anchorOffset, key, focusOffset, \"element\", \"element\");\n        else {\n            selection.anchor.set(key, anchorOffset, \"element\");\n            selection.focus.set(key, focusOffset, \"element\");\n            selection.dirty = true;\n        }\n        return selection;\n    }\n    selectStart() {\n        const firstNode = this.getFirstDescendant();\n        if ($03df355ea183d08a$var$$isElementNode(firstNode) || $03df355ea183d08a$var$$isTextNode(firstNode)) return firstNode.select(0, 0);\n         // Decorator or LineBreak\n        if (firstNode !== null) return firstNode.selectPrevious();\n        return this.select(0, 0);\n    }\n    selectEnd() {\n        const lastNode = this.getLastDescendant();\n        if ($03df355ea183d08a$var$$isElementNode(lastNode) || $03df355ea183d08a$var$$isTextNode(lastNode)) return lastNode.select();\n         // Decorator or LineBreak\n        if (lastNode !== null) return lastNode.selectNext();\n        return this.select();\n    }\n    clear() {\n        const writableSelf = this.getWritable();\n        const children = this.getChildren();\n        children.forEach((child)=>child.remove());\n        return writableSelf;\n    }\n    append(...nodesToAppend) {\n        return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n    }\n    setDirection(direction) {\n        const self = this.getWritable();\n        self.__dir = direction;\n        return self;\n    }\n    setFormat(type) {\n        const self = this.getWritable();\n        self.__format = type !== \"\" ? $03df355ea183d08a$var$ELEMENT_TYPE_TO_FORMAT[type] : 0;\n        return this;\n    }\n    setIndent(indentLevel) {\n        const self = this.getWritable();\n        self.__indent = indentLevel;\n        return this;\n    }\n    splice(start, deleteCount, nodesToInsert) {\n        const nodesToInsertLength = nodesToInsert.length;\n        const oldSize = this.getChildrenSize();\n        const writableSelf = this.getWritable();\n        const writableSelfKey = writableSelf.__key;\n        const nodesToInsertKeys = [];\n        const nodesToRemoveKeys = [];\n        const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n        let nodeBeforeRange = null;\n        let newSize = oldSize - deleteCount + nodesToInsertLength;\n        if (start !== 0) {\n            if (start === oldSize) nodeBeforeRange = this.getLastChild();\n            else {\n                const node = this.getChildAtIndex(start);\n                if (node !== null) nodeBeforeRange = node.getPreviousSibling();\n            }\n        }\n        if (deleteCount > 0) {\n            let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n            for(let i = 0; i < deleteCount; i++){\n                if (nodeToDelete === null) throw Error(`splice: sibling not found`);\n                const nextSibling = nodeToDelete.getNextSibling();\n                const nodeKeyToDelete = nodeToDelete.__key;\n                const writableNodeToDelete = nodeToDelete.getWritable();\n                $03df355ea183d08a$var$removeFromParent(writableNodeToDelete);\n                nodesToRemoveKeys.push(nodeKeyToDelete);\n                nodeToDelete = nextSibling;\n            }\n        }\n        let prevNode = nodeBeforeRange;\n        for(let i = 0; i < nodesToInsertLength; i++){\n            const nodeToInsert = nodesToInsert[i];\n            if (prevNode !== null && nodeToInsert.is(prevNode)) nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n            const writableNodeToInsert = nodeToInsert.getWritable();\n            if (writableNodeToInsert.__parent === writableSelfKey) newSize--;\n            $03df355ea183d08a$var$removeFromParent(writableNodeToInsert);\n            const nodeKeyToInsert = nodeToInsert.__key;\n            if (prevNode === null) {\n                writableSelf.__first = nodeKeyToInsert;\n                writableNodeToInsert.__prev = null;\n            } else {\n                const writablePrevNode = prevNode.getWritable();\n                writablePrevNode.__next = nodeKeyToInsert;\n                writableNodeToInsert.__prev = writablePrevNode.__key;\n            }\n            if (nodeToInsert.__key === writableSelfKey) throw Error(`append: attempting to append self`);\n             // Set child parent to self\n            writableNodeToInsert.__parent = writableSelfKey;\n            nodesToInsertKeys.push(nodeKeyToInsert);\n            prevNode = nodeToInsert;\n        }\n        if (start + deleteCount === oldSize) {\n            if (prevNode !== null) {\n                const writablePrevNode = prevNode.getWritable();\n                writablePrevNode.__next = null;\n                writableSelf.__last = prevNode.__key;\n            }\n        } else if (nodeAfterRange !== null) {\n            const writableNodeAfterRange = nodeAfterRange.getWritable();\n            if (prevNode !== null) {\n                const writablePrevNode = prevNode.getWritable();\n                writableNodeAfterRange.__prev = prevNode.__key;\n                writablePrevNode.__next = nodeAfterRange.__key;\n            } else writableNodeAfterRange.__prev = null;\n        }\n        writableSelf.__size = newSize; // In case of deletion we need to adjust selection, unlink removed nodes\n        // and clean up node itself if it becomes empty. None of these needed\n        // for insertion-only cases\n        if (nodesToRemoveKeys.length) {\n            // Adjusting selection, in case node that was anchor/focus will be deleted\n            const selection = $03df355ea183d08a$var$$getSelection();\n            if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n                const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n                const { anchor: anchor , focus: focus  } = selection;\n                if ($03df355ea183d08a$var$isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) $03df355ea183d08a$var$moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n                if ($03df355ea183d08a$var$isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) $03df355ea183d08a$var$moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n                 // Cleanup if node can't be empty\n                if (newSize === 0 && !this.canBeEmpty() && !$03df355ea183d08a$var$$isRootOrShadowRoot(this)) this.remove();\n            }\n        }\n        return writableSelf;\n    }\n    exportJSON() {\n        return {\n            children: [],\n            direction: this.getDirection(),\n            format: this.getFormatType(),\n            indent: this.getIndent(),\n            type: \"element\",\n            version: 1\n        };\n    }\n    insertNewAfter(selection, restoreSelection) {\n        return null;\n    }\n    canInsertTab() {\n        return false;\n    }\n    canIndent() {\n        return true;\n    }\n    /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */ collapseAtStart(selection) {\n        return false;\n    }\n    excludeFromCopy(destination) {\n        return false;\n    }\n    canExtractContents() {\n        return true;\n    }\n    canReplaceWith(replacement) {\n        return true;\n    }\n    canInsertAfter(node) {\n        return true;\n    }\n    canBeEmpty() {\n        return true;\n    }\n    canInsertTextBefore() {\n        return true;\n    }\n    canInsertTextAfter() {\n        return true;\n    }\n    isInline() {\n        return false;\n    }\n    // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n    // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n    // will return the immediate first child underneath TableCellNode instead of RootNode.\n    isShadowRoot() {\n        return false;\n    }\n    canMergeWith(node) {\n        return false;\n    }\n    extractWithChild(child, selection, destination) {\n        return false;\n    }\n    /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ constructor(key){\n        super(key);\n        this.__first = null;\n        this.__last = null;\n        this.__size = 0;\n        this.__format = 0;\n        this.__indent = 0;\n        this.__dir = null;\n    }\n}\nfunction $03df355ea183d08a$var$$isElementNode(node) {\n    return node instanceof $03df355ea183d08a$var$ElementNode;\n}\nfunction $03df355ea183d08a$var$isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n    let node = point.getNode();\n    while(node){\n        const nodeKey = node.__key;\n        if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) return true;\n        node = node.getParent();\n    }\n    return false;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$RootNode extends $03df355ea183d08a$var$ElementNode {\n    /** @internal */ static getType() {\n        return \"root\";\n    }\n    static clone() {\n        return new $03df355ea183d08a$var$RootNode();\n    }\n    getTopLevelElementOrThrow() {\n        throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n    getTextContent() {\n        const cachedText = this.__cachedText;\n        if ($03df355ea183d08a$var$isCurrentlyReadOnlyMode() || $03df355ea183d08a$var$getActiveEditor()._dirtyType === $03df355ea183d08a$var$NO_DIRTY_NODES) {\n            if (cachedText !== null) return cachedText;\n        }\n        return super.getTextContent();\n    }\n    remove() {\n        throw Error(`remove: cannot be called on root nodes`);\n    }\n    replace(node) {\n        throw Error(`replace: cannot be called on root nodes`);\n    }\n    insertBefore(nodeToInsert) {\n        throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n    insertAfter(nodeToInsert) {\n        throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n    updateDOM(prevNode, dom) {\n        return false;\n    }\n    append(...nodesToAppend) {\n        for(let i = 0; i < nodesToAppend.length; i++){\n            const node = nodesToAppend[i];\n            if (!$03df355ea183d08a$var$$isElementNode(node) && !$03df355ea183d08a$var$$isDecoratorNode(node)) throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n        return super.append(...nodesToAppend);\n    }\n    static importJSON(serializedNode) {\n        // We don't create a root, and instead use the existing root.\n        const node = $03df355ea183d08a$var$$getRoot();\n        node.setFormat(serializedNode.format);\n        node.setIndent(serializedNode.indent);\n        node.setDirection(serializedNode.direction);\n        return node;\n    }\n    exportJSON() {\n        return {\n            children: [],\n            direction: this.getDirection(),\n            format: this.getFormatType(),\n            indent: this.getIndent(),\n            type: \"root\",\n            version: 1\n        };\n    }\n    collapseAtStart() {\n        return true;\n    }\n    constructor(){\n        super(\"root\");\n        this.__cachedText = null;\n    }\n}\nfunction $03df355ea183d08a$var$$createRootNode() {\n    return new $03df355ea183d08a$var$RootNode();\n}\nfunction $03df355ea183d08a$var$$isRootNode(node) {\n    return node instanceof $03df355ea183d08a$var$RootNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$editorStateHasDirtySelection(editorState, editor) {\n    const currentSelection = editor.getEditorState()._selection;\n    const pendingSelection = editorState._selection; // Check if we need to update because of changes in selection\n    if (pendingSelection !== null) {\n        if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) return true;\n    } else if (currentSelection !== null) return true;\n    return false;\n}\nfunction $03df355ea183d08a$var$cloneEditorState(current) {\n    return new $03df355ea183d08a$var$EditorState(new Map(current._nodeMap));\n}\nfunction $03df355ea183d08a$var$createEmptyEditorState() {\n    return new $03df355ea183d08a$var$EditorState(new Map([\n        [\n            \"root\",\n            $03df355ea183d08a$var$$createRootNode()\n        ]\n    ]));\n}\nfunction $03df355ea183d08a$var$exportNodeToJSON(node) {\n    const serializedNode = node.exportJSON();\n    const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n    if (serializedNode.type !== nodeClass.getType()) throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n     // @ts-expect-error TODO Replace Class utility type with InstanceType\n    const serializedChildren = serializedNode.children;\n    if ($03df355ea183d08a$var$$isElementNode(node)) {\n        if (!Array.isArray(serializedChildren)) throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n        const children = node.getChildren();\n        for(let i = 0; i < children.length; i++){\n            const child = children[i];\n            const serializedChildNode = $03df355ea183d08a$var$exportNodeToJSON(child);\n            serializedChildren.push(serializedChildNode);\n        }\n    } // @ts-expect-error\n    return serializedNode;\n}\nclass $03df355ea183d08a$var$EditorState {\n    isEmpty() {\n        return this._nodeMap.size === 1 && this._selection === null;\n    }\n    read(callbackFn) {\n        return $03df355ea183d08a$var$readEditorState(this, callbackFn);\n    }\n    clone(selection) {\n        const editorState = new $03df355ea183d08a$var$EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n        editorState._readOnly = true;\n        return editorState;\n    }\n    toJSON() {\n        return $03df355ea183d08a$var$readEditorState(this, ()=>({\n                root: $03df355ea183d08a$var$exportNodeToJSON($03df355ea183d08a$var$$getRoot())\n            }));\n    }\n    constructor(nodeMap, selection){\n        this._nodeMap = nodeMap;\n        this._selection = selection || null;\n        this._flushSync = false;\n        this._readOnly = false;\n    }\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$LineBreakNode extends $03df355ea183d08a$var$LexicalNode {\n    static getType() {\n        return \"linebreak\";\n    }\n    static clone(node) {\n        return new $03df355ea183d08a$var$LineBreakNode(node.__key);\n    }\n    getTextContent() {\n        return \"\\n\";\n    }\n    createDOM() {\n        return document.createElement(\"br\");\n    }\n    updateDOM() {\n        return false;\n    }\n    static importDOM() {\n        return {\n            br: (node)=>{\n                const parentElement = node.parentElement; // If the <br> is the only child, then skip including it\n                if (parentElement != null && parentElement.firstChild === node && parentElement.lastChild === node) return null;\n                return {\n                    conversion: $03df355ea183d08a$var$convertLineBreakElement,\n                    priority: 0\n                };\n            }\n        };\n    }\n    static importJSON(serializedLineBreakNode) {\n        return $03df355ea183d08a$var$$createLineBreakNode();\n    }\n    exportJSON() {\n        return {\n            type: \"linebreak\",\n            version: 1\n        };\n    }\n    constructor(key){\n        super(key);\n    }\n}\nfunction $03df355ea183d08a$var$convertLineBreakElement(node) {\n    return {\n        node: $03df355ea183d08a$var$$createLineBreakNode()\n    };\n}\nfunction $03df355ea183d08a$var$$createLineBreakNode() {\n    return $03df355ea183d08a$var$$applyNodeReplacement(new $03df355ea183d08a$var$LineBreakNode());\n}\nfunction $03df355ea183d08a$var$$isLineBreakNode(node) {\n    return node instanceof $03df355ea183d08a$var$LineBreakNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ function $03df355ea183d08a$var$getElementOuterTag(node, format) {\n    if (format & $03df355ea183d08a$var$IS_CODE) return \"code\";\n    if (format & $03df355ea183d08a$var$IS_HIGHLIGHT) return \"mark\";\n    if (format & $03df355ea183d08a$var$IS_SUBSCRIPT) return \"sub\";\n    if (format & $03df355ea183d08a$var$IS_SUPERSCRIPT) return \"sup\";\n    return null;\n}\nfunction $03df355ea183d08a$var$getElementInnerTag(node, format) {\n    if (format & $03df355ea183d08a$var$IS_BOLD) return \"strong\";\n    if (format & $03df355ea183d08a$var$IS_ITALIC) return \"em\";\n    return \"span\";\n}\nfunction $03df355ea183d08a$var$setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n    const domClassList = dom.classList; // Firstly we handle the base theme.\n    let classNames = $03df355ea183d08a$var$getCachedClassNameArray(textClassNames, \"base\");\n    if (classNames !== undefined) domClassList.add(...classNames);\n     // Secondly we handle the special case: underline + strikethrough.\n    // We have to do this as we need a way to compose the fact that\n    // the same CSS property will need to be used: text-decoration.\n    // In an ideal world we shouldn't have to do this, but there's no\n    // easy workaround for many atomic CSS systems today.\n    classNames = $03df355ea183d08a$var$getCachedClassNameArray(textClassNames, \"underlineStrikethrough\");\n    let hasUnderlineStrikethrough = false;\n    const prevUnderlineStrikethrough = prevFormat & $03df355ea183d08a$var$IS_UNDERLINE && prevFormat & $03df355ea183d08a$var$IS_STRIKETHROUGH;\n    const nextUnderlineStrikethrough = nextFormat & $03df355ea183d08a$var$IS_UNDERLINE && nextFormat & $03df355ea183d08a$var$IS_STRIKETHROUGH;\n    if (classNames !== undefined) {\n        if (nextUnderlineStrikethrough) {\n            hasUnderlineStrikethrough = true;\n            if (!prevUnderlineStrikethrough) domClassList.add(...classNames);\n        } else if (prevUnderlineStrikethrough) domClassList.remove(...classNames);\n    }\n    for(const key in $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT){\n        const format = key;\n        const flag = $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[format];\n        classNames = $03df355ea183d08a$var$getCachedClassNameArray(textClassNames, key);\n        if (classNames !== undefined) {\n            if (nextFormat & flag) {\n                if (hasUnderlineStrikethrough && (key === \"underline\" || key === \"strikethrough\")) {\n                    if (prevFormat & flag) domClassList.remove(...classNames);\n                    continue;\n                }\n                if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === \"underline\" || key === \"strikethrough\") domClassList.add(...classNames);\n            } else if (prevFormat & flag) domClassList.remove(...classNames);\n        }\n    }\n}\nfunction $03df355ea183d08a$var$diffComposedText(a, b) {\n    const aLength = a.length;\n    const bLength = b.length;\n    let left = 0;\n    let right = 0;\n    while(left < aLength && left < bLength && a[left] === b[left])left++;\n    while(right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1])right++;\n    return [\n        left,\n        aLength - left - right,\n        b.slice(left, bLength - right)\n    ];\n}\nfunction $03df355ea183d08a$var$setTextContent(nextText, dom, node) {\n    const firstChild = dom.firstChild;\n    const isComposing = node.isComposing(); // Always add a suffix if we're composing a node\n    const suffix = isComposing ? $03df355ea183d08a$var$COMPOSITION_SUFFIX : \"\";\n    const text = nextText + suffix;\n    if (firstChild == null) dom.textContent = text;\n    else {\n        const nodeValue = firstChild.nodeValue;\n        if (nodeValue !== text) {\n            if (isComposing || $03df355ea183d08a$var$IS_FIREFOX) {\n                // We also use the diff composed text for general text in FF to avoid\n                // the spellcheck red line from flickering.\n                const [index, remove, insert] = $03df355ea183d08a$var$diffComposedText(nodeValue, text);\n                if (remove !== 0) // @ts-expect-error\n                firstChild.deleteData(index, remove);\n                 // @ts-expect-error\n                firstChild.insertData(index, insert);\n            } else firstChild.nodeValue = text;\n        }\n    }\n}\nfunction $03df355ea183d08a$var$createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n    $03df355ea183d08a$var$setTextContent(text, innerDOM, node);\n    const theme = config.theme; // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined) $03df355ea183d08a$var$setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n}\nfunction $03df355ea183d08a$var$wrapElementWith(element, tag) {\n    const el = document.createElement(tag);\n    el.appendChild(element);\n    return el;\n}\n/** @noInheritDoc */ class $03df355ea183d08a$var$TextNode extends $03df355ea183d08a$var$LexicalNode {\n    /** @internal */ /** @internal */ /** @internal */ /** @internal */ static getType() {\n        return \"text\";\n    }\n    static clone(node) {\n        return new $03df355ea183d08a$var$TextNode(node.__text, node.__key);\n    }\n    getFormat() {\n        const self = this.getLatest();\n        return self.__format;\n    }\n    getDetail() {\n        const self = this.getLatest();\n        return self.__detail;\n    }\n    getMode() {\n        const self = this.getLatest();\n        return $03df355ea183d08a$var$TEXT_TYPE_TO_MODE[self.__mode];\n    }\n    getStyle() {\n        const self = this.getLatest();\n        return self.__style;\n    }\n    isToken() {\n        const self = this.getLatest();\n        return self.__mode === $03df355ea183d08a$var$IS_TOKEN;\n    }\n    isComposing() {\n        return this.__key === $03df355ea183d08a$var$$getCompositionKey();\n    }\n    isSegmented() {\n        const self = this.getLatest();\n        return self.__mode === $03df355ea183d08a$var$IS_SEGMENTED;\n    }\n    isDirectionless() {\n        const self = this.getLatest();\n        return (self.__detail & $03df355ea183d08a$var$IS_DIRECTIONLESS) !== 0;\n    }\n    isUnmergeable() {\n        const self = this.getLatest();\n        return (self.__detail & $03df355ea183d08a$var$IS_UNMERGEABLE) !== 0;\n    }\n    hasFormat(type) {\n        const formatFlag = $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[type];\n        return (this.getFormat() & formatFlag) !== 0;\n    }\n    isSimpleText() {\n        return this.__type === \"text\" && this.__mode === 0;\n    }\n    getTextContent() {\n        const self = this.getLatest();\n        return self.__text;\n    }\n    getFormatFlags(type, alignWithFormat) {\n        const self = this.getLatest();\n        const format = self.__format;\n        return $03df355ea183d08a$var$toggleTextFormatType(format, type, alignWithFormat);\n    }\n    createDOM(config) {\n        const format = this.__format;\n        const outerTag = $03df355ea183d08a$var$getElementOuterTag(this, format);\n        const innerTag = $03df355ea183d08a$var$getElementInnerTag(this, format);\n        const tag = outerTag === null ? innerTag : outerTag;\n        const dom = document.createElement(tag);\n        let innerDOM = dom;\n        if (outerTag !== null) {\n            innerDOM = document.createElement(innerTag);\n            dom.appendChild(innerDOM);\n        }\n        const text = this.__text;\n        $03df355ea183d08a$var$createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n        const style = this.__style;\n        if (style !== \"\") dom.style.cssText = style;\n        return dom;\n    }\n    updateDOM(prevNode, dom, config) {\n        const nextText = this.__text;\n        const prevFormat = prevNode.__format;\n        const nextFormat = this.__format;\n        const prevOuterTag = $03df355ea183d08a$var$getElementOuterTag(this, prevFormat);\n        const nextOuterTag = $03df355ea183d08a$var$getElementOuterTag(this, nextFormat);\n        const prevInnerTag = $03df355ea183d08a$var$getElementInnerTag(this, prevFormat);\n        const nextInnerTag = $03df355ea183d08a$var$getElementInnerTag(this, nextFormat);\n        const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n        const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n        if (prevTag !== nextTag) return true;\n        if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n            // should always be an element\n            const prevInnerDOM = dom.firstChild;\n            if (prevInnerDOM == null) throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n            const nextInnerDOM = document.createElement(nextInnerTag);\n            $03df355ea183d08a$var$createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n            dom.replaceChild(nextInnerDOM, prevInnerDOM);\n            return false;\n        }\n        let innerDOM = dom;\n        if (nextOuterTag !== null) {\n            if (prevOuterTag !== null) {\n                innerDOM = dom.firstChild;\n                if (innerDOM == null) throw Error(`updateDOM: innerDOM is null or undefined`);\n            }\n        }\n        $03df355ea183d08a$var$setTextContent(nextText, innerDOM, this);\n        const theme = config.theme; // Apply theme class names\n        const textClassNames = theme.text;\n        if (textClassNames !== undefined && prevFormat !== nextFormat) $03df355ea183d08a$var$setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n        const prevStyle = prevNode.__style;\n        const nextStyle = this.__style;\n        if (prevStyle !== nextStyle) dom.style.cssText = nextStyle;\n        return false;\n    }\n    static importDOM() {\n        return {\n            \"#text\": ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextDOMNode,\n                    priority: 0\n                }),\n            b: ()=>({\n                    conversion: $03df355ea183d08a$var$convertBringAttentionToElement,\n                    priority: 0\n                }),\n            br: ()=>({\n                    conversion: $03df355ea183d08a$var$convertLineBreakToElement,\n                    priority: 0\n                }),\n            code: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            em: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            i: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            s: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            span: ()=>({\n                    conversion: $03df355ea183d08a$var$convertSpanElement,\n                    priority: 0\n                }),\n            strong: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            sub: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            sup: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                }),\n            u: ()=>({\n                    conversion: $03df355ea183d08a$var$convertTextFormatElement,\n                    priority: 0\n                })\n        };\n    }\n    static importJSON(serializedNode) {\n        const node = $03df355ea183d08a$var$$createTextNode(serializedNode.text);\n        node.setFormat(serializedNode.format);\n        node.setDetail(serializedNode.detail);\n        node.setMode(serializedNode.mode);\n        node.setStyle(serializedNode.style);\n        return node;\n    }\n    // for headless mode where people might use Lexical to generate\n    // HTML content and not have the ability to use CSS classes.\n    exportDOM(editor) {\n        let { element: element  } = super.exportDOM(editor); // This is the only way to properly add support for most clients,\n        // even if it's semantically incorrect to have to resort to using\n        // <b>, <u>, <s>, <i> elements.\n        if (element !== null) {\n            if (this.hasFormat(\"bold\")) element = $03df355ea183d08a$var$wrapElementWith(element, \"b\");\n            if (this.hasFormat(\"italic\")) element = $03df355ea183d08a$var$wrapElementWith(element, \"i\");\n            if (this.hasFormat(\"strikethrough\")) element = $03df355ea183d08a$var$wrapElementWith(element, \"s\");\n            if (this.hasFormat(\"underline\")) element = $03df355ea183d08a$var$wrapElementWith(element, \"u\");\n        }\n        return {\n            element: element\n        };\n    }\n    exportJSON() {\n        return {\n            detail: this.getDetail(),\n            format: this.getFormat(),\n            mode: this.getMode(),\n            style: this.getStyle(),\n            text: this.getTextContent(),\n            type: \"text\",\n            version: 1\n        };\n    }\n    selectionTransform(prevSelection, nextSelection) {\n        return;\n    }\n    setFormat(format) {\n        const self = this.getWritable();\n        self.__format = typeof format === \"string\" ? $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[format] : format;\n        return self;\n    }\n    setDetail(detail) {\n        const self = this.getWritable();\n        self.__detail = typeof detail === \"string\" ? $03df355ea183d08a$var$DETAIL_TYPE_TO_DETAIL[detail] : detail;\n        return self;\n    }\n    setStyle(style) {\n        const self = this.getWritable();\n        self.__style = style;\n        return self;\n    }\n    toggleFormat(type) {\n        const formatFlag = $03df355ea183d08a$var$TEXT_TYPE_TO_FORMAT[type];\n        return this.setFormat(this.getFormat() ^ formatFlag);\n    }\n    toggleDirectionless() {\n        const self = this.getWritable();\n        self.__detail ^= $03df355ea183d08a$var$IS_DIRECTIONLESS;\n        return self;\n    }\n    toggleUnmergeable() {\n        const self = this.getWritable();\n        self.__detail ^= $03df355ea183d08a$var$IS_UNMERGEABLE;\n        return self;\n    }\n    setMode(type) {\n        const mode = $03df355ea183d08a$var$TEXT_MODE_TO_TYPE[type];\n        if (this.__mode === mode) return this;\n        const self = this.getWritable();\n        self.__mode = mode;\n        return self;\n    }\n    setTextContent(text) {\n        if (this.__text === text) return this;\n        const self = this.getWritable();\n        self.__text = text;\n        return self;\n    }\n    select(_anchorOffset, _focusOffset) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        let anchorOffset = _anchorOffset;\n        let focusOffset = _focusOffset;\n        const selection = $03df355ea183d08a$var$$getSelection();\n        const text = this.getTextContent();\n        const key = this.__key;\n        if (typeof text === \"string\") {\n            const lastOffset = text.length;\n            if (anchorOffset === undefined) anchorOffset = lastOffset;\n            if (focusOffset === undefined) focusOffset = lastOffset;\n        } else {\n            anchorOffset = 0;\n            focusOffset = 0;\n        }\n        if (!$03df355ea183d08a$var$$isRangeSelection(selection)) return $03df355ea183d08a$var$internalMakeRangeSelection(key, anchorOffset, key, focusOffset, \"text\", \"text\");\n        else {\n            const compositionKey = $03df355ea183d08a$var$$getCompositionKey();\n            if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) $03df355ea183d08a$var$$setCompositionKey(key);\n            selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n        }\n        return selection;\n    }\n    spliceText(offset, delCount, newText, moveSelection) {\n        const writableSelf = this.getWritable();\n        const text = writableSelf.__text;\n        const handledTextLength = newText.length;\n        let index = offset;\n        if (index < 0) {\n            index = handledTextLength + index;\n            if (index < 0) index = 0;\n        }\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if (moveSelection && $03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const newOffset = offset + handledTextLength;\n            selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n        }\n        const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n        writableSelf.__text = updatedText;\n        return writableSelf;\n    }\n    canInsertTextBefore() {\n        return true;\n    }\n    canInsertTextAfter() {\n        return true;\n    }\n    canContainTabs() {\n        return false;\n    }\n    splitText(...splitOffsets) {\n        $03df355ea183d08a$var$errorOnReadOnly();\n        const self = this.getLatest();\n        const textContent = self.getTextContent();\n        const key = self.__key;\n        const compositionKey = $03df355ea183d08a$var$$getCompositionKey();\n        const offsetsSet = new Set(splitOffsets);\n        const parts = [];\n        const textLength = textContent.length;\n        let string = \"\";\n        for(let i = 0; i < textLength; i++){\n            if (string !== \"\" && offsetsSet.has(i)) {\n                parts.push(string);\n                string = \"\";\n            }\n            string += textContent[i];\n        }\n        if (string !== \"\") parts.push(string);\n        const partsLength = parts.length;\n        if (partsLength === 0) return [];\n        else if (parts[0] === textContent) return [\n            self\n        ];\n        const firstPart = parts[0];\n        const parent = self.getParentOrThrow();\n        let writableNode;\n        const format = self.getFormat();\n        const style = self.getStyle();\n        const detail = self.__detail;\n        let hasReplacedSelf = false;\n        if (self.isSegmented()) {\n            // Create a new TextNode\n            writableNode = $03df355ea183d08a$var$$createTextNode(firstPart);\n            writableNode.__format = format;\n            writableNode.__style = style;\n            writableNode.__detail = detail;\n            hasReplacedSelf = true;\n        } else {\n            // For the first part, update the existing node\n            writableNode = self.getWritable();\n            writableNode.__text = firstPart;\n        } // Handle selection\n        const selection = $03df355ea183d08a$var$$getSelection(); // Then handle all other parts\n        const splitNodes = [\n            writableNode\n        ];\n        let textSize = firstPart.length;\n        for(let i = 1; i < partsLength; i++){\n            const part = parts[i];\n            const partSize = part.length;\n            const sibling = $03df355ea183d08a$var$$createTextNode(part).getWritable();\n            sibling.__format = format;\n            sibling.__style = style;\n            sibling.__detail = detail;\n            const siblingKey = sibling.__key;\n            const nextTextSize = textSize + partSize;\n            if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n                const anchor = selection.anchor;\n                const focus = selection.focus;\n                if (anchor.key === key && anchor.type === \"text\" && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n                    anchor.key = siblingKey;\n                    anchor.offset -= textSize;\n                    selection.dirty = true;\n                }\n                if (focus.key === key && focus.type === \"text\" && focus.offset > textSize && focus.offset <= nextTextSize) {\n                    focus.key = siblingKey;\n                    focus.offset -= textSize;\n                    selection.dirty = true;\n                }\n            }\n            if (compositionKey === key) $03df355ea183d08a$var$$setCompositionKey(siblingKey);\n            textSize = nextTextSize;\n            splitNodes.push(sibling);\n        } // Insert the nodes into the parent's children\n        $03df355ea183d08a$var$internalMarkSiblingsAsDirty(this);\n        const writableParent = parent.getWritable();\n        const insertionIndex = this.getIndexWithinParent();\n        if (hasReplacedSelf) {\n            writableParent.splice(insertionIndex, 0, splitNodes);\n            this.remove();\n        } else writableParent.splice(insertionIndex, 1, splitNodes);\n        if ($03df355ea183d08a$var$$isRangeSelection(selection)) $03df355ea183d08a$var$$updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n        return splitNodes;\n    }\n    mergeWithSibling(target) {\n        const isBefore = target === this.getPreviousSibling();\n        if (!isBefore && target !== this.getNextSibling()) throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n        const key = this.__key;\n        const targetKey = target.__key;\n        const text = this.__text;\n        const textLength = text.length;\n        const compositionKey = $03df355ea183d08a$var$$getCompositionKey();\n        if (compositionKey === targetKey) $03df355ea183d08a$var$$setCompositionKey(key);\n        const selection = $03df355ea183d08a$var$$getSelection();\n        if ($03df355ea183d08a$var$$isRangeSelection(selection)) {\n            const anchor = selection.anchor;\n            const focus = selection.focus;\n            if (anchor !== null && anchor.key === targetKey) {\n                $03df355ea183d08a$var$adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n                selection.dirty = true;\n            }\n            if (focus !== null && focus.key === targetKey) {\n                $03df355ea183d08a$var$adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n                selection.dirty = true;\n            }\n        }\n        const targetText = target.__text;\n        const newText = isBefore ? targetText + text : text + targetText;\n        this.setTextContent(newText);\n        const writableSelf = this.getWritable();\n        target.remove();\n        return writableSelf;\n    }\n    isTextEntity() {\n        return false;\n    }\n    constructor(text, key){\n        super(key);\n        this.__text = text;\n        this.__format = 0;\n        this.__style = \"\";\n        this.__mode = 0;\n        this.__detail = 0;\n    }\n}\nfunction $03df355ea183d08a$var$convertSpanElement(domNode) {\n    // domNode is a <span> since we matched it by nodeName\n    const span = domNode; // Google Docs uses span tags + font-weight for bold text\n    const hasBoldFontWeight = span.style.fontWeight === \"700\"; // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n    const hasLinethroughTextDecoration = span.style.textDecoration === \"line-through\"; // Google Docs uses span tags + font-style for italic text\n    const hasItalicFontStyle = span.style.fontStyle === \"italic\"; // Google Docs uses span tags + text-decoration: underline for underline text\n    const hasUnderlineTextDecoration = span.style.textDecoration === \"underline\"; // Google Docs uses span tags + vertical-align to specify subscript and superscript\n    const verticalAlign = span.style.verticalAlign;\n    return {\n        forChild: (lexicalNode)=>{\n            if (!$03df355ea183d08a$var$$isTextNode(lexicalNode)) return lexicalNode;\n            if (hasBoldFontWeight) lexicalNode.toggleFormat(\"bold\");\n            if (hasLinethroughTextDecoration) lexicalNode.toggleFormat(\"strikethrough\");\n            if (hasItalicFontStyle) lexicalNode.toggleFormat(\"italic\");\n            if (hasUnderlineTextDecoration) lexicalNode.toggleFormat(\"underline\");\n            if (verticalAlign === \"sub\") lexicalNode.toggleFormat(\"subscript\");\n            if (verticalAlign === \"super\") lexicalNode.toggleFormat(\"superscript\");\n            return lexicalNode;\n        },\n        node: null\n    };\n}\nfunction $03df355ea183d08a$var$convertLineBreakToElement() {\n    return {\n        node: $03df355ea183d08a$var$$createLineBreakNode()\n    };\n}\nfunction $03df355ea183d08a$var$convertBringAttentionToElement(domNode) {\n    // domNode is a <b> since we matched it by nodeName\n    const b = domNode; // Google Docs wraps all copied HTML in a <b> with font-weight normal\n    const hasNormalFontWeight = b.style.fontWeight === \"normal\";\n    return {\n        forChild: (lexicalNode)=>{\n            if ($03df355ea183d08a$var$$isTextNode(lexicalNode) && !hasNormalFontWeight) lexicalNode.toggleFormat(\"bold\");\n            return lexicalNode;\n        },\n        node: null\n    };\n}\nfunction $03df355ea183d08a$var$convertTextDOMNode(domNode, _parent, preformatted) {\n    let textContent = domNode.textContent || \"\";\n    if (!preformatted && /\\n/.test(textContent)) {\n        textContent = textContent.replace(/\\r?\\n/gm, \" \");\n        if (textContent.trim().length === 0) return {\n            node: null\n        };\n    }\n    return {\n        node: $03df355ea183d08a$var$$createTextNode(textContent)\n    };\n}\nconst $03df355ea183d08a$var$nodeNameToTextFormat = {\n    code: \"code\",\n    em: \"italic\",\n    i: \"italic\",\n    s: \"strikethrough\",\n    strong: \"bold\",\n    sub: \"subscript\",\n    sup: \"superscript\",\n    u: \"underline\"\n};\nfunction $03df355ea183d08a$var$convertTextFormatElement(domNode) {\n    const format = $03df355ea183d08a$var$nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n    if (format === undefined) return {\n        node: null\n    };\n    return {\n        forChild: (lexicalNode)=>{\n            if ($03df355ea183d08a$var$$isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) lexicalNode.toggleFormat(format);\n            return lexicalNode;\n        },\n        node: null\n    };\n}\nfunction $03df355ea183d08a$var$$createTextNode(text = \"\") {\n    return $03df355ea183d08a$var$$applyNodeReplacement(new $03df355ea183d08a$var$TextNode(text));\n}\nfunction $03df355ea183d08a$var$$isTextNode(node) {\n    return node instanceof $03df355ea183d08a$var$TextNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$ParagraphNode extends $03df355ea183d08a$var$ElementNode {\n    static getType() {\n        return \"paragraph\";\n    }\n    static clone(node) {\n        return new $03df355ea183d08a$var$ParagraphNode(node.__key);\n    }\n    createDOM(config) {\n        const dom = document.createElement(\"p\");\n        const classNames = $03df355ea183d08a$var$getCachedClassNameArray(config.theme, \"paragraph\");\n        if (classNames !== undefined) {\n            const domClassList = dom.classList;\n            domClassList.add(...classNames);\n        }\n        return dom;\n    }\n    updateDOM(prevNode, dom, config) {\n        return false;\n    }\n    static importDOM() {\n        return {\n            p: (node)=>({\n                    conversion: $03df355ea183d08a$var$convertParagraphElement,\n                    priority: 0\n                })\n        };\n    }\n    exportDOM(editor) {\n        const { element: element  } = super.exportDOM(editor);\n        if (element && this.isEmpty()) element.append(document.createElement(\"br\"));\n        if (element) {\n            const formatType = this.getFormatType();\n            element.style.textAlign = formatType;\n            const direction = this.getDirection();\n            if (direction) element.dir = direction;\n            const indent = this.getIndent();\n            if (indent > 0) // padding-inline-start is not widely supported in email HTML, but\n            // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n            element.style.textIndent = `${indent * 20}px`;\n        }\n        return {\n            element: element\n        };\n    }\n    static importJSON(serializedNode) {\n        const node = $03df355ea183d08a$var$$createParagraphNode();\n        node.setFormat(serializedNode.format);\n        node.setIndent(serializedNode.indent);\n        node.setDirection(serializedNode.direction);\n        return node;\n    }\n    exportJSON() {\n        return {\n            ...super.exportJSON(),\n            type: \"paragraph\",\n            version: 1\n        };\n    }\n    insertNewAfter(_, restoreSelection) {\n        const newElement = $03df355ea183d08a$var$$createParagraphNode();\n        const direction = this.getDirection();\n        newElement.setDirection(direction);\n        this.insertAfter(newElement, restoreSelection);\n        return newElement;\n    }\n    collapseAtStart() {\n        const children = this.getChildren(); // If we have an empty (trimmed) first paragraph and try and remove it,\n        // delete the paragraph as long as we have another sibling to go to\n        if (children.length === 0 || $03df355ea183d08a$var$$isTextNode(children[0]) && children[0].getTextContent().trim() === \"\") {\n            const nextSibling = this.getNextSibling();\n            if (nextSibling !== null) {\n                this.selectNext();\n                this.remove();\n                return true;\n            }\n            const prevSibling = this.getPreviousSibling();\n            if (prevSibling !== null) {\n                this.selectPrevious();\n                this.remove();\n                return true;\n            }\n        }\n        return false;\n    }\n}\nfunction $03df355ea183d08a$var$convertParagraphElement(element) {\n    const node = $03df355ea183d08a$var$$createParagraphNode();\n    if (element.style) {\n        node.setFormat(element.style.textAlign);\n        const indent = parseInt(element.style.textIndent, 10) / 20;\n        if (indent > 0) node.setIndent(indent);\n    }\n    return {\n        node: node\n    };\n}\nfunction $03df355ea183d08a$var$$createParagraphNode() {\n    return $03df355ea183d08a$var$$applyNodeReplacement(new $03df355ea183d08a$var$ParagraphNode());\n}\nfunction $03df355ea183d08a$var$$isParagraphNode(node) {\n    return node instanceof $03df355ea183d08a$var$ParagraphNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ const $03df355ea183d08a$var$COMMAND_PRIORITY_EDITOR = 0;\nconst $03df355ea183d08a$var$COMMAND_PRIORITY_LOW = 1;\nconst $03df355ea183d08a$var$COMMAND_PRIORITY_NORMAL = 2;\nconst $03df355ea183d08a$var$COMMAND_PRIORITY_HIGH = 3;\nconst $03df355ea183d08a$var$COMMAND_PRIORITY_CRITICAL = 4; // eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $03df355ea183d08a$var$resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n    const keyNodeMap = editor._keyToDOMMap;\n    keyNodeMap.clear();\n    editor._editorState = $03df355ea183d08a$var$createEmptyEditorState();\n    editor._pendingEditorState = pendingEditorState;\n    editor._compositionKey = null;\n    editor._dirtyType = $03df355ea183d08a$var$NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n    editor._updates = [];\n    editor._blockCursorElement = null;\n    const observer = editor._observer;\n    if (observer !== null) {\n        observer.disconnect();\n        editor._observer = null;\n    } // Remove all the DOM nodes from the root element\n    if (prevRootElement !== null) prevRootElement.textContent = \"\";\n    if (nextRootElement !== null) {\n        nextRootElement.textContent = \"\";\n        keyNodeMap.set(\"root\", nextRootElement);\n    }\n}\nfunction $03df355ea183d08a$var$initializeConversionCache(nodes) {\n    const conversionCache = new Map();\n    const handledConversions = new Set();\n    nodes.forEach((node)=>{\n        const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n        if (importDOM == null || handledConversions.has(importDOM)) return;\n        handledConversions.add(importDOM);\n        const map = importDOM();\n        if (map !== null) Object.keys(map).forEach((key)=>{\n            let currentCache = conversionCache.get(key);\n            if (currentCache === undefined) {\n                currentCache = [];\n                conversionCache.set(key, currentCache);\n            }\n            currentCache.push(map[key]);\n        });\n    });\n    return conversionCache;\n}\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */ function $03df355ea183d08a$var$createEditor(editorConfig) {\n    const config = editorConfig || {};\n    const activeEditor = $03df355ea183d08a$var$internalGetActiveEditor();\n    const theme = config.theme || {};\n    const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n    const disableEvents = config.disableEvents || false;\n    const editorState = $03df355ea183d08a$var$createEmptyEditorState();\n    const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : $03df355ea183d08a$var$createUID());\n    const initialEditorState = config.editorState;\n    const nodes = [\n        $03df355ea183d08a$var$RootNode,\n        $03df355ea183d08a$var$TextNode,\n        $03df355ea183d08a$var$LineBreakNode,\n        $03df355ea183d08a$var$ParagraphNode,\n        ...config.nodes || []\n    ];\n    const onError = config.onError;\n    const isEditable = config.editable !== undefined ? config.editable : true;\n    let registeredNodes;\n    if (editorConfig === undefined && activeEditor !== null) registeredNodes = activeEditor._nodes;\n    else {\n        registeredNodes = new Map();\n        for(let i = 0; i < nodes.length; i++){\n            let klass = nodes[i];\n            let replacementClass = null;\n            let replacementKlass = null;\n            if (typeof klass !== \"function\") {\n                const options = klass;\n                klass = options.replace;\n                replacementClass = options.with;\n                replacementKlass = options.withKlass ? options.withKlass : null;\n            } // Ensure custom nodes implement required methods.\n            {\n                const name = klass.name;\n                if (name !== \"RootNode\") {\n                    const proto = klass.prototype;\n                    [\n                        \"getType\",\n                        \"clone\"\n                    ].forEach((method)=>{\n                        // eslint-disable-next-line no-prototype-builtins\n                        if (!klass.hasOwnProperty(method)) console.warn(`${name} must implement static \"${method}\" method`);\n                    });\n                    if (!klass.hasOwnProperty(\"importDOM\") && // eslint-disable-next-line no-prototype-builtins\n                    klass.hasOwnProperty(\"exportDOM\")) console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n                    if (proto instanceof $03df355ea183d08a$var$DecoratorNode) // eslint-disable-next-line no-prototype-builtins\n                    {\n                        if (!proto.hasOwnProperty(\"decorate\")) console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n                    }\n                    if (!klass.hasOwnProperty(\"importJSON\")) console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n                    if (!proto.hasOwnProperty(\"exportJSON\")) console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n                }\n            }\n            const type = klass.getType();\n            const transform = klass.transform();\n            const transforms = new Set();\n            if (transform !== null) transforms.add(transform);\n            registeredNodes.set(type, {\n                klass: klass,\n                replace: replacementClass,\n                replaceWithKlass: replacementKlass,\n                transforms: transforms\n            });\n        }\n    }\n    const editor = new $03df355ea183d08a$var$LexicalEditor(editorState, parentEditor, registeredNodes, {\n        disableEvents: disableEvents,\n        namespace: namespace,\n        theme: theme\n    }, onError ? onError : console.error, $03df355ea183d08a$var$initializeConversionCache(registeredNodes), isEditable);\n    if (initialEditorState !== undefined) {\n        editor._pendingEditorState = initialEditorState;\n        editor._dirtyType = $03df355ea183d08a$var$FULL_RECONCILE;\n    }\n    return editor;\n}\nclass $03df355ea183d08a$var$LexicalEditor {\n    /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */ isComposing() {\n        return this._compositionKey != null;\n    }\n    /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerUpdateListener(listener) {\n        const listenerSetOrMap = this._listeners.update;\n        listenerSetOrMap.add(listener);\n        return ()=>{\n            listenerSetOrMap.delete(listener);\n        };\n    }\n    /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerEditableListener(listener) {\n        const listenerSetOrMap = this._listeners.editable;\n        listenerSetOrMap.add(listener);\n        return ()=>{\n            listenerSetOrMap.delete(listener);\n        };\n    }\n    /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerDecoratorListener(listener) {\n        const listenerSetOrMap = this._listeners.decorator;\n        listenerSetOrMap.add(listener);\n        return ()=>{\n            listenerSetOrMap.delete(listener);\n        };\n    }\n    /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerTextContentListener(listener) {\n        const listenerSetOrMap = this._listeners.textcontent;\n        listenerSetOrMap.add(listener);\n        return ()=>{\n            listenerSetOrMap.delete(listener);\n        };\n    }\n    /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerRootListener(listener) {\n        const listenerSetOrMap = this._listeners.root;\n        listener(this._rootElement, null);\n        listenerSetOrMap.add(listener);\n        return ()=>{\n            listener(null, this._rootElement);\n            listenerSetOrMap.delete(listener);\n        };\n    }\n    /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerCommand(command, listener, priority) {\n        if (priority === undefined) throw Error(`Listener for type \"command\" requires a \"priority\".`);\n        const commandsMap = this._commands;\n        if (!commandsMap.has(command)) commandsMap.set(command, [\n            new Set(),\n            new Set(),\n            new Set(),\n            new Set(),\n            new Set()\n        ]);\n        const listenersInPriorityOrder = commandsMap.get(command);\n        if (listenersInPriorityOrder === undefined) throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n        const listeners = listenersInPriorityOrder[priority];\n        listeners.add(listener);\n        return ()=>{\n            listeners.delete(listener);\n            if (listenersInPriorityOrder.every((listenersSet)=>listenersSet.size === 0)) commandsMap.delete(command);\n        };\n    }\n    /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerMutationListener(klass, listener) {\n        const registeredNode = this._nodes.get(klass.getType());\n        if (registeredNode === undefined) throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n        const mutations = this._listeners.mutation;\n        mutations.set(listener, klass);\n        return ()=>{\n            mutations.delete(listener);\n        };\n    }\n    /** @internal */ registerNodeTransformToKlass(klass, listener) {\n        const type = klass.getType();\n        const registeredNode = this._nodes.get(type);\n        if (registeredNode === undefined) throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n        const transforms = registeredNode.transforms;\n        transforms.add(listener);\n        return registeredNode;\n    }\n    /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */ registerNodeTransform(klass, listener) {\n        const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n        const registeredNodes = [\n            registeredNode\n        ];\n        const replaceWithKlass = registeredNode.replaceWithKlass;\n        if (replaceWithKlass != null) {\n            const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n            registeredNodes.push(registeredReplaceWithNode);\n        }\n        $03df355ea183d08a$var$markAllNodesAsDirty(this, klass.getType());\n        return ()=>{\n            registeredNodes.forEach((node)=>node.transforms.delete(listener));\n        };\n    }\n    /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */ hasNodes(nodes) {\n        for(let i = 0; i < nodes.length; i++){\n            const klass = nodes[i];\n            const type = klass.getType();\n            if (!this._nodes.has(type)) return false;\n        }\n        return true;\n    }\n    /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */ dispatchCommand(type, payload) {\n        return $03df355ea183d08a$var$dispatchCommand(this, type, payload);\n    }\n    /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */ getDecorators() {\n        return this._decorators;\n    }\n    /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */ getRootElement() {\n        return this._rootElement;\n    }\n    /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */ getKey() {\n        return this._key;\n    }\n    /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */ setRootElement(nextRootElement) {\n        const prevRootElement = this._rootElement;\n        if (nextRootElement !== prevRootElement) {\n            const classNames = $03df355ea183d08a$var$getCachedClassNameArray(this._config.theme, \"root\");\n            const pendingEditorState = this._pendingEditorState || this._editorState;\n            this._rootElement = nextRootElement;\n            $03df355ea183d08a$var$resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n            if (prevRootElement !== null) {\n                // TODO: remove this flag once we no longer use UEv2 internally\n                if (!this._config.disableEvents) $03df355ea183d08a$var$removeRootElementEvents(prevRootElement);\n                if (classNames != null) prevRootElement.classList.remove(...classNames);\n            }\n            if (nextRootElement !== null) {\n                const windowObj = $03df355ea183d08a$var$getDefaultView(nextRootElement);\n                const style = nextRootElement.style;\n                style.userSelect = \"text\";\n                style.whiteSpace = \"pre-wrap\";\n                style.wordBreak = \"break-word\";\n                nextRootElement.setAttribute(\"data-lexical-editor\", \"true\");\n                this._window = windowObj;\n                this._dirtyType = $03df355ea183d08a$var$FULL_RECONCILE;\n                $03df355ea183d08a$var$initMutationObserver(this);\n                this._updateTags.add(\"history-merge\");\n                $03df355ea183d08a$var$commitPendingUpdates(this); // TODO: remove this flag once we no longer use UEv2 internally\n                if (!this._config.disableEvents) $03df355ea183d08a$var$addRootElementEvents(nextRootElement, this);\n                if (classNames != null) nextRootElement.classList.add(...classNames);\n            } else this._window = null;\n            $03df355ea183d08a$var$triggerListeners(\"root\", this, false, nextRootElement, prevRootElement);\n        }\n    }\n    /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */ getElementByKey(key) {\n        return this._keyToDOMMap.get(key) || null;\n    }\n    /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */ getEditorState() {\n        return this._editorState;\n    }\n    /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */ setEditorState(editorState, options) {\n        if (editorState.isEmpty()) throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n        $03df355ea183d08a$var$flushRootMutations(this);\n        const pendingEditorState = this._pendingEditorState;\n        const tags = this._updateTags;\n        const tag = options !== undefined ? options.tag : null;\n        if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n            if (tag != null) tags.add(tag);\n            $03df355ea183d08a$var$commitPendingUpdates(this);\n        }\n        this._pendingEditorState = editorState;\n        this._dirtyType = $03df355ea183d08a$var$FULL_RECONCILE;\n        this._dirtyElements.set(\"root\", false);\n        this._compositionKey = null;\n        if (tag != null) tags.add(tag);\n        $03df355ea183d08a$var$commitPendingUpdates(this);\n    }\n    /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */ parseEditorState(maybeStringifiedEditorState, updateFn) {\n        const serializedEditorState = typeof maybeStringifiedEditorState === \"string\" ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n        return $03df355ea183d08a$var$parseEditorState(serializedEditorState, this, updateFn);\n    }\n    /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */ update(updateFn, options) {\n        $03df355ea183d08a$var$updateEditor(this, updateFn, options);\n    }\n    /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */ focus(callbackFn, options = {}) {\n        const rootElement = this._rootElement;\n        if (rootElement !== null) {\n            // This ensures that iOS does not trigger caps lock upon focus\n            rootElement.setAttribute(\"autocapitalize\", \"off\");\n            $03df355ea183d08a$var$updateEditor(this, ()=>{\n                const selection = $03df355ea183d08a$var$$getSelection();\n                const root = $03df355ea183d08a$var$$getRoot();\n                if (selection !== null) // Marking the selection dirty will force the selection back to it\n                selection.dirty = true;\n                else if (root.getChildrenSize() !== 0) {\n                    if (options.defaultSelection === \"rootStart\") root.selectStart();\n                    else root.selectEnd();\n                }\n            }, {\n                onUpdate: ()=>{\n                    rootElement.removeAttribute(\"autocapitalize\");\n                    if (callbackFn) callbackFn();\n                }\n            }); // In the case where onUpdate doesn't fire (due to the focus update not\n            // occuring).\n            if (this._pendingEditorState === null) rootElement.removeAttribute(\"autocapitalize\");\n        }\n    }\n    /**\n   * Removes focus from the editor.\n   */ blur() {\n        const rootElement = this._rootElement;\n        if (rootElement !== null) rootElement.blur();\n        const domSelection = $03df355ea183d08a$var$getDOMSelection(this._window);\n        if (domSelection !== null) domSelection.removeAllRanges();\n    }\n    /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */ isEditable() {\n        return this._editable;\n    }\n    /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */ setEditable(editable) {\n        if (this._editable !== editable) {\n            this._editable = editable;\n            $03df355ea183d08a$var$triggerListeners(\"editable\", this, true, editable);\n        }\n    }\n    /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */ toJSON() {\n        return {\n            editorState: this._editorState.toJSON()\n        };\n    }\n    /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ /** @internal */ constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable){\n        this._parentEditor = parentEditor; // The root element associated with this editor\n        this._rootElement = null; // The current editor state\n        this._editorState = editorState; // Handling of drafts and updates\n        this._pendingEditorState = null; // Used to help co-ordinate selection and events\n        this._compositionKey = null;\n        this._deferred = []; // Used during reconciliation\n        this._keyToDOMMap = new Map();\n        this._updates = [];\n        this._updating = false; // Listeners\n        this._listeners = {\n            decorator: new Set(),\n            editable: new Set(),\n            mutation: new Map(),\n            root: new Set(),\n            textcontent: new Set(),\n            update: new Set()\n        }; // Commands\n        this._commands = new Map(); // Editor configuration for theme/context.\n        this._config = config; // Mapping of types to their nodes\n        this._nodes = nodes; // React node decorators for portals\n        this._decorators = {};\n        this._pendingDecorators = null; // Used to optimize reconciliation\n        this._dirtyType = $03df355ea183d08a$var$NO_DIRTY_NODES;\n        this._cloneNotNeeded = new Set();\n        this._dirtyLeaves = new Set();\n        this._dirtyElements = new Map();\n        this._normalizedNodes = new Set();\n        this._updateTags = new Set(); // Handling of DOM mutations\n        this._observer = null; // Used for identifying owning editors\n        this._key = $03df355ea183d08a$var$createUID();\n        this._onError = onError;\n        this._htmlConversions = htmlConversions; // We don't actually make use of the `editable` argument above.\n        // Doing so, causes e2e tests around the lock to fail.\n        this._editable = true;\n        this._headless = parentEditor !== null && parentEditor._headless;\n        this._window = null;\n        this._blockCursorElement = null;\n    }\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ /** @noInheritDoc */ class $03df355ea183d08a$var$DEPRECATED_GridCellNode extends $03df355ea183d08a$var$ElementNode {\n    exportJSON() {\n        return {\n            ...super.exportJSON(),\n            colSpan: this.__colSpan\n        };\n    }\n    setColSpan(colSpan) {\n        this.getWritable().__colSpan = colSpan;\n        return this;\n    }\n    setRowSpan(rowSpan) {\n        this.getWritable().__rowSpan = rowSpan;\n        return this;\n    }\n    /** @internal */ constructor(colSpan, key){\n        super(key);\n        this.__colSpan = colSpan;\n        this.__rowSpan = 1;\n    }\n}\nfunction $03df355ea183d08a$var$DEPRECATED_$isGridCellNode(node) {\n    return node instanceof $03df355ea183d08a$var$DEPRECATED_GridCellNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ class $03df355ea183d08a$var$DEPRECATED_GridNode extends $03df355ea183d08a$var$ElementNode {\n}\nfunction $03df355ea183d08a$var$DEPRECATED_$isGridNode(node) {\n    return node instanceof $03df355ea183d08a$var$DEPRECATED_GridNode;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ class $03df355ea183d08a$var$DEPRECATED_GridRowNode extends $03df355ea183d08a$var$ElementNode {\n}\nfunction $03df355ea183d08a$var$DEPRECATED_$isGridRowNode(node) {\n    return node instanceof $03df355ea183d08a$var$DEPRECATED_GridRowNode;\n}\n$03df355ea183d08a$export$24cab2f466b76c04 = $03df355ea183d08a$var$$addUpdateTag;\n$03df355ea183d08a$export$2f5beb31df92ea57 = $03df355ea183d08a$var$$applyNodeReplacement;\n$03df355ea183d08a$export$def73b17b22438e7 = $03df355ea183d08a$var$$copyNode;\n$03df355ea183d08a$export$4ccaf7d0d16ab4c = $03df355ea183d08a$var$$createLineBreakNode;\n$03df355ea183d08a$export$f8cd0c3f35d1a61c = $03df355ea183d08a$var$$createNodeSelection;\n$03df355ea183d08a$export$7f0c05ffb7ced90d = $03df355ea183d08a$var$$createParagraphNode;\n$03df355ea183d08a$export$1ccc217b9831b072 = $03df355ea183d08a$var$$createRangeSelection;\n$03df355ea183d08a$export$2785f39dcdec0078 = $03df355ea183d08a$var$$createTextNode;\n$03df355ea183d08a$export$c4b907be1879d8c1 = $03df355ea183d08a$var$$getAdjacentNode;\n$03df355ea183d08a$export$fef265f0d2fcffdd = $03df355ea183d08a$var$$getNearestNodeFromDOMNode;\n$03df355ea183d08a$export$6f13c476561e4734 = $03df355ea183d08a$var$$getNearestRootOrShadowRoot;\n$03df355ea183d08a$export$e725f93d4d48c6d8 = $03df355ea183d08a$var$$getNodeByKey;\n$03df355ea183d08a$export$846e9407a8b5d98c = $03df355ea183d08a$var$$getPreviousSelection;\n$03df355ea183d08a$export$8d83ea843c4eea9a = $03df355ea183d08a$var$$getRoot;\n$03df355ea183d08a$export$63a3201b3a5c7d90 = $03df355ea183d08a$var$$getSelection;\n$03df355ea183d08a$export$2d96f9a07231d1b9 = $03df355ea183d08a$var$$getTextContent;\n$03df355ea183d08a$export$e3d4b782f65c81f1 = $03df355ea183d08a$var$$hasAncestor;\n$03df355ea183d08a$export$d773017360b45449 = $03df355ea183d08a$var$$insertNodes;\n$03df355ea183d08a$export$60aa03725ce41b1c = $03df355ea183d08a$var$$isDecoratorNode;\n$03df355ea183d08a$export$923a058ef54437a4 = $03df355ea183d08a$var$$isElementNode;\n$03df355ea183d08a$export$a78813a4e8e8b9dd = $03df355ea183d08a$var$$isInlineElementOrDecoratorNode;\n$03df355ea183d08a$export$8d016e0592201ace = $03df355ea183d08a$var$$isLeafNode;\n$03df355ea183d08a$export$b16330e40aa25c4e = $03df355ea183d08a$var$$isLineBreakNode;\n$03df355ea183d08a$export$7257e4181651a7c3 = $03df355ea183d08a$var$$isNodeSelection;\n$03df355ea183d08a$export$1fdda795300c79c6 = $03df355ea183d08a$var$$isParagraphNode;\n$03df355ea183d08a$export$181b63acea8a0224 = $03df355ea183d08a$var$$isRangeSelection;\n$03df355ea183d08a$export$5b29ca560c2fedab = $03df355ea183d08a$var$$isRootNode;\n$03df355ea183d08a$export$6f851a24c61146af = $03df355ea183d08a$var$$isRootOrShadowRoot;\n$03df355ea183d08a$export$471953706258be2b = $03df355ea183d08a$var$$isTextNode;\n$03df355ea183d08a$export$ac6fed8d7d40e66c = $03df355ea183d08a$var$$nodesOfType;\n$03df355ea183d08a$export$db10bc6ba67ffcb5 = $03df355ea183d08a$var$$normalizeSelection;\n$03df355ea183d08a$export$e1d3a194df5be556 = $03df355ea183d08a$var$$parseSerializedNode;\n$03df355ea183d08a$export$ea25f5ef71f2d042 = $03df355ea183d08a$var$$setCompositionKey;\n$03df355ea183d08a$export$2aad78c37810bca9 = $03df355ea183d08a$var$$setSelection;\n$03df355ea183d08a$export$cc2d53c74c1fb2b2 = $03df355ea183d08a$var$$splitNode;\n$03df355ea183d08a$export$4b6d457d076906ac = $03df355ea183d08a$var$BLUR_COMMAND;\n$03df355ea183d08a$export$e36aacf84f559bb3 = $03df355ea183d08a$var$CAN_REDO_COMMAND;\n$03df355ea183d08a$export$9fd9dd31dd6ebdf5 = $03df355ea183d08a$var$CAN_UNDO_COMMAND;\n$03df355ea183d08a$export$4926ce1a5702fdc7 = $03df355ea183d08a$var$CLEAR_EDITOR_COMMAND;\n$03df355ea183d08a$export$d3f69a65bbe7edc = $03df355ea183d08a$var$CLEAR_HISTORY_COMMAND;\n$03df355ea183d08a$export$c1a2de6c823e5f82 = $03df355ea183d08a$var$CLICK_COMMAND;\n$03df355ea183d08a$export$6afdf194f304e546 = $03df355ea183d08a$var$COMMAND_PRIORITY_CRITICAL;\n$03df355ea183d08a$export$11c61e12af5e1f41 = $03df355ea183d08a$var$COMMAND_PRIORITY_EDITOR;\n$03df355ea183d08a$export$e8fb7042985cd2e9 = $03df355ea183d08a$var$COMMAND_PRIORITY_HIGH;\n$03df355ea183d08a$export$1d1358fe8b5bfab4 = $03df355ea183d08a$var$COMMAND_PRIORITY_LOW;\n$03df355ea183d08a$export$7bb13e375de35064 = $03df355ea183d08a$var$COMMAND_PRIORITY_NORMAL;\n$03df355ea183d08a$export$6f67c758bb657857 = $03df355ea183d08a$var$CONTROLLED_TEXT_INSERTION_COMMAND;\n$03df355ea183d08a$export$3435fcfb1f59ef96 = $03df355ea183d08a$var$COPY_COMMAND;\n$03df355ea183d08a$export$4dc8a35a083beec4 = $03df355ea183d08a$var$CUT_COMMAND;\n$03df355ea183d08a$export$35595bf6d7e36fd5 = $03df355ea183d08a$var$DELETE_CHARACTER_COMMAND;\n$03df355ea183d08a$export$d77fad8fb8747fd = $03df355ea183d08a$var$DELETE_LINE_COMMAND;\n$03df355ea183d08a$export$8e315b175631384c = $03df355ea183d08a$var$DELETE_WORD_COMMAND;\n$03df355ea183d08a$export$3c62f6ea1bcc0126 = $03df355ea183d08a$var$DEPRECATED_$createGridSelection;\n$03df355ea183d08a$export$512956df40f3b40e = $03df355ea183d08a$var$DEPRECATED_$isGridCellNode;\n$03df355ea183d08a$export$5f4fd2bb79122677 = $03df355ea183d08a$var$DEPRECATED_$isGridNode;\n$03df355ea183d08a$export$6409391dce4c0f48 = $03df355ea183d08a$var$DEPRECATED_$isGridRowNode;\n$03df355ea183d08a$export$d3f36a5fb5c9efe5 = $03df355ea183d08a$var$DEPRECATED_$isGridSelection;\n$03df355ea183d08a$export$e284ef4eccc325c5 = $03df355ea183d08a$var$DEPRECATED_GridCellNode;\n$03df355ea183d08a$export$5627752ddf7eed41 = $03df355ea183d08a$var$DEPRECATED_GridNode;\n$03df355ea183d08a$export$8c09d9a078ea3c2f = $03df355ea183d08a$var$DEPRECATED_GridRowNode;\n$03df355ea183d08a$export$ffbd838cf75d7d8e = $03df355ea183d08a$var$DRAGEND_COMMAND;\n$03df355ea183d08a$export$b62c1cce98fa7223 = $03df355ea183d08a$var$DRAGOVER_COMMAND;\n$03df355ea183d08a$export$2e0fd45fde1da719 = $03df355ea183d08a$var$DRAGSTART_COMMAND;\n$03df355ea183d08a$export$eac1e4b16b80d3ea = $03df355ea183d08a$var$DROP_COMMAND;\n$03df355ea183d08a$export$8244b9efe04488e = $03df355ea183d08a$var$DecoratorNode;\n$03df355ea183d08a$export$dc064fe9e59310fd = $03df355ea183d08a$var$ElementNode;\n$03df355ea183d08a$export$cafe35f35e77bf56 = $03df355ea183d08a$var$FOCUS_COMMAND;\n$03df355ea183d08a$export$d394dc6514823b18 = $03df355ea183d08a$var$FORMAT_ELEMENT_COMMAND;\n$03df355ea183d08a$export$85443a1a9543f043 = $03df355ea183d08a$var$FORMAT_TEXT_COMMAND;\n$03df355ea183d08a$export$2f74f6a2d927e6bd = $03df355ea183d08a$var$INDENT_CONTENT_COMMAND;\n$03df355ea183d08a$export$64e35ce26e025724 = $03df355ea183d08a$var$INSERT_LINE_BREAK_COMMAND;\n$03df355ea183d08a$export$24f4fea65b096b4 = $03df355ea183d08a$var$INSERT_PARAGRAPH_COMMAND;\n$03df355ea183d08a$export$baa60daa2ca402b3 = $03df355ea183d08a$var$KEY_ARROW_DOWN_COMMAND;\n$03df355ea183d08a$export$7525f8f8ab44508 = $03df355ea183d08a$var$KEY_ARROW_LEFT_COMMAND;\n$03df355ea183d08a$export$217ec2281ac1c53b = $03df355ea183d08a$var$KEY_ARROW_RIGHT_COMMAND;\n$03df355ea183d08a$export$7833c2a33ae81d3d = $03df355ea183d08a$var$KEY_ARROW_UP_COMMAND;\n$03df355ea183d08a$export$24bbba9bfa830f78 = $03df355ea183d08a$var$KEY_BACKSPACE_COMMAND;\n$03df355ea183d08a$export$13a0e72b5c0146bb = $03df355ea183d08a$var$KEY_DELETE_COMMAND;\n$03df355ea183d08a$export$61973214e0e18936 = $03df355ea183d08a$var$KEY_DOWN_COMMAND;\n$03df355ea183d08a$export$2cdb7cdd6fccb293 = $03df355ea183d08a$var$KEY_ENTER_COMMAND;\n$03df355ea183d08a$export$53589e422a755d59 = $03df355ea183d08a$var$KEY_ESCAPE_COMMAND;\n$03df355ea183d08a$export$452548a3c1874d61 = $03df355ea183d08a$var$KEY_MODIFIER_COMMAND;\n$03df355ea183d08a$export$d0bc2bb647ce4c17 = $03df355ea183d08a$var$KEY_SPACE_COMMAND;\n$03df355ea183d08a$export$b321bdc226ccdcde = $03df355ea183d08a$var$KEY_TAB_COMMAND;\n$03df355ea183d08a$export$965f56e8043e93ae = $03df355ea183d08a$var$LineBreakNode;\n$03df355ea183d08a$export$fb3b2d438650aff6 = $03df355ea183d08a$var$MOVE_TO_END;\n$03df355ea183d08a$export$dc117ee4d661295a = $03df355ea183d08a$var$MOVE_TO_START;\n$03df355ea183d08a$export$ecf9caa19e96e40d = $03df355ea183d08a$var$OUTDENT_CONTENT_COMMAND;\n$03df355ea183d08a$export$7fb70c61b3bcc883 = $03df355ea183d08a$var$PASTE_COMMAND;\n$03df355ea183d08a$export$e94424771493b912 = $03df355ea183d08a$var$ParagraphNode;\n$03df355ea183d08a$export$8c4a0748d31d9941 = $03df355ea183d08a$var$REDO_COMMAND;\n$03df355ea183d08a$export$9cc285f2a3ff220c = $03df355ea183d08a$var$REMOVE_TEXT_COMMAND;\n$03df355ea183d08a$export$1c180cb67301903c = $03df355ea183d08a$var$RootNode;\n$03df355ea183d08a$export$e396fef71d2b56e5 = $03df355ea183d08a$var$SELECTION_CHANGE_COMMAND;\n$03df355ea183d08a$export$f0a25ea3087686aa = $03df355ea183d08a$var$TextNode;\n$03df355ea183d08a$export$34722a4946cb641e = $03df355ea183d08a$var$UNDO_COMMAND;\n$03df355ea183d08a$export$8d4021544bdece00 = $03df355ea183d08a$var$createCommand;\n$03df355ea183d08a$export$eb02d1ee0d3cac30 = $03df355ea183d08a$var$createEditor;\n$03df355ea183d08a$export$f1b377b21cd6350b = $03df355ea183d08a$var$isSelectionWithinEditor;\n\n\n//# sourceMappingURL=Lexical.umd.prod.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"Lexical.umd.prod.js.map"}